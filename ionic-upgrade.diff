diff --git a/phonegap/www/index.html b/phonegap/www/index.html
index 5e01d4f..4ea9421 100644
--- a/phonegap/www/index.html
+++ b/phonegap/www/index.html
@@ -26,9 +26,11 @@
     <ion-nav-bar 
       data-ng-show="!$state.includes('start')" 
       animation="nav-title-slide-ios7"
-      type="bar-dark"
-      back-button-type="button-icon"
-      back-button-icon="ion-ios7-arrow-back">
+      class="bar bar-dark">
+
+      <ion-nav-back-button class="button button-icon button-dark ion-ios7-arrow-back">
+      </ion-nav-back-button>
+
     </ion-nav-bar>
     <ion-nav-view animation="slide-left-right"></ion-nav-view>
     <div ng-include data-ng-show="!$state.includes('start')" src="'views/tabs.html'"></div>
diff --git a/phonegap/www/scripts/app.js b/phonegap/www/scripts/app.js
index 4e23d16..dbfc0b6 100644
--- a/phonegap/www/scripts/app.js
+++ b/phonegap/www/scripts/app.js
@@ -98,14 +98,8 @@ angular.module('VenueMobileApp', [
       return $state.current.name.replace(".", "_");
     }
     
-    $rootScope.rightButtons = [
-      {
-        type: 'button-dark',
-        content: '<i class="icon ion-home"></i>',
-        tap: function(e) {
-          $state.go("start");
-        }
-      }
-    ]
+    $rootScope.goHome = function() {
+      $state.go("start");
+    }
   }
 ]);
\ No newline at end of file
diff --git a/phonegap/www/scripts/ionic-angular.js b/phonegap/www/scripts/ionic-angular.js
index 0aba146..c8cdf25 100644
--- a/phonegap/www/scripts/ionic-angular.js
+++ b/phonegap/www/scripts/ionic-angular.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,6 +12,7 @@
  *
  */
 
+(function() {
 /**
  * Create a wrapping module to ease having to include too many
  * modules.
@@ -37,33 +38,25 @@ angular.module('ionic.service', [
   'ionic.decorator.location'
 ]);
 
-// UI specific services and delegates
-angular.module('ionic.ui.service', [
-  'ionic.ui.service.scrollDelegate',
-  'ionic.ui.service.slideBoxDelegate',
-  'ionic.ui.service.sideMenuDelegate',
-]);
-
 angular.module('ionic.ui', [
-                            'ionic.ui.content',
-                            'ionic.ui.scroll',
-                            'ionic.ui.tabs',
-                            'ionic.ui.viewState',
-                            'ionic.ui.header',
-                            'ionic.ui.sideMenu',
-                            'ionic.ui.slideBox',
-                            'ionic.ui.list',
-                            'ionic.ui.checkbox',
-                            'ionic.ui.toggle',
-                            'ionic.ui.radio',
-                            'ionic.ui.touch',
-                            'ionic.ui.popup'
-                           ]);
-
+    'ionic.ui.checkbox',
+    'ionic.ui.content',
+    'ionic.ui.header',
+    'ionic.ui.list',
+    'ionic.ui.navBar',
+    'ionic.ui.popup',
+    'ionic.ui.radio',
+    'ionic.ui.scroll',
+    'ionic.ui.sideMenu',
+    'ionic.ui.slideBox',
+    'ionic.ui.tabs',
+    'ionic.ui.toggle',
+    'ionic.ui.touch',
+    'ionic.ui.viewState'
+]);
 
 angular.module('ionic', [
     'ionic.service',
-    'ionic.ui.service',
     'ionic.ui',
 
     // Angular deps
@@ -127,6 +120,86 @@ angular.element.prototype.removeClass = function(cssClasses) {
   return this;
 };
 
+
+function delegateService(methodNames) {
+  return ['$log', function($log) {
+    var delegate = this;
+
+    var instances = this._instances = [];
+    this._registerInstance = function(instance, handle) {
+      handle || (handle = ionic.Utils.nextUid());
+
+      instance.$$delegateHandle = handle;
+      instances.push(instance);
+
+      return function deregister() {
+        var index = instances.indexOf(instance);
+        if (index !== -1) {
+          instances.splice(index, 1);
+        }
+      };
+    };
+
+    this.$getByHandle = function(handle) {
+      if (!handle) {
+        return delegate;
+      }
+      return new InstanceForHandle(handle);
+    };
+
+    /*
+     * Creates a new object that will have all the methodNames given,
+     * and call them on the given the controller instance matching given
+     * handle.
+     * The reason we don't just let $getByHandle return the controller instance
+     * itself is that the controller instance might not exist yet.
+     *
+     * We want people to be able to do
+     * `var instance = $ionicScrollDelegate.$getByHandle('foo')` on controller
+     * instantiation, but on controller instantiation a child directive
+     * may not have been compiled yet!
+     *
+     * So this is our way of solving this problem: we create an object
+     * that will only try to fetch the controller with given handle
+     * once the methods are actually called.
+     */
+    function InstanceForHandle(handle) {
+      this.handle = handle;
+    }
+    methodNames.forEach(function(methodName) {
+      InstanceForHandle.prototype[methodName] = function() {
+        var handle = this.handle;
+        var instancesToUse = instances.filter(function(instance) {
+          return instance.$$delegateHandle === handle;
+        });
+        if (!instancesToUse.length) {
+          return $log.warn(
+            'Delegate for handle "'+this.handle+'" could not find a',
+            'corresponding element with delegate-handle="'+this.handle+'"!',
+            methodName, 'was not called!');
+        }
+        return callMethod(instancesToUse, methodName, arguments);
+      };
+      delegate[methodName] = function() {
+        return callMethod(instances, methodName, arguments);
+      };
+
+      function callMethod(instancesToUse, methodName, args) {
+        var finalResult;
+        var result;
+        instancesToUse.forEach(function(instance, index) {
+          result = instance[methodName].apply(instance, args);
+          //Make it so the first result is the one returned
+          if (index === 0) {
+            finalResult = result;
+          }
+        });
+        return finalResult;
+      }
+    });
+  }];
+}
+
 angular.module('ionic.service.actionSheet', ['ionic.service.templateLoad', 'ionic.service.platform', 'ionic.ui.actionSheet', 'ngAnimate'])
 
 /**
@@ -405,6 +478,7 @@ angular.module('ionic.service.loading', ['ionic.ui.loading'])
      * @returns {object} A shown loader with the following methods:
      *  - `hide()` - Hides the loader.
      *  - `show()` - Shows the loader.
+     *  - `setContent(string)` - Sets the html content of the loader.
      */
     show: function(opts) {
       var defaults = {
@@ -452,7 +526,6 @@ angular.module('ionic.service.modal', ['ionic.service.templateLoad', 'ionic.serv
  * @ngdoc service
  * @name $ionicModal
  * @module ionic
- * @controller ionicModal
  * @description
  * The Modal is a content pane that can go over the user's main view
  * temporarily.  Usually used for making a choice or editing an item.
@@ -683,7 +756,6 @@ angular.module('ionic.service.platform', [])
  * @ngdoc service
  * @name $ionicPlatform
  * @module ionic
- * @group utilities
  * @description
  * An angular abstraction of {@link ionic.utility:ionic.Platform}.
  *
@@ -869,8 +941,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         console.log('Tapped!', res);
       }, function(err) {
         console.log('Err:', err);
-      }, function(msg) {
-        console.log('message:', msg);
+      }, function(popup) {
+        // If you need to access the popup directly, do it in the notify method
+        // This is also where you can programatically close the popup:
+        // popup.close();
       });
 
       // A confirm dialog
@@ -922,7 +996,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   });
   ```
 
- 
+
  */
 .factory('$ionicPopup', ['$rootScope', '$q', '$document', '$compile', '$timeout', '$ionicTemplateLoader',
   function($rootScope, $q, $document, $compile, $timeout, $ionicTemplateLoader) {
@@ -947,6 +1021,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     }
   };
 
+  var focusLastButton = function(popup) {
+    var buttons, lastButton;
+    buttons = popup.el.querySelectorAll('button');
+    lastButton = buttons[buttons.length-1];
+    if(lastButton) {
+      lastButton.focus();
+    }
+  }
+
   // Show a single popup
   var showSinglePopup = function(popup, opts) {
     var _this = this;
@@ -957,6 +1040,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+
+      focusLastButton(popup);
     });
   };
 
@@ -966,6 +1051,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+      focusLastButton(popup);
     });
   };
 
@@ -1003,11 +1089,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     var el = $compile('<ion-popup-backdrop></ion-popup-backdrop>')($rootScope.$new(true));
     $document[0].body.appendChild(el[0]);
     backdropEl = el;
+    $document[0].body.classList.add('popup-open');
   };
 
   // Remove the backdrop element
   var removeBackdrop = function() {
     backdropEl.remove();
+    $timeout(function(){
+      $document[0].body.classList.remove('popup-open');
+    }, 300);
   };
 
   // Push the new popup onto the stack with the given data and scope.
@@ -1054,7 +1144,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   var constructPopupOnScope = function(element, scope) {
     var popup = {
       el: element[0],
-      scope: scope
+      scope: scope,
+      close: function() {
+        popAndRemove(this);
+      }
     };
 
     scope.popup = popup;
@@ -1063,8 +1156,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   }
 
   var buildPopupTemplate = function(opts, content) {
-    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">' 
-        + (content || '') + 
+    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">'
+        + (content || '') +
       '</ion-popup>';
   };
 
@@ -1120,18 +1213,25 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   };
 
 
+
   // Public API
   return {
+    /**
+     * @private
+     */
     showPopup: function(data) {
       var q = $q.defer();
 
       createPopup(data, q).then(function(popup, scope) {
 
+        // Send the popup back
+        q.notify(popup);
+
         // We constructed the popup, push it on the stack and show it
         pushAndShow(popup, data);
 
       }, function(err) {
-        console.error('Unable to load popup:', err);
+        void 0;
       });
 
       return q.promise;
@@ -1142,7 +1242,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @name $ionicPopup#show
      * @description show a complex popup. This is the master show function for all popups
      * @param {data} object The options for showing a popup, of the form:
-     *
+     * @returns {Promise} an Angular promise which resolves when the user enters the correct data, and also
+     * sends the constructed popup in the notify function (for programatic closing, as shown in the example above).
      * ```
      * {
      *   content: '', // String. The content of the popup
@@ -1150,7 +1251,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *   subTitle: '', // String (optional). The sub-title of the popup
      *   templateUrl: '', // URL String (optional). The URL of a template to load as the content (instead of the `content` field)
      *   scope: null, // Scope (optional). A scope to apply to the popup content (for using ng-model in a template, for example)
-     *   buttons: 
+     *   buttons:
      *     [
      *       {
      *         text: 'Cancel',
@@ -1173,7 +1274,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *         }
      *       }
      *     ]
-     * 
+     *
      * }
      * ```
     */
@@ -1190,7 +1291,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *
      * ```javascript
      *  $ionicPopup.alert({
-     *    title: 'Hey!;,
+     *    title: 'Hey!',
      *    content: 'Don\'t do that!'
      *  }).then(function(res) {
      *    // Accepted
@@ -1283,7 +1384,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @ngdoc method
      * @name $ionicPopup#prompt
      * @description show a simple prompt dialog.
-     * 
+     *
      * ```javascript
      *  $ionicPopup.prompt({
      *    title: 'Password Check',
@@ -1336,7 +1437,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         ]
       });
     }
-    
+
   };
 }]);
 
@@ -1484,6 +1585,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           currentView = viewHistory.currentView,
           backView = viewHistory.backView,
           forwardView = viewHistory.forwardView,
+          nextViewOptions = this.nextViewOptions(),
           rsp = {
             viewId: null,
             navAction: null,
@@ -1517,7 +1619,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
         // they went back one, set the old current view as a forward view
         rsp.viewId = backView.viewId;
         rsp.navAction = 'moveBack';
-        currentView.scrollValues = {}; //when going back, erase scrollValues
+        rsp.viewId = backView.viewId;
         if(backView.historyId === currentView.historyId) {
           // went back in the same history
           rsp.navDirection = 'back';
@@ -1591,13 +1693,23 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           stateName: this.getCurrentStateName(),
           stateParams: this.getCurrentStateParams(),
           url: $location.url(),
-          scrollValues: null
         });
 
+        if (rsp.navAction == 'moveBack') {
+          //moveBack(from, to);
+          $rootScope.$emit('$viewHistory.viewBack', currentView.viewId, rsp.viewId);
+        }
+
         // add the new view to this history's stack
         hist.stack.push(viewHistory.views[rsp.viewId]);
       }
 
+      if(nextViewOptions) {
+        if(nextViewOptions.disableAnimate) rsp.navDirection = null;
+        if(nextViewOptions.disableBack) viewHistory.views[rsp.viewId].backViewId = null;
+        this.nextViewOptions(null);
+      }
+
       this.setNavViews(rsp.viewId);
 
       hist.cursor = viewHistory.currentView.index;
@@ -1747,6 +1859,14 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
       return { historyId: 'root', scope: $rootScope };
     },
 
+    nextViewOptions: function(opts) {
+      if(arguments.length) {
+        this._nextOpts = opts;
+      } else {
+        return this._nextOpts;
+      }
+    },
+
     getRenderer: function(navViewElement, navViewAttrs, navViewScope) {
       var service = this;
       var registerData;
@@ -1902,293 +2022,29 @@ angular.module('ionic.decorator.location', [])
  * @private
  */
 .config(['$provide', function($provide) {
-  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
-}]);
-
-function $LocationDecorator($location, $timeout) {
-
-  $location.__hash = $location.hash;
-  //Fix: when window.location.hash is set, the scrollable area
-  //found nearest to body's scrollTop is set to scroll to an element
-  //with that ID.
-  $location.hash = function(value) {
-    if (angular.isDefined(value)) {
-      $timeout(function() {
-        var scroll = document.querySelector('.scroll-content');
-        if (scroll)
-          scroll.scrollTop = 0;
-      }, 0, false);
-    }
-    return $location.__hash(value);
-  };
-
-  return $location;
-}
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.scrollDelegate', [])
-
-/**
- * @ngdoc service
- * @name $ionicScrollDelegate
- * @module ionic
- * @group page layout
- * @description
- * Allows you to have some control over a scrollable area (created by an
- * {@link ionic.directive:ionContent} or {@link ionic.directive:ionScroll}
- * directive).
- *
- * Inject it into a controller, and its methods will send messages to the nearest scrollView and all of its children.
- *
- * @usage
- * ```html
- * <ion-content ng-controller="MyController">
- *   <button class="button" ng-click="scrollToTop()">
- *     Scroll To Top
- *   </button>
- * </ion-content>
- * ```
- * ```js
- * function MyController($scope, $ionicScrollDelegate) {
- *   $scope.scrollToTop = function() {
- *     $ionicScrollDelegate.scrollTop();
- *   };
- * }
- * ```
- */
-.factory('$ionicScrollDelegate', ['$rootScope', '$timeout', '$q', '$anchorScroll', '$location', '$document', function($rootScope, $timeout, $q, $anchorScroll, $location, $document) {
-  return {
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollTop
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTop: function(animate) {
-      $rootScope.$broadcast('scroll.scrollTop', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollBottom
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollBottom: function(animate) {
-      $rootScope.$broadcast('scroll.scrollBottom', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scroll
-     * @param {number} left The x-value to scroll to.
-     * @param {number} top The y-value to scroll to.
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTo: function(left, top, animate) {
-      $rootScope.$broadcast('scroll.scrollTo', left, top, animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#anchorScroll
-     * @description Tell the scrollView to scroll to the element with an id
-     * matching window.location.hash.
-     *
-     * If no matching element is found, it will scroll to top.
-     *
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    anchorScroll: function(animate) {
-      $rootScope.$broadcast('scroll.anchorScroll', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#resize
-     * @description Tell the scrollView to recalculate the size of its container.
-     */
-    resize: function() {
-      $rootScope.$broadcast('scroll.resize');
-    },
-    /**
-     * @private
-     */
-    tapScrollToTop: function(element, animate) {
-      var _this = this;
-      if (!angular.isDefined(animate)) {
-        animate = true;
-      }
-
-      ionic.on('tap', function(e) {
-        var target = e.target;
-        //Don't scroll to top for a button click
-        if (ionic.DomUtil.getParentOrSelfWithClass(target, 'button')) {
-          return;
-        }
-
-        var el = element[0];
-        var bounds = el.getBoundingClientRect();
-
-        if(ionic.DomUtil.rectContains(e.gesture.touches[0].pageX, e.gesture.touches[0].pageY, bounds.left, bounds.top, bounds.left + bounds.width, bounds.top + 20)) {
-          _this.scrollTop(animate);
-        }
-      }, element[0]);
-    },
-
-    finishRefreshing: function($scope) {
-      $scope.$broadcast('scroll.refreshComplete');
-    },
-
-    /**
-     * @private
-     * Attempt to get the current scroll view in scope (if any)
-     *
-     * Note: will not work in an isolated scope context.
-     */
-    getScrollView: function($scope) {
-      return $scope.scrollView;
-    },
-
-    /**
-     * @private
-     * Register a scope and scroll view for scroll event handling.
-     * $scope {Scope} the scope to register and listen for events
-     */
-    register: function($scope, $element, scrollView) {
-
-      var scrollEl = $element[0];
-
-      function scrollViewResize() {
-        // Run the resize after this digest
-        return $timeout(function() {
-          scrollView.resize();
-        });
-      }
-
-      $element.on('scroll', function(e) {
-        var detail = (e.originalEvent || e).detail || {};
-
-        $scope.$onScroll && $scope.$onScroll({
-          event: e,
-          scrollTop: detail.scrollTop || 0,
-          scrollLeft: detail.scrollLeft || 0
-        });
-
-      });
-
-      $scope.$parent.$on('scroll.resize', scrollViewResize);
-
-      // Called to stop refreshing on the scroll view
-      $scope.$parent.$on('scroll.refreshComplete', function(e) {
-        scrollView.finishPullToRefresh();
-      });
-
-      $scope.$parent.$on('scroll.anchorScroll', function(e, animate) {
-        scrollViewResize().then(function() {
-          var hash = $location.hash();
-          var elm;
-          if (hash && (elm = document.getElementById(hash)) ) {
-            var scroll = ionic.DomUtil.getPositionInParent(elm, scrollEl);
-            scrollView.scrollTo(scroll.left, scroll.top, !!animate);
-          } else {
-            scrollView.scrollTo(0,0, !!animate);
-          }
-        });
-      });
-
-      $scope.$parent.$on('scroll.scrollTo', function(e, left, top, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(left, top, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollTop', function(e, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(0, 0, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollBottom', function(e, animate) {
-        scrollViewResize().then(function() {
-          var sv = scrollView;
-          if (sv) {
-            var max = sv.getScrollMax();
-            sv.scrollTo(max.left, max.top, !!animate);
-          }
-        });
-      });
-    }
-  };
-}]);
-
-})(ionic);
-
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.sideMenuDelegate', [])
-
-.factory('$ionicSideMenuDelegate', ['$rootScope', '$timeout', '$q', function($rootScope, $timeout, $q) {
-  return {
-    getSideMenuController: function($scope) {
-      return $scope.sideMenuController;
-    },
-    close: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.close();
-      }
-    },
-    toggleLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleLeft();
-      }
-    },
-    toggleRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleRight();
-      }
-    },
-    openLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(100);
-      }
-    },
-    openRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(-100);
+  function $LocationDecorator($location, $timeout) {
+
+    $location.__hash = $location.hash;
+    //Fix: when window.location.hash is set, the scrollable area
+    //found nearest to body's scrollTop is set to scroll to an element
+    //with that ID.
+    $location.hash = function(value) {
+      if (angular.isDefined(value)) {
+        $timeout(function() {
+          var scroll = document.querySelector('.scroll-content');
+          if (scroll)
+            scroll.scrollTop = 0;
+        }, 0, false);
       }
-    }
-  };
-}]);
-
-})();
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.slideBoxDelegate', [])
-
-.factory('$ionicSlideBoxDelegate', ['$rootScope', '$timeout', function($rootScope, $timeout) {
-  return {
-    /**
-     * Trigger a slidebox to update and resize itself
-     */
-    update: function(animate) {
-      $rootScope.$broadcast('slideBox.update');
-    },
+      return $location.__hash(value);
+    };
 
-    register: function($scope, $element) {
-      $scope.$parent.$on('slideBox.update', function(e) {
-        if(e.defaultPrevented) {
-          return;
-        }
-        $timeout(function() {
-          $scope.$parent.slideBoxController.setup();
-        });
-        e.preventDefault();
-      });
-    }
-  };
+    return $location;
+  }
+  
+  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
 }]);
 
-})(ionic);
-
 (function() {
 'use strict';
 
@@ -2251,124 +2107,144 @@ angular.module('ionic.ui.actionSheet', [])
 
 angular.module('ionic.ui.header', ['ngAnimate', 'ngSanitize'])
 
-.directive('barHeader', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'C',
-    link: function($scope, $element, $attr) {
-      // We want to scroll to top when the top of this element is clicked
-      $ionicScrollDelegate.tapScrollToTop($element);
-    }
-  };
-}])
+.directive('ionNavBar', tapScrollToTopDirective())
+.directive('ionHeaderBar', tapScrollToTopDirective())
 
 /**
  * @ngdoc directive
  * @name ionHeaderBar
  * @module ionic
  * @restrict E
+ *
  * @description
- * While Ionic provides simple Header and Footer bars that can be created through
- * HTML and CSS alone, Header bars specifically can be extended in order to
- * provide dynamic layout features such as auto-title centering and animation.
- * They are also used by the Views and Navigation Controller to animate a title
- * on navigation and toggle a back button.
- *
- * The main header bar feature provided is auto title centering.
- * In this situation, the title text will center itself until either the
- * left or right button content is too wide for the label to center.
- * In that case, it will slide left or right until it can fit.
- * You can also align the title left for a more Android-friendly header.
- *
- * Using two-way data binding, the header bar will automatically
- * readjust the heading title alignment when the title or buttons change.
- *
- * @param {string} title The title use on the headerBar.
- * @param {expression=} leftButtons Point to an array of buttons to put on the left of the bar.
- * @param {expression=} rightButtons Point to an array of buttons to put on the right of the bar.
- * @param {string=} type The type of the bar, for example 'bar-positive'.
- * @param {string=} align Where to align the title. 'left', 'right', or 'center'.  Defaults to 'center'.
+ * Adds a fixed header bar above some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
  *
  * @usage
  * ```html
- * <ion-header-bar
- *  title="{{myTitle}}"
- *  left-buttons="leftButtons"
- *  right-buttons="rightButtons"
- *  type="bar-positive"
- *  align-title="center">
+ * <ion-header-bar align-title="left" class="bar-positive">
+ *   <div class="buttons">
+ *     <button class="button" ng-click="doSomething()">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons">
+ *     <button class="button">Right Button</button>
+ *   </div>
  * </ion-header-bar>
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
  * ```
- *
  */
-.directive('ionHeaderBar', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<header class="bar bar-header">\
-                <div class="buttons">\
-                  <button ng-repeat="button in leftButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-                <h1 class="title" ng-bind-html="title"></h1>\
-                <div class="buttons">\
-                  <button ng-repeat="button in rightButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-              </header>',
+.directive('ionHeaderBar', barDirective(true))
 
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      type: '@',
-      alignTitle: '@'
-    },
-    link: function($scope, $element, $attr) {
-      var hb = new ionic.views.HeaderBar({
-        el: $element[0],
-        alignTitle: $scope.alignTitle || 'center'
-      });
+/**
+ * @ngdoc directive
+ * @name ionFooterBar
+ * @module ionic
+ * @restrict E
+ *
+ * @description
+ * Adds a fixed footer bar below some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
+ *
+ * @usage
+ * ```html
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
+ * <ion-footer-bar align-title="left" class="bar-assertive">
+ *   <div class="buttons">
+ *     <button class="button">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons" ng-click="doSomething()">
+ *     <button class="button">Right Button</button>
+ *   </div>
+ * </ion-footer-bar>
+ * ```
+ */
+.directive('ionFooterBar', barDirective(false));
 
-      $element.addClass($scope.type);
+function tapScrollToTopDirective() {
+  return ['$ionicScrollDelegate', function($ionicScrollDelegate) {
+    return {
+      restrict: 'E',
+      link: function($scope, $element, $attr) {
+        ionic.on('tap', onTap, $element[0]);
+        $scope.$on('$destroy', function() {
+          ionic.off('tap', onTap, $element[0]);
+        });
 
-      $scope.headerBarView = hb;
+        function onTap(e) {
+          if (ionic.DomUtil.getParentOrSelfWithClass(e.target, 'button', 4)) {
+            return;
+          }
+          var touch = e.gesture && e.gesture.touches[0] || e.detail.touches[0];
+          var bounds = $element[0].getBoundingClientRect();
+          if (ionic.DomUtil.rectContains(
+            touch.pageX, touch.pageY,
+            bounds.left, bounds.top - 20,
+            bounds.left + bounds.width, bounds.top + bounds.height
+          )) {
+            $ionicScrollDelegate.scrollTop(true);
+          }
+        }
+      }
+    };
+  }];
+}
 
-      $scope.$watchCollection('leftButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
 
-      $scope.$watchCollection('rightButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
-
-      $scope.$watch('title', function(val) {
-        // Resize the title since the title has changed
-        hb.align();
-      });
-    }
-  };
-}])
-
-.directive('ionFooterBar', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<footer class="bar bar-footer" ng-transclude>\
-              </footer>',
+function barDirective(isHeader) {
+  return [function() {
+    return {
+      restrict: 'E',
+      compile: function($element, $attr) {
+        $element.addClass(isHeader ? 'bar bar-header' : 'bar bar-footer');
+
+        return { pre: prelink };
+        function prelink($scope, $element, $attr) {
+          var hb = new ionic.views.HeaderBar({
+            el: $element[0],
+            alignTitle: $attr.alignTitle || 'center'
+          });
 
-    scope: {
-      type: '@',
-    },
+          var el = $element[0];
+          //just incase header is on rootscope
+          var parentScope = $scope.$parent || $scope;
 
-    link: function($scope, $element, $attr) {
-      $element.addClass($scope.type);
-    }
-  };
-});
+          if (isHeader) {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubheader = value.indexOf('bar-subheader') !== -1;
+              parentScope.$hasHeader = !isSubheader;
+              parentScope.$hasSubheader = isSubheader;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasHeader = parentScope.$hasSubheader = null;
+            });
+          } else {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubfooter = value.indexOf('bar-subfooter') !== -1;
+              parentScope.$hasFooter = !isSubfooter;
+              parentScope.$hasSubfooter = isSubfooter;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasFooter = parentScope.$hasSubfooter = null;
+            });
+            $scope.$watch('$hasTabs', function(val) {
+              $element.toggleClass('has-tabs', !!val);
+            });
+          }
+        }
+      }
+    };
+  }];
+}
 
 })(ionic);
 
@@ -2428,7 +2304,7 @@ angular.module('ionic.ui.checkbox', [])
 (function() {
 'use strict';
 
-angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
+angular.module('ionic.ui.content', ['ionic.ui.scroll'])
 
 /**
  * Panel is a simple 100% width and height, fixed panel. It's meant for content to be
@@ -2438,7 +2314,6 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionPane
  * @module ionic
- * @group page layout
  * @restrict E
  *
  * @description A simple container that fits content, with no side effects.  Adds the 'pane' class to the element.
@@ -2456,12 +2331,12 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionContent
  * @module ionic
- * @group page layout
- * @groupMainItem
+ * @delegate ionic.service:$ionicScrollDelegate
+ * @restrict E
  *
  * @description
  * The ionContent directive provides an easy to use content area that can be configured
- * to use Ionic's custom Scroll View, or the built in overflow scorlling of the browser.
+ * to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
  *
  * While we recommend using the custom Scroll features in Ionic in most cases, sometimes
  * (for performance reasons) only the browser's native overflow scrolling will suffice,
@@ -2472,52 +2347,48 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * directive, and infinite scrolling with the {@link ionic.directive:ionInfiniteScroll}
  * directive.
  *
- * @restrict E
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
+ * @param {boolean=} padding Whether to add padding to the content.
+ * of the content.  Defaults to true on iOS, false on Android.
  * @param {boolean=} scroll Whether to allow scrolling of content.  Defaults to true.
  * @param {boolean=} overflow-scroll Whether to use overflow-scrolling instead of
  * Ionic scroll.
- * @param {boolean=} padding Whether to add padding to the content.
- * @param {boolean=} has-header Whether to offset the content for a header bar.
- * @param {boolean=} has-subheader Whether to offset the content for a subheader bar.
- * @param {boolean=} has-footer Whether to offset the content for a footer bar.
  * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
  * of the content.  Defaults to true on iOS, false on Android.
  * @param {expression=} on-scroll Expression to evaluate when the content is scrolled.
  * @param {expression=} on-scroll-complete Expression to evaluate when a scroll action completes.
  */
 .directive('ionContent', [
-  '$parse',
   '$timeout',
-  '$ionicScrollDelegate',
   '$controller',
   '$ionicBind',
-function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    transclude: true,
     require: '^?ionNavView',
     scope: true,
-    template:
-    '<div class="scroll-content">' +
-      '<div class="scroll"></div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(attr.hasHeader == "true") { element.addClass('has-header'); }
-      if(attr.hasSubheader == "true") { element.addClass('has-subheader'); }
-      if(attr.hasFooter == "true") { element.addClass('has-footer'); }
-      if(attr.hasTabs == "true") { element.addClass('has-tabs'); }
-      if(attr.padding == "true") { element.find('div').addClass('padding'); }
+    compile: function(element, attr) {
+      element.addClass('scroll-content');
 
-      return {
-        //Prelink <ion-content> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr, navViewCtrl) {
-        var clone, sc, scrollView, scrollCtrl,
-          scrollContent = angular.element($element[0].querySelector('.scroll'));
+        $scope.$watch(function() {
+          return ($scope.$hasHeader ? ' has-header' : '')  +
+            ($scope.$hasSubheader ? ' has-subheader' : '') +
+            ($scope.$hasFooter ? ' has-footer' : '') +
+            ($scope.$hasSubfooter ? ' has-subfooter' : '') +
+            ($scope.$hasTabs ? ' has-tabs' : '') +
+            ($scope.$hasTabsTop ? ' has-tabs-top' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
 
         $ionicBind($scope, $attr, {
           $onScroll: '&onScroll',
@@ -2534,16 +2405,22 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           scrollEventInterval: '@'
         });
 
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
+        }
+
         if ($scope.scroll === "false") {
           //do nothing
         } else if(attr.overflowScroll === "true") {
           $element.addClass('overflow-scroll');
         } else {
-
-          scrollCtrl = $controller('$ionicScroll', {
+          $controller('$ionicScroll', {
             $scope: $scope,
             scrollViewOptions: {
               el: $element[0],
+              delegateHandle: attr.delegateHandle,
               bouncing: $scope.$eval($scope.hasBouncing),
               startX: $scope.$eval($scope.startX) || 0,
               startY: $scope.$eval($scope.startY) || 0,
@@ -2560,33 +2437,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
               }
             }
           });
-          //Publish scrollView to parent so children can access it
-          scrollView = $scope.$parent.scrollView = scrollCtrl.scrollView;
-
-          $scope.$on('$viewContentLoaded', function(e, viewHistoryData) {
-            viewHistoryData || (viewHistoryData = {});
-            var scroll = viewHistoryData.scrollValues;
-            if (scroll) {
-              $timeout(function() {
-                scrollView.scrollTo(+scroll.left || null, +scroll.top || null);
-              }, 0);
-            }
-
-            //Save scroll onto viewHistoryData when scope is destroyed
-            $scope.$on('$destroy', function() {
-              viewHistoryData.scrollValues = scrollView.getValues();
-            });
-          });
-
         }
 
-        transclude($scope, function(clone) {
-          if (scrollCtrl) {
-            clone.data('$$ionicScrollController', scrollCtrl);
-          }
-          scrollContent.append(clone);
-        });
-
       }
     }
   };
@@ -2597,7 +2449,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @name ionRefresher
  * @module ionic
  * @restrict E
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @description
  * Allows you to add pull-to-refresh to a scrollView.
@@ -2608,19 +2459,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * When refreshing is complete, $broadcast the 'scroll.refreshComplete' event
  * from your controller.
  *
- * @param {expression=} on-refresh Called when the user pulls down enough and lets go
- * of the refresher.
- * @param {expression=} on-pulling Called when the user starts to pull down
- * on the refresher.
- * @param {string=} pulling-icon The icon to display while the user is pulling down.
- * Default: 'ion-arrow-down-c'.
- * @param {string=} pulling-text The text to display while the user is pulling down.
- * @param {string=} refreshing-icon The icon to display after user lets go of the
- * refresher.
- * @param {string=} refreshing-text The text to display after the user lets go of
- * the refresher.
- *
  * @usage
+ *
  * ```html
  * <ion-content ng-controller="MyController">
  *   <ion-refresher
@@ -2645,6 +2485,19 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  *   };
  * });
  * ```
+ *
+ * @param {expression=} on-refresh Called when the user pulls down enough and lets go
+ * of the refresher.
+ * @param {expression=} on-pulling Called when the user starts to pull down
+ * on the refresher.
+ * @param {string=} pulling-icon The icon to display while the user is pulling down.
+ * Default: 'ion-arrow-down-c'.
+ * @param {string=} pulling-text The text to display while the user is pulling down.
+ * @param {string=} refreshing-icon The icon to display after user lets go of the
+ * refresher.
+ * @param {string=} refreshing-text The text to display after the user lets go of
+ * the refresher.
+ *
  */
 .directive('ionRefresher', ['$ionicBind', function($ionicBind) {
   return {
@@ -2677,7 +2530,7 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           $onPulling: '&onPulling'
         });
 
-        scrollCtrl.setRefresher($scope, $element[0]);
+        scrollCtrl._setRefresher($scope, $element[0]);
         $scope.$on('scroll.refreshComplete', function() {
           $element[0].classList.remove('active');
           scrollCtrl.scrollView.finishPullToRefresh();
@@ -2691,7 +2544,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @ngdoc directive
  * @name ionInfiniteScroll
  * @module ionic
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @restrict E
  *
@@ -2857,12 +2709,12 @@ angular.module('ionic.ui.list', ['ngAnimate'])
     },
 
     template: '<div class="item item-complex">\
-            <div class="item-edit" ng-if="deleteClick !== undefined">\
+            <div class="item-left-edit item-delete" ng-if="deleteClick !== undefined">\
               <button class="button button-icon icon" ng-class="deleteIconClass" ng-click="deleteClick()" ion-stop-event="click"></button>\
             </div>\
             <a class="item-content" ng-href="{{ href }}" ng-transclude></a>\
-            <div class="item-drag" ng-if="reorderIconClass !== undefined">\
-              <button data-ionic-action="reorder" class="button button-icon icon" ng-class="reorderIconClass"></button>\
+            <div class="item-right-edit item-reorder" ng-if="reorderIconClass !== undefined">\
+              <button data-ionic-action="reorder" data-prevent-scroll="true" class="button button-icon icon" ng-class="reorderIconClass"></button>\
             </div>\
             <div class="item-options" ng-if="itemOptionButtons">\
              <button ng-click="b.onTap(item, b)" ion-stop-event="click" class="button" ng-class="b.type" ng-repeat="b in itemOptionButtons" ng-bind="b.text"></button>\
@@ -2898,22 +2750,24 @@ angular.module('ionic.ui.list', ['ngAnimate'])
           $scope.deleteClick = function() {
             if($attr.onDelete) {
               // this item has an on-delete attribute
-              $scope.onDelete({ item: $scope.item });
+              $scope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             } else if($parentAttrs.onDelete) {
               // run the parent list's onDelete method
               // if it doesn't exist nothing will happen
-              $parentScope.onDelete({ item: $scope.item });
+              $parentScope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             }
           };
 
           // Set which icons to use for deleting
           $scope.deleteIconClass = $scope.deleteIcon || $parentScope.deleteIcon || 'ion-minus-circled';
+          $element.addClass('item-left-editable');
         }
       }
 
       // set the reorder Icon Class only if the item or list set can-reorder="true"
       if(($attr.canReorder ? $scope.canReorder : $parentScope.canReorder) === "true") {
         $scope.reorderIconClass = $scope.reorderIcon || $parentScope.reorderIcon || 'ion-navicon';
+        $element.addClass('item-right-editable');
       }
 
       // Set the option buttons which can be revealed by swiping to the left
@@ -2923,6 +2777,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
         if(typeof $scope.itemOptionButtons === "undefined") {
           $scope.itemOptionButtons = $parentScope.optionButtons();
         }
+        $element.addClass('item-swipeable');
       }
 
     }
@@ -2996,7 +2851,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       reorderIcon: '@'
     },
 
-    template: '<div class="list" ng-class="{\'list-editing\': showDelete, \'list-reordering\': showReorder}" ng-transclude></div>',
+    template: '<div class="list" ng-class="{\'list-left-editing\': showDelete, \'list-right-editing\': showReorder}" ng-transclude></div>',
 
     controller: ['$scope', '$attrs', function($scope, $attrs) {
       this.scope = $scope;
@@ -3005,6 +2860,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
 
     link: function($scope, $element, $attr, ionicScrollCtrl) {
       $scope.listView = new ionic.views.ListView({
+        canSwipe: $scope.canSwipe !== "false" && !!$scope.optionButtons(),
         el: $element[0],
         listEl: $element[0].children[0],
         scrollEl: ionicScrollCtrl && ionicScrollCtrl.element,
@@ -3023,6 +2879,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       var destroyShowReorderWatch = $scope.$watch('showReorder', function(val) {
         if(val) {
           $element[0].classList.add('item-options-hide');
+          $scope.listView && $scope.listView.clearDragEffects();
         } else if(val === false) {
           // false checking is because it could be undefined
           // if its undefined then we don't care to do anything
@@ -3059,7 +2916,7 @@ angular.module('ionic.ui.loading', [])
     link: function($scope, $element){
       $element.addClass($scope.animation || '');
     },
-    template: '<div class="loading-backdrop" ng-class="{enabled: showBackdrop}">' +
+    template: '<div class="loading-backdrop" ng-class="{\'show-backdrop\': showBackdrop}">' +
                 '<div class="loading" ng-transclude>' +
                 '</div>' +
               '</div>'
@@ -3090,146 +2947,582 @@ angular.module('ionic.ui.modal', [])
 
 })();
 
-(function() {
-angular.module('ionic.ui.navAnimation', [])
+
+angular.module('ionic.ui.navBar', ['ionic.service.view', 'ngSanitize'])
+
 /**
- * @ngdoc directive
- * @name ionNavAnimation
+ * @ngdoc service
+ * @name $ionicNavBarDelegate
  * @module ionic
- * @restrict A
- * @parent ionic.directive:ionNavView
- *
  * @description
- * When used under an {@link ionic.directive:ionNavView} and on an `<a>` element,
- * allows you to set the animation all clicks on that link within the navView use.
+ * Delegate for controlling the {@link ionic.directive:ionNavBar} directive.
  *
  * @usage
+ *
  * ```html
- * <ion-nav-view>
- *   <ion-view>
- *     <ion-content>
- *       <a href="#/some-page" ion-nav-animation="slide-in-up">
- *         Click me and #/some-page will transition in with the slide-in-up animation!
- *       </a>
- *     </ion-content>
- *   </ion-view>
- * </ion-nav-view>
+ * <body ng-controller="MyCtrl">
+ *   <ion-nav-bar>
+ *     <button ng-click="setNavTitle('banana')">
+ *       Set title to banana!
+ *     </button>
+ *   </ion-nav-bar>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.setNavTitle = function(title) {
+ *     $ionicNavBarDelegate.setTitle(title);
+ *   }
+ * }
  * ```
- *
- * @param {string} ion-nav-animation The animation to make the parent ionNavView change pages with when clicking this element.
  */
-.directive('ionNavAnimation', function() {
-  return {
-    restrict: 'A',
-    require: '^?ionNavView',
-    link: function($scope, $element, $attrs, navViewCtrl) {
-      if (!navViewCtrl) {
-        return;
-      }
-      ionic.on('tap', function() {
-        navViewCtrl.setNextAnimation($attrs.ionNavAnimation);
-      }, $element[0]);
-    }
+.service('$ionicNavBarDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#back
+   * @description Goes back in the view history.
+   * @param {DOMEvent=} event The event object (eg from a tap event)
+   */
+  'back',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#align
+   * @description Aligns the title with the buttons in a given direction.
+   * @param {string=} direction The direction to the align the title text towards.
+   * Available: 'left', 'right', 'center'. Default: 'center'.
+   */
+  'align',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBackButton
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBackButton} should be shown
+   * (if it exists).
+   * @param {boolean} show Whether to show the back button.
+   */
+  'showBackButton',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBar
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBar} should be shown.
+   * @param {boolean} show Whether to show the bar.
+   */
+  'showBar',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#setTitle
+   * @description
+   * Set the title for the {@link ionic.directive:ionNavBar}.
+   * @param {string} title The new title to show.
+   */
+  'setTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#changeTitle
+   * @description
+   * Change the title, transitioning the new title in and the old one out in a given direction.
+   * @param {string} title The new title to show.
+   * @param {string} direction The direction to transition the new title in.
+   * Available: 'forward', 'back'.
+   */
+  'changeTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getTitle
+   * @returns {string} The current title of the navbar.
+   */
+  'getTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getPreviousTitle
+   * @returns {string} The previous title of the navbar.
+   */
+  'getPreviousTitle'
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * navBars with delegate-handle matching the given handle.
+   *
+   * Example: `$ionicNavBarDelegate.$getByHandle('myHandle').setTitle('newTitle')`
+   */
+]))
+
+.controller('$ionicNavBar', [
+  '$scope',
+  '$element',
+  '$attrs',
+  '$ionicViewService',
+  '$animate',
+  '$compile',
+  '$ionicNavBarDelegate',
+function($scope, $element, $attrs, $ionicViewService, $animate, $compile, $ionicNavBarDelegate) {
+  //Let the parent know about our controller too so that children of
+  //sibling content elements can know about us
+  $element.parent().data('$ionNavBarController', this);
+
+  var deregisterInstance = $ionicNavBarDelegate._registerInstance(this, $attrs.delegateHandle);
+
+  $scope.$on('$destroy', deregisterInstance);
+
+  var self = this;
+
+  this.leftButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.left-buttons')
+  );
+  this.rightButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.right-buttons')
+  );
+
+  this.back = function(e) {
+    var backView = $ionicViewService.getBackView();
+    backView && backView.go();
+    e && (e.alreadyHandled = true);
+    return false;
   };
-});
-})();
 
+  this.align = function(direction) {
+    this._headerBarView.align(direction);
+  };
 
-(function() {
-'use strict';
+  this.showBackButton = function(show) {
+    $scope.backButtonShown = !!show;
+  };
 
-angular.module('ionic.ui.popup', [])
+  this.showBar = function(show) {
+    $scope.isInvisible = !show;
+  };
 
-/**
- * @private
- */
-.directive('ionPopupBackdrop', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    template: '<div class="popup-backdrop"></div>'
-  }
-})
+  this.setTitle = function(title) {
+    $scope.oldTitle = $scope.title;
+    $scope.title = title || '';
+  };
 
-/**
- * @private
- */
-.directive('ionPopup', ['$ionicBind', function($ionicBind) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    scope: true,
-    link: function($scope, $element, $attr) {
-      $ionicBind($scope, $attr, {
-        title: '@',
-        buttons: '=',
-        $onButtonTap: '&onButtonTap',
-        $onClose: '&onClose'
-      });
+  this.changeTitle = function(title, direction) {
+    if ($scope.title === title) {
+      return false;
+    }
+    this.setTitle(title);
+    $scope.isReverse = direction == 'back';
+    $scope.shouldAnimate = !!direction;
 
-      $scope._buttonTapped = function(button, event) {
-        var result = button.onTap && button.onTap(event);
+    if (!$scope.shouldAnimate) {
+      //We're done!
+      this._headerBarView.align();
+    } else {
+      this._animateTitles();
+    }
+    return true;
+  };
 
-        // A way to return false
-        if(event.defaultPrevented) {
-          return $scope.$onClose({button: button, result: false, event: event });
-        }
+  this.getTitle = function() {
+    return $scope.title || '';
+  };
 
-        // Truthy test to see if we should close the window
-        if(result) {
-          return $scope.$onClose({button: button, result: result, event: event });
-        }
-        $scope.$onButtonTap({button: button, event: event});
-      }
-    },
-    template:   '<div class="popup">' +
-                  '<div class="popup-head">' +
-                    '<h3 class="popup-title" ng-bind-html="title"></h3>' +
-                    '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
-                  '</div>' +
-                  '<div class="popup-body" ng-transclude>' +
-                  '</div>' +
-                  '<div class="popup-buttons row">' +
-                    '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
-                  '</div>' +
-                '</div>'
+  this.getPreviousTitle = function() {
+    return $scope.oldTitle || '';
   };
-}]);
 
-})();
+  /**
+   * Exposed for testing
+   */
+  this._animateTitles = function() {
+    var oldTitleEl, newTitleEl, currentTitles;
+
+    //If we have any title right now
+    //(or more than one, they could be transitioning on switch),
+    //replace the first one with an oldTitle element
+    currentTitles = $element[0].querySelectorAll('.title');
+    if (currentTitles.length) {
+      oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
+      angular.element(currentTitles[0]).replaceWith(oldTitleEl);
+    }
+    //Compile new title
+    newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
 
-(function(ionic) {
-'use strict';
+    //Animate in on next frame
+    ionic.requestAnimationFrame(function() {
 
-angular.module('ionic.ui.radio', [])
+      oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+
+      var insert = oldTitleEl && angular.element(oldTitleEl) || null;
+      $animate.enter(newTitleEl, $element, insert, function() {
+        self._headerBarView.align();
+      });
+
+      //Cleanup any old titles leftover (besides the one we already did replaceWith on)
+      angular.forEach(currentTitles, function(el) {
+        if (el && el.parentNode) {
+          //Use .remove() to cleanup things like .data()
+          angular.element(el).remove();
+        }
+      });
+
+      //$apply so bindings fire
+      $scope.$digest();
+
+      //Stop flicker of new title on ios7
+      ionic.requestAnimationFrame(function() {
+        newTitleEl[0].classList.remove('invisible');
+      });
+    });
+  };
+}])
 
 /**
  * @ngdoc directive
- * @name ionRadio
+ * @name ionNavBar
  * @module ionic
+ * @delegate ionic.service:$ionicNavBarDelegate
  * @restrict E
+ *
  * @description
- * No different than the HTML radio input, except it's styled differently.
+ * If we have an {@link ionic.directive:ionNavView} directive, we can also create an
+ * `<ion-nav-bar>`, which will create a topbar that updates as the application state changes.
  *
- * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ * We can add a back button by putting an {@link ionic.directive:ionNavBackButton} inside.
+ *
+ * We can add buttons depending on the currently visible view using
+ * {@link ionic.directive:ionNavButtons}.
+ *
+ * Assign an [animation class](/docs/components#animations) to the element to
+ * enable animated changing of titles (recommended: 'slide-left-right' or 'nav-title-slide-ios7')
  *
  * @usage
+ *
  * ```html
- * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
- * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
- * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * <body ng-app="starter">
+ *   <!-- The nav bar that will be updated as we navigate -->
+ *   <ion-nav-bar class="bar-positive nav-title-slide-ios7">
+ *   </ion-nav-bar>
+ *
+ *   <!-- where the initial view template will be rendered -->
+ *   <ion-nav-view></ion-nav-view>
+ * </body>
  * ```
+ *
+ * @param {string=} delegate-handle The handle used to identify this navBar
+ * with {@link ionic.service:$ionicNavBarDelegate}.
+ * @param align-title {string=} Where to align the title of the navbar.
+ * Available: 'left', 'right', 'center'. Defaults to 'center'.
  */
-.directive('ionRadio', function() {
+.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
+function($ionicViewService, $rootScope, $animate, $compile) {
+
   return {
     restrict: 'E',
-    replace: true,
-    require: '?ngModel',
-    scope: {
-      ngModel: '=?',
-      ngValue: '=?',
-      ngChange: '&',
+    controller: '$ionicNavBar',
+    scope: true,
+    compile: function(tElement, tAttrs) {
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      tElement
+        .addClass('bar bar-header nav-bar')
+        .append(
+          '<div class="buttons left-buttons"> ' +
+          '</div>' +
+          '<h1 ng-bind-html="title" class="title"></h1>' +
+          '<div class="buttons right-buttons"> ' +
+          '</div>'
+        );
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, navBarCtrl) {
+        navBarCtrl._headerBarView = new ionic.views.HeaderBar({
+          el: $element[0],
+          alignTitle: $attr.alignTitle || 'center'
+        });
+
+        //defaults
+        $scope.backButtonShown = false;
+        $scope.shouldAnimate = true;
+        $scope.isReverse = false;
+        $scope.isInvisible = true;
+        $scope.$parent.$hasHeader = true;
+
+        $scope.$on('$destroy', function() {
+          $scope.$parent.$hasHeader = false;
+        });
+
+        $scope.$watch(function() {
+          return ($scope.isReverse ? ' reverse' : '') +
+            ($scope.isInvisible ? ' invisible' : '') +
+            (!$scope.shouldAnimate ? ' no-animation' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
+
+      }
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavBackButton
+ * @module ionic
+ * @restrict E
+ * @parent ionNavBar
+ * @description
+ * Creates a back button inside an {@link ionic.directive:ionNavBar}.
+ *
+ * Will show up when the user is able to go back in the current navigation stack.
+ *
+ * By default, will go back when clicked.  If you wish for more advanced behavior, see the
+ * examples below.
+ *
+ * @usage
+ *
+ * With default click action:
+ *
+ * ```html
+ * <ion-nav-bar>
+ *   <ion-nav-back-button class="button-icon">
+ *     <i class="ion-arrow-left-c"></i> Back!
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ *
+ * With custom click action, using {@link ionic.service:$ionicNavBarDelegate}:
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button-icon"
+ *     ng-click="canGoBack && goBack()">
+ *     <i class="ion-arrow-left-c"></i> Back
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.goBack = function() {
+ *     $ionicNavBarDelegate.back();
+ *   };
+ * }
+ * ```
+ *
+ * Displaying the previous title on the back button, again using
+ * {@link ionic.service:$ionicNavBarDelegate}.
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button button-icon ion-arrow-left-c">
+ *     {% raw %}{{getPreviousTitle() || 'Back'}}{% endraw %}
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.getPreviousTitle = function() {
+ *     return $ionicNavBarDelegate.getPreviousTitle();
+ *   };
+ * }
+ * ```
+ */
+.directive('ionNavBackButton', ['$ionicNgClick', function($ionicNgClick) {
+  return {
+    restrict: 'E',
+    require: '^ionNavBar',
+    compile: function(tElement, tAttrs) {
+      tElement.addClass('button back-button');
+      return function($scope, $element, $attr, navBarCtrl) {
+        if (!$attr.ngClick) {
+          $scope.$navBack = navBarCtrl.back;
+          $ionicNgClick($scope, $element, '$navBack($event)');
+        }
+
+        //If the current viewstate does not allow a back button,
+        //always hide it.
+        var deregisterListener = $scope.$parent.$on(
+          '$viewHistory.historyChange',
+          function(e, data) {
+            $scope.hasBackButton = !!data.showBack;
+          }
+        );
+        $scope.$on('$destroy', deregisterListener);
+
+        //Make sure both that a backButton is allowed in the first place,
+        //and that it is shown by the current view.
+        $scope.$watch('!!(backButtonShown && hasBackButton)', function(show) {
+          $element.toggleClass('hide', !show);
+        });
+      };
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavButtons
+ * @module ionic
+ * @restrict E
+ * @parent ionNavView
+ *
+ * @description
+ * Use ionNavButtons to set the buttons on your {@link ionic.directive:ionNavBar}
+ * from within an {@link ionic.directive:ionView}.
+ *
+ * Any buttons you declare will be placed onto the navbar's corresponding side,
+ * and then destroyed when the user leaves their parent view.
+ *
+ * @usage
+ * ```html
+ * <ion-nav-bar>
+ * </ion-nav-bar>
+ * <ion-nav-view>
+ *   <ion-view>
+ *     <ion-nav-buttons side="left">
+ *       <button class="button" ng-click="doSomething()">
+ *         I'm a button on the left of the navbar!
+ *       </button>
+ *     </ion-nav-buttons>
+ *     <ion-content>
+ *       Some super content here!
+ *     </ion-content>
+ *   </ion-view>
+ * </ion-nav-view>
+ * ```
+ *
+ * @param {string} side The side to place the buttons on in the parent
+ * {@link ionic.directive:ionNavBar}. Available: 'left' or 'right'.
+ */
+.directive('ionNavButtons', ['$compile', '$animate', function($compile, $animate) {
+  return {
+    require: '^ionNavBar',
+    restrict: 'E',
+    compile: function($element, $attrs) {
+      var content = $element.contents().remove();
+      return function($scope, $element, $attrs, navBarCtrl) {
+        var navElement = $attrs.side === 'right' ?
+          navBarCtrl.rightButtonsElement :
+          navBarCtrl.leftButtonsElement;
+
+        //Put all of our inside buttons into their own div,
+        //so we can remove them all when this element dies -
+        //even if the buttons have changed through an ng-repeat or the like,
+        //we just remove their div parent and they are gone.
+        var buttons = angular.element('<div>').append(content);
+
+        //Compile buttons inside content so they have access to everything
+        //something inside content does (eg parent ionicScroll)
+        $element.append(buttons);
+        $compile(buttons)($scope);
+
+        //Append buttons to navbar
+        $animate.enter(buttons, navElement);
+
+        //When our ion-nav-buttons container is destroyed,
+        //destroy everything in the navbar
+        $scope.$on('$destroy', function() {
+          $animate.leave(buttons);
+        });
+
+        // The original element is just a completely empty <ion-nav-buttons> element.
+        // make it invisible just to be sure it doesn't change any layout
+        $element.css('display', 'none');
+      };
+    }
+  };
+}]);
+
+(function() {
+'use strict';
+
+angular.module('ionic.ui.popup', [])
+
+/**
+ * @private
+ */
+.directive('ionPopupBackdrop', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    template: '<div class="popup-backdrop"></div>'
+  }
+})
+
+/**
+ * @private
+ */
+.directive('ionPopup', ['$ionicBind', function($ionicBind) {
+  return {
+    restrict: 'E',
+    replace: true,
+    transclude: true,
+    scope: true,
+    template:
+      '<div class="popup">' +
+        '<div class="popup-head">' +
+          '<h3 class="popup-title" ng-bind-html="title"></h3>' +
+          '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
+        '</div>' +
+        '<div class="popup-body" ng-transclude>' +
+        '</div>' +
+        '<div class="popup-buttons row">' +
+          '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
+        '</div>' +
+      '</div>',
+    link: function($scope, $element, $attr) {
+      $ionicBind($scope, $attr, {
+        title: '@',
+        buttons: '=',
+        $onButtonTap: '&onButtonTap',
+        $onClose: '&onClose'
+      });
+
+      $scope._buttonTapped = function(button, event) {
+        var result = button.onTap && button.onTap(event);
+
+        // A way to return false
+        if(event.defaultPrevented) {
+          return $scope.$onClose({button: button, result: false, event: event });
+        }
+
+        // Truthy test to see if we should close the window
+        if(result) {
+          return $scope.$onClose({button: button, result: result, event: event });
+        }
+        $scope.$onButtonTap({button: button, event: event});
+      }
+    }
+  };
+}]);
+
+})();
+
+(function(ionic) {
+'use strict';
+
+angular.module('ionic.ui.radio', [])
+
+/**
+ * @ngdoc directive
+ * @name ionRadio
+ * @module ionic
+ * @restrict E
+ * @description
+ * No different than the HTML radio input, except it's styled differently.
+ *
+ * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ *
+ * @usage
+ * ```html
+ * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
+ * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
+ * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * ```
+ */
+.directive('ionRadio', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    require: '?ngModel',
+    scope: {
+      ngModel: '=?',
+      ngValue: '=?',
+      ngChange: '&',
       icon: '@'
     },
     transclude: true,
@@ -3338,11 +3631,14 @@ angular.module('ionic.ui.scroll', [])
  * @ngdoc directive
  * @name ionScroll
  * @module ionic
+ * @delegate ionic.service:$ionicScrollDelegate
  * @restrict E
  *
  * @description
  * Creates a scrollable container for all content inside.
  *
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
  * @param {string=} direction Which way to scroll. 'x' or 'y'. Default 'y'.
  * @param {boolean=} paging Whether to scroll with paging.
  * @param {expression=} on-refresh Called on pull-to-refresh, triggered by an {@link ionic.directive:ionRefresher}.
@@ -3350,41 +3646,43 @@ angular.module('ionic.ui.scroll', [])
  * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default false.
  * @param {boolean=} scrollbar-x Whether to show the vertical scrollbar. Default true.
  */
-.directive('ionScroll', ['$parse', '$timeout', '$controller', function($parse, $timeout, $controller) {
+.directive('ionScroll', [
+  '$timeout',
+  '$controller',
+  '$ionicBind',
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    template: '<div class="scroll-view"><div class="scroll" ng-transclude></div></div>',
-    transclude: true,
-    scope: {
-      direction: '@',
-      paging: '@',
-      onRefresh: '&',
-      onScroll: '&',
-      scroll: '@',
-      scrollbarX: '@',
-      scrollbarY: '@',
-    },
-
+    scope: true,
     controller: function() {},
+    compile: function(element, attr) {
+      element.addClass('scroll-view');
 
-    compile: function(element, attr, transclude) {
-
-      return {
-        //Prelink <ion-scroll> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr) {
-        var scrollView, scrollCtrl,
-          sc = $element[0].children[0];
+        var scrollView, scrollCtrl;
 
-        if(attr.padding == "true") {
-          sc.classList.add('padding');
+        $ionicBind($scope, $attr, {
+          direction: '@',
+          paging: '@',
+          $onScroll: '&onScroll',
+          scroll: '@',
+          scrollbarX: '@',
+          scrollbarY: '@',
+        });
+
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
         }
         if($scope.$eval($scope.paging) === true) {
-          sc.classList.add('scroll-paging');
+          innerElement.addClass('scroll-paging');
         }
 
         if(!$scope.direction) { $scope.direction = 'y'; }
@@ -3392,6 +3690,7 @@ angular.module('ionic.ui.scroll', [])
 
         var scrollViewOptions= {
           el: $element[0],
+          delegateHandle: $attr.delegateHandle,
           paging: isPaging,
           scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
           scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
@@ -3438,33 +3737,97 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 }])
 
 /**
- * @ngdoc controller
- * @name ionicSideMenus
+ * @ngdoc service
+ * @name $ionicSideMenuDelegate
  * @module ionic
- * @group side menu
  *
  * @description
- * Controller for the {@link ionic.directive:ionSideMenus} directive.
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleLeft
- * @description Toggle the left side menu (if it exists).
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleRight
- * @description Toggle the right side menu (if it exists).
+ * Delegate for controlling the {@link ionic.directive:ionSideMenus} directive.
+ *
+ * Methods called directly on the $ionicSideMenuDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSideMenuDelegate#$getByHandle $getByHandle}
+ * method to control specific ionSideMenus instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-side-menus>
+ *     <ion-pane ion-side-menu-content>
+ *       Content!
+ *       <button ng-click="toggleLeftSideMenu()">
+ *         Toggle Left Side Menu
+ *       </button>
+ *     </ion-pane>
+ *     <ion-side-menu side="left">
+ *       Left Menu!
+ *     <ion-side-menu>
+ *   </ion-side-menus>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicSideMenuDelegate) {
+ *   $scope.toggleLeftSideMenu = function() {
+ *     $ionicSideMenuDelegate.toggleLeft();
+ *   };
+ * }
+ * ```
  */
+.service('$ionicSideMenuDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleLeft
+   * @description Toggle the left side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleRight
+   * @description Toggle the right side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenLeft
+   * @returns {boolean} Whether the left menu is currently opened.
+   */
+  'isOpenLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenRight
+   * @returns {boolean} Whether the right menu is currently opened.
+   */
+  'isOpenRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#canDragContent
+   * @param {boolean=} canDrag Set whether the content can or cannot be dragged to open
+   * side menus.
+   * @returns {boolean} Whether the content can be dragged to open side menus.
+   */
+  'canDragContent',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSideMenus} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSideMenuDelegate.$getByHandle('my-handle').toggleLeft();`
+   */
+]))
 
 /**
  * @ngdoc directive
  * @name ionSideMenus
  * @module ionic
+ * @delegate ionic.service:$ionicSideMenuDelegate
  * @restrict E
- * @group side menu
- * @groupMainItem
- * @controller ionicSideMenus
  *
  * @description
  * A container element for side menu(s) and the main content. Allows the left
@@ -3479,14 +3842,14 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  *
  * @usage
  * To use side menus, add an `<ion-side-menus>` parent element,
- * an `<ion-pane ion-side-menu-content>` for the center content,
+ * an `<ion-side-menu-content>` for the center content,
  * and one or more `<ion-side-menu>` directives.
  *
  * ```html
  * <ion-side-menus>
  *   <!-- Center content -->
- *   <ion-pane ion-side-menu-content ng-controller="ContentController">
- *   </ion-pane>
+ *   <ion-side-menu-content ng-controller="ContentController">
+ *   </io-side-menu-content>
  *
  *   <!-- Left menu -->
  *   <ion-side-menu side="left">
@@ -3498,20 +3861,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * </ion-side-menus>
  * ```
  * ```js
- * function ContentController($scope) {
+ * function ContentController($scope, $ionicSideMenuDelegate) {
  *   $scope.toggleLeft = function() {
- *     $scope.sideMenuController.toggleLeft();
+ *     $ionicSideMenuDelegate.toggleLeft();
  *   };
  * }
  * ```
  *
- * @param {expression=} model The model to assign this side menu container's {@link ionic.controller:ionicSideMenus} controller to. By default, assigns  to $scope.sideMenuController.
+ * @param {string=} delegate-handle The handle used to identify this side menu
+ * with {@link ionic.service:$ionicSideMenuDelegate}.
  *
  */
 .directive('ionSideMenus', function() {
   return {
     restrict: 'ECA',
-    controller: ['$scope', '$attrs', '$parse', function($scope, $attrs, $parse) {
+    controller: ['$scope', '$attrs', '$ionicSideMenuDelegate', function($scope, $attrs, $ionicSideMenuDelegate) {
       var _this = this;
 
       angular.extend(this, ionic.controllers.SideMenuController.prototype);
@@ -3521,9 +3885,20 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         right: { width: 275 }
       });
 
+      this.canDragContent = function(canDrag) {
+        if (arguments.length) {
+          $scope.dragContent = !!canDrag;
+        }
+        return $scope.dragContent;
+      };
+
       $scope.sideMenuContentTranslateX = 0;
 
-      $parse($attrs.model || 'sideMenuController').assign($scope, this);
+      var deregisterInstance = $ionicSideMenuDelegate._registerInstance(
+        this, $attrs.delegateHandle
+      );
+
+      $scope.$on('$destroy', deregisterInstance);
     }],
     replace: true,
     transclude: true,
@@ -3535,21 +3910,18 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @ngdoc directive
  * @name ionSideMenuContent
  * @module ionic
- * @restrict A
- * @group side menu
+ * @restrict E
  * @parent ionic.directive:ionSideMenus
  *
  * @description
  * A container for the main visible content, sibling to one or more
  * {@link ionic.directive:ionSideMenu} directives.
  *
- * An attribute directive, recommended to be used as part of an `<ion-pane>` element.
- *
  * @usage
  * ```html
- * <div ion-side-menu-content
- *   drag-content="canDragContent()">
- * </div>
+ * <ion-side-menu-content
+ *   drag-content="canDrag">
+ * </ion-side-menu-content>
  * ```
  * For a complete side menu example, see the
  * {@link ionic.directive:ionSideMenus} documentation.
@@ -3559,20 +3931,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  */
 .directive('ionSideMenuContent', ['$timeout', '$ionicGesture', function($timeout, $ionicGesture) {
   return {
-    restrict: 'AC',
+    restrict: 'EA', //DEPRECATED 'A'
     require: '^ionSideMenus',
     scope: true,
-    compile: function(element, attr, transclude) {
-      return function($scope, $element, $attr, sideMenuCtrl) {
+    compile: function(element, attr) {
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, sideMenuCtrl) {
 
-        $element.addClass('menu-content');
+        $element.addClass('menu-content pane');
 
         if (angular.isDefined(attr.dragContent)) {
           $scope.$watch(attr.dragContent, function(value) {
-            $scope.dragContent = value;
+            sideMenuCtrl.canDragContent(value);
           });
         } else {
-          $scope.dragContent = true;
+          sideMenuCtrl.canDragContent(true);
         }
 
         var defaultPrevented = false;
@@ -3653,7 +4026,7 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
           $ionicGesture.off(releaseGesture, 'release', dragReleaseFn);
           ionic.off('tap', contentTap, $element[0]);
         });
-      };
+      }
     }
   };
 }])
@@ -3663,7 +4036,6 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @name ionSideMenu
  * @module ionic
  * @restrict E
- * @group side menu
  * @parent ionic.directive:ionSideMenus
  *
  * @description
@@ -3688,14 +4060,13 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
   return {
     restrict: 'E',
     require: '^ionSideMenus',
-    replace: true,
-    transclude: true,
     scope: true,
-    template: '<div class="menu menu-{{side}}"></div>',
-    compile: function(element, attr, transclude) {
+    compile: function(element, attr) {
       angular.isUndefined(attr.isEnabled) && attr.$set('isEnabled', 'true');
       angular.isUndefined(attr.width) && attr.$set('width', '275');
 
+      element.addClass('menu menu-' + attr.side);
+
       return function($scope, $element, $attr, sideMenuCtrl) {
         $scope.side = $attr.side || 'left';
 
@@ -3714,14 +4085,79 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         $scope.$watch($attr.isEnabled, function(val) {
           sideMenu.setIsEnabled(!!val);
         });
-
-        transclude($scope, function(clone) {
-          $element.append(clone);
-        });
       };
     }
   };
-});
+})
+
+/**
+ * @ngdoc directive
+ * @name menuToggle
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Toggle a side menu on the given side
+ *
+ * @usage
+ * Below is an example of a link within a nav bar. Tapping this link would
+ * automatically open the given side menu
+ *
+ * ```html
+ * <ion-view>
+ *   <ion-nav-buttons side="left">
+ *    <button menu-toggle="left" class="button button-icon icon ion-navicon"></button>
+ *   </ion-nav-buttons>
+ *  ...
+ * </ion-view>
+ * ```
+ */
+.directive('menuToggle', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      var side = $scope.$eval($attr.menuToggle) || 'left';
+      $element.bind('click', function(){
+        if(side === 'left') {
+          sideMenuCtrl.toggleLeft();
+        } else if(side === 'right') {
+          sideMenuCtrl.toggleRight();
+        }
+      });
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name menuClose
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Closes a side menu which is currently opened.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would
+ * automatically close the currently opened menu
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('menuClose', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      $element.bind('click', function(){
+        sideMenuCtrl.close();
+      });
+    }
+  };
+}]);
+
 })();
 
 (function() {
@@ -3730,6 +4166,102 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 angular.module('ionic.ui.slideBox', [])
 
 /**
+ * @ngdoc service
+ * @name $ionicSlideBoxDelegate
+ * @module ionic
+ * @description
+ * Delegate that controls the {@link ionic.directive:ionSlideBox} directive.
+ *
+ * Methods called directly on the $ionicSlideBoxDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSlideBoxDelegate#$getByHandle $getByHandle}
+ * method to control specific slide box instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-slide-box>
+ *     <ion-slide>
+ *       <div class="box blue">
+ *         <button ng-click="nextSlide()">Next slide!</button>
+ *       </div>
+ *     </ion-slide>
+ *     <ion-slide>
+ *       <div class="box red">
+ *         Slide 2!
+ *       </div>
+ *     </ion-slide>
+ *   </ion-slide-box>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicSlideBoxDelegate) {
+ *   $scope.nextSlide = function() {
+ *     $ionicSlideBoxDelegate.next();
+ *   }
+ * }
+ * ```
+ */
+.service('$ionicSlideBoxDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#update
+   * @description
+   * Update the slidebox (for example if using Angular with ng-repeat,
+   * resize it for the elements inside).
+   */
+  'update',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slide
+   * @param {number} to The index to slide to.
+   * @param {number=} speed The number of milliseconds for the change to take.
+   */
+  'slide',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#previous
+   * @description Go to the previous slide. Wraps around if at the beginning.
+   */
+  'previous',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#next
+   * @description Go to the next slide. Wraps around if at the end.
+   */
+  'next',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#stop
+   * @description Stop sliding. The slideBox will not move again until
+   * explicitly told to do so.
+   */
+  'stop',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#currentIndex
+   * @returns number The index of the current slide.
+   */
+  'currentIndex',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slidesCount
+   * @returns number The number of slides there are currently.
+   */
+  'slidesCount'
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSlideBox} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSlideBoxDelegate.$getByHandle('my-handle').stop();`
+   */
+]))
+
+/**
  * The internal controller for the slide box controller.
  */
 
@@ -3737,8 +4269,8 @@ angular.module('ionic.ui.slideBox', [])
  * @ngdoc directive
  * @name ionSlideBox
  * @module ionic
+ * @delegate ionic.service:$ionicSlideBoxDelegate
  * @restrict E
- * @controller ionicSlideBox
  * @description
  * The Slide Box is a multi-page container where each page can be swiped or dragged between:
  *
@@ -3759,7 +4291,8 @@ angular.module('ionic.ui.slideBox', [])
  * </ion-slide-box>
  * ```
  *
- * @param {expression=} model The model to assign this slide box container's {@link ionic.controller:ionicSlideBox} controller to. By default, assigns to $scope.slideBoxController.
+ * @param {string=} delegate-handle The handle used to identify this slideBox
+ * with {@link ionic.service:$ionicSlideBoxDelegate}.
  * @param {boolean=} does-continue Whether the slide box should automatically slide.
  * @param {number=} slide-interval How many milliseconds to wait to change slides (if does-continue is true). Defaults to 4000.
  * @param {boolean=} show-pager Whether a pager should be shown for this slide box.
@@ -3767,7 +4300,11 @@ angular.module('ionic.ui.slideBox', [])
  * @param {expression=} on-slide-changed Expression called whenever the slide is changed.
  * @param {expression=} active-slide Model to bind the current slide to.
  */
-.directive('ionSlideBox', ['$timeout', '$compile', '$ionicSlideBoxDelegate', function($timeout, $compile, $ionicSlideBoxDelegate) {
+.directive('ionSlideBox', [
+  '$timeout',
+  '$compile',
+  '$ionicSlideBoxDelegate',
+function($timeout, $compile, $ionicSlideBoxDelegate) {
   return {
     restrict: 'E',
     replace: true,
@@ -3780,7 +4317,7 @@ angular.module('ionic.ui.slideBox', [])
       onSlideChanged: '&',
       activeSlide: '=?'
     },
-    controller: ['$scope', '$element', '$attrs', '$parse', function($scope, $element, $attrs, $parse) {
+    controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
       var _this = this;
 
       var continuous = $scope.$eval($scope.doesContinue) === true;
@@ -3826,9 +4363,12 @@ angular.module('ionic.ui.slideBox', [])
         slider.slide(index);
       });
 
-      $parse($attrs.model || 'slideBoxController').assign($scope.$parent, slider);
+      //Exposed for testing
+      this.__slider = slider;
 
-      $ionicSlideBoxDelegate.register($scope, $element);
+      var deregisterInstance = $ionicSlideBoxDelegate._registerInstance(slider, $attrs.delegateHandle);
+
+      $scope.$on('$destroy', deregisterInstance);
 
       this.slidesCount = function() {
         return slider.slidesCount();
@@ -3908,32 +4448,80 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
 }])
 
 /**
- * @ngdoc controller
- * @group tab bar
- * @name ionicTabs
+ * @ngdoc service
+ * @name $ionicTabsDelegate
  * @module ionic
  *
  * @description
- * Controller for the {@link ionic.directive:ionTabs} directive.
+ * Delegate for controlling the {@link ionic.directive:ionTabs} directive.
+ *
+ * Methods called directly on the $ionicTabsDelegate service will control all ionTabs
+ * directives. Use the {@link ionic.service:$ionicTabsDelegate#$getByHandle $getByHandle}
+ * method to control specific ionTabs instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-tabs>
+ *
+ *     <ion-tab title="Tab 1">
+ *       Hello tab 1!
+ *       <button ng-click="selectTabWithIndex(1)">Select tab 2!</button>
+ *     </ion-tab>
+ *     <ion-tab title="Tab 2">Hello tab 2!</ion-tab>
+ *
+ *   </ion-tabs>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicTabsDelegate) {
+ *   $scope.selectTabWithIndex = function(index) {
+ *     $ionicTabsDelegate.select(index);
+ *   }
+ * }
+ * ```
  */
-.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
-  var _selectedTab = null;
-  var self = this;
-  self.tabs = [];
-
+.service('$ionicTabsDelegate', delegateService([
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTabIndex
+   * @name $ionicTabsDelegate#select
+   * @description Select the tab matching the given index.
+   *
+   * @param {number} index Index of the tab to select.
+   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's
+   * view history (if it exists) and use it, or just load the default page.
+   * Default false.
+   * Hint: you probably want this to be true if you have an
+   * {@link ionic.directive:ionNavView} inside your tab.
+   */
+  'select',
+  /**
+   * @ngdoc method
+   * @name $ionicTabsDelegate#selectedIndex
    * @returns `number` The index of the selected tab, or -1.
    */
-  self.selectedTabIndex = function() {
-    return self.tabs.indexOf(_selectedTab);
-  };
+  'selectedIndex'
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTab
-   * @returns `ionTab` The selected tab or null if none selected.
+   * @name $ionicTabsDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionTabs} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicTabsDelegate.$getByHandle('my-handle').select(0);`
    */
+]))
+
+.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
+  var _selectedTab = null;
+  var self = this;
+  self.tabs = [];
+
+  self.selectedIndex = function() {
+    return self.tabs.indexOf(_selectedTab);
+  };
   self.selectedTab = function() {
     return _selectedTab;
   };
@@ -3974,17 +4562,6 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
     }
   };
 
-  /**
-   * @ngdoc method
-   * @name ionicTabs#select
-   * @description Select the given tab or tab index.
-   *
-   * @param {ionTab|number} tabOrIndex A tab object or index of a tab to select
-   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's view history
-   * (if it exists) and use it, or just loading the default page. Default false.
-   * Hint: you probably want this to be true if you have an
-   * {@link ionic.directive:ionNavView} inside your tab.
-   */
   self.select = function(tab, shouldEmitEvent) {
     var tabIndex;
     if (angular.isNumber(tab)) {
@@ -4033,20 +4610,24 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  * @ngdoc directive
  * @name ionTabs
  * @module ionic
+ * @delegate ionic.service:$ionicTabsDelegate
  * @restrict E
- * @group tab bar
- * @groupMainItem
- * @controller ionicTabs
  * @codepen KbrzJ
  *
  * @description
- * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed through.
+ * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed
+ * through.
  *
- * See the {@link ionic.directive:ionTab} directive's documentation for more details.
+ * Assign any [tabs class](/docs/components#tabs) or
+ * [animation class](/docs/components#animation) to the element to define
+ * its look and feel.
+ *
+ * See the {@link ionic.directive:ionTab} directive's documentation for more details on
+ * individual tabs.
  *
  * @usage
  * ```html
- * <ion-tabs tabs-type="tabs-icon-only">
+ * <ion-tabs class="tabs-positive tabs-icon-only">
  *
  *   <ion-tab title="Home" icon-on="ion-ios7-filing" icon-off="ion-ios7-filing-outline">
  *     <!-- Tab 1 content -->
@@ -4059,48 +4640,49 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  *   <ion-tab title="Settings" icon-on="ion-ios7-gear" icon-off="ion-ios7-gear-outline">
  *     <!-- Tab 3 content -->
  *   </ion-tab>
+ *
  * </ion-tabs>
  * ```
  *
- * @param {expression=} model The model to assign this tab bar's {@link ionic.controller:ionicTabs} controller to. By default, assigns  to $scope.tabsController.
- * @param {string=} animation The animation to use when changing between tab pages.
- * @param {string=} tabs-style The class to apply to the tabs. Defaults to 'tabs-positive'.
- * @param {string=} tabs-type Whether to put the tabs on the top or bottom. Defaults to 'tabs-bottom'.
+ * @param {string=} delegate-handle The handle used to identify these tabs
+ * with {@link ionic.service:$ionicTabsDelegate}.
  */
 
-.directive('ionTabs', ['$ionicViewService', '$ionicBind', '$parse', function($ionicViewService, $ionicBind, $parse) {
+.directive('ionTabs', ['$ionicViewService', '$ionicTabsDelegate', function($ionicViewService, $ionicTabsDelegate) {
   return {
     restrict: 'E',
-    replace: true,
     scope: true,
-    transclude: true,
     controller: 'ionicTabs',
-    template:
-    '<div class="view {{$animation}}">' +
-      '<div class="tabs {{$tabsStyle}} {{$tabsType}}">' +
-      '</div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(angular.isUndefined(attr.tabsType)) attr.$set('tabsType', 'tabs-positive');
-
-      return function link($scope, $element, $attr, tabsCtrl) {
-
-        $ionicBind($scope, $attr, {
-          $animation: '@animation',
-          $tabsStyle: '@tabsStyle',
-          $tabsType: '@tabsType'
-        });
+    compile: function(element, attr) {
+      element.addClass('view');
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="tabs"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, tabsCtrl) {
+        var deregisterInstance = $ionicTabsDelegate._registerInstance(
+          tabsCtrl, $attr.delegateHandle
+        );
 
-        $parse(attr.model || 'tabsController').assign($scope, tabsCtrl);
+        $scope.$on('$destroy', deregisterInstance);
 
         tabsCtrl.$scope = $scope;
         tabsCtrl.$element = $element;
         tabsCtrl.$tabsElement = angular.element($element[0].querySelector('.tabs'));
 
-        transclude($scope, function(clone) {
-          $element.append(clone);
+        var el = $element[0];
+        $scope.$watch(function() { return el.className; }, function(value) {
+          var isTabsTop = value.indexOf('tabs-top') !== -1;
+          var isHidden = value.indexOf('tabs-item-hide') !== -1;
+          $scope.$hasTabs = !isTabsTop && !isHidden;
+          $scope.$hasTabsTop = isTabsTop && !isHidden;
         });
-      };
+        $scope.$on('$destroy', function() {
+          $scope.$hasTabs = $scope.$hasTabsTop = null;
+        });
+      }
     }
   };
 }])
@@ -4112,7 +4694,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
 
 /**
  * @ngdoc directive
- * @group tab bar
  * @name ionTab
  * @module ionic
  * @restrict E
@@ -4123,8 +4704,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
  *
  * Each ionTab has its own view history.
  *
- * Whenever a tab is shown or hidden, it will broadcast a 'tab.shown' or 'tab.hidden' event.
- *
  * @usage
  * ```html
  * <ion-tab
@@ -4146,7 +4725,7 @@ function($scope, $ionicViewService, $rootScope, $element) {
  * @param {expression=} badge-style The style of badge to put on this tab (eg tabs-positive).
  * @param {expression=} on-select Called when this tab is selected.
  * @param {expression=} on-deselect Called when this tab is deselected.
- * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.controller:ionicTabs#select ionicTabBar controller's select method}.
+ * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.service:$ionicTabsDelegate#select $ionicTabsDelegate.select()}.
  */
 .directive('ionTab', ['$rootScope', '$animate', '$ionicBind', '$compile', '$ionicViewService',
 function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
@@ -4167,6 +4746,11 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         element[0].querySelector('data-ion-nav-view');
       var navViewName = navView && navView.getAttribute('name');
 
+      var tabNavItem = angular.element(
+        element[0].querySelector('ion-tab-nav') ||
+        element[0].querySelector('data-ion-tab-nav')
+      ).remove();
+
       //Remove the contents of the element so we can compile them later, if tab is selected
       var tabContent = angular.element('<div class="pane">')
         .append( element.contents().remove() );
@@ -4175,6 +4759,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
           tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $ionicBind($scope, $attr, {
           animate: '=',
           onSelect: '&',
@@ -4213,9 +4800,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         tabsCtrl.$tabsElement.append($compile(tabNavElement)($scope));
 
         $scope.$watch('$tabSelected', function(value) {
-          if (!value) {
-            $scope.$broadcast('tab.hidden', $scope);
-          }
           childScope && childScope.$destroy();
           childScope = null;
           childElement && $animate.leave(childElement);
@@ -4225,7 +4809,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
             childElement = tabContent.clone();
             $animate.enter(childElement, tabsCtrl.$element);
             $compile(childElement)(childScope);
-            $scope.$broadcast('tab.shown', $scope);
           }
         });
 
@@ -4246,7 +4829,7 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
     replace: true,
     require: ['^ionTabs', '^ionTab'],
     template:
-    '<a ng-class="{active: isTabActive(), \'has-badge\':badge}" ' +
+    '<a ng-class="{\'tab-item-active\': isTabActive(), \'has-badge\':badge}" ' +
       ' class="tab-item">' +
       '<span class="badge {{badgeStyle}}" ng-if="badge">{{badge}}</span>' +
       '<i class="icon {{getIconOn()}}" ng-if="getIconOn() && isTabActive()"></i>' +
@@ -4266,6 +4849,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         var tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $scope.selectTab = function(e) {
           e.preventDefault();
           tabsCtrl.select(tabCtrl.$scope, true);
@@ -4400,249 +4986,58 @@ angular.module('ionic.ui.touch', [])
       ionic.tapElement(e.target, e);
     }
     return function(scope, element, clickExpr) {
-      var clickHandler = $parse(clickExpr);
-
-      element.on('click', function(event) {
-        scope.$apply(function() {
-          clickHandler(scope, {$event: (event)});
-        });
-      });
-
-      ionic.on('tap', onTap, element[0]);
-
-      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
-      // something else nearby.
-      element.onclick = function(event) { };
-
-      scope.$on('$destroy', function () {
-        ionic.off('tap', onTap, element[0]);
-      });
-    };
-  }])
-
-  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
-    return function(scope, element, attr) {
-      $ionicNgClick(scope, element, attr.ngClick);
-    };
-  }])
-
-  .directive('ionStopEvent', function () {
-    function stopEvent(e) {
-      e.stopPropagation();
-    }
-    return {
-      restrict: 'A',
-      link: function (scope, element, attr) {
-        element.bind(attr.ionStopEvent, stopEvent);
-      }
-    };
-  });
-
-
-})(window.angular, window.ionic);
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
-
-/**
- * @ngdoc directive
- * @name ionNavBar
- * @module ionic
- * @restrict E
- *
- * @usage
- * If have an {@link ionic.directive:ionNavView} directive, we can also create an
- * <ion-nav-bar>, which will create a topbar that updates as the application state changes.
- * We can also add some styles and set up animations:
- *
- * ```html
- * <body ng-app="starter">
- *   <!-- The nav bar that will be updated as we navigate -->
- *   <ion-nav-bar animation="nav-title-slide-ios7"
- *            type="bar-positive"
- *            back-button-type="button-icon"
- *            back-button-icon="ion-arrow-left-c"></ion-nav-bar>
- *
- *   <!-- where the initial view template will be rendered -->
- *   <ion-nav-view animation="slide-left-right"></ion-nav-view>
- * </body>
- * ```
- *
- * @param {string=} back-button-type The type of the back button's icon. Available: 'button-icon' or just 'button'.
- * @param {string=} back-button-icon The icon to use for the back button. For example, 'ion-arrow-left-c'.
- * @param {string=} back-button-label The label to use for the back button. For example, 'Back'.
- * @param animation {string=} The animation used to transition between titles.
- * @param type {string=} The className for the navbar.  For example, 'bar-positive'.
- * @param align {string=} Where to align the title of the navbar. Available: 'left', 'right', 'center'. Defaults to 'center'.
- */
-.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
-                function( $ionicViewService,   $rootScope,   $animate,   $compile) {
-
-  return {
-    restrict: 'E',
-    replace: true,
-    scope: {
-      animation: '@',
-      type: '@',
-      backType: '@backButtonType',
-      backLabel: '@backButtonLabel',
-      backIcon: '@backButtonIcon',
-      alignTitle: '@'
-    },
-    controller: function() {},
-    template:
-    '<header class="bar bar-header nav-bar{{navBarClass()}}">' +
-      '<ion-nav-back-button ng-if="(backType || backLabel || backIcon)" ' +
-        'type="backType" label="backLabel" icon="backIcon" class="hide" ' +
-        'ng-class="{\'hide\': !backButtonEnabled}">' +
-      '</ion-nav-back-button>' +
-      '<div class="buttons left-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in leftButtons" ' +
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-
-      '<h1 ng-bind-html="title" class="title"></h1>' +
-
-      '<div class="buttons right-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in rightButtons" '+
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-    '</header>',
-    compile: function(tElement, tAttrs) {
-
-      return function link($scope, $element, $attr) {
-        //defaults
-        $scope.backButtonEnabled = false;
-        $scope.animateEnabled = true;
-        $scope.isReverse = false;
-        $scope.isInvisible = true;
-
-        $scope.navBarClass = function() {
-          return ($scope.type ? ' ' + $scope.type : '') +
-            ($scope.isReverse ? ' reverse' : '') +
-            ($scope.isInvisible ? ' invisible' : '') +
-            (!$scope.animationDisabled && $scope.animation ? ' ' + $scope.animation : '');
-        };
-
-        // Initialize our header bar view which will handle
-        // resizing and aligning our title labels
-        var hb = new ionic.views.HeaderBar({
-          el: $element[0],
-          alignTitle: $scope.alignTitle || 'center'
-        });
-        $scope.headerBarView = hb;
-
-        //Navbar events
-        $scope.$on('viewState.viewEnter', function(e, data) {
-          updateHeaderData(data);
-        });
-        $scope.$on('viewState.showNavBar', function(e, showNavBar) {
-          $scope.isInvisible = !showNavBar;
-        });
+      var clickHandler = $parse(clickExpr);
 
-        // All of these these are emitted from children of a sibling scope,
-        // so we listen on parent so we can catch them as they bubble up
-        var unregisterEventListeners = [
-          $scope.$parent.$on('$viewHistory.historyChange', function(e, data) {
-            $scope.backButtonEnabled = !!data.showBack;
-          }),
-          $scope.$parent.$on('viewState.leftButtonsChanged', function(e, data) {
-            $scope.leftButtons = data;
-          }),
-          $scope.$parent.$on('viewState.rightButtonsChanged', function(e, data) {
-            $scope.rightButtons = data;
-          }),
-          $scope.$parent.$on('viewState.showBackButton', function(e, data) {
-            $scope.backButtonEnabled = !!data;
-          }),
-          $scope.$parent.$on('viewState.titleUpdated', function(e, data) {
-            $scope.title = data && data.title || '';
-          })
-        ];
-        $scope.$on('$destroy', function() {
-          for (var i=0; i<unregisterEventListeners.length; i++)
-            unregisterEventListeners[i]();
+      element.on('click', function(event) {
+        scope.$apply(function() {
+          clickHandler(scope, {$event: (event)});
         });
+      });
 
-        function updateHeaderData(data) {
-
-          if (angular.isDefined(data.hideBackButton)) {
-            $scope.backButtonEnabled = !!data.hideBackButton;
-          }
-          $scope.isReverse = data.navDirection == 'back';
-          $scope.animateEnabled = !!(data.navDirection && data.animate !== false);
-
-          $scope.leftButtons = data.leftButtons;
-          $scope.rightButtons = data.rightButtons;
-          $scope.oldTitle = $scope.title;
-          $scope.title = data && data.title || '';
-
-          // only change if they're different
-          if($scope.oldTitle !== $scope.title) {
-            if (!$scope.animateEnabled) {
-              //If no animation, we're done!
-              hb.align();
-            } else {
-              animateTitles();
-            }
-          }
-        }
+      ionic.on("release", onTap, element[0]);
 
-        function animateTitles() {
-          var oldTitleEl, newTitleEl, currentTitles;
+      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
+      // something else nearby.
+      element.onclick = function(event) { };
 
-          //If we have any title right now (or more than one, they could be transitioning on switch),
-          //replace the first one with an oldTitle element
-          currentTitles = $element[0].querySelectorAll('.title');
-          if (currentTitles.length) {
-            oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
-            angular.element(currentTitles[0]).replaceWith(oldTitleEl);
-          }
-          //Compile new title
-          newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
+      scope.$on('$destroy', function () {
+        ionic.off("release", onTap, element[0]);
+      });
+    };
+  }])
 
-          //Animate in one frame
-          ionic.requestAnimationFrame(function() {
+  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
+    return function(scope, element, attr) {
+      $ionicNgClick(scope, element, attr.ngClick);
+    };
+  }])
 
-            oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+  .directive('ionStopEvent', function () {
+    function stopEvent(e) {
+      e.stopPropagation();
+    }
+    return {
+      restrict: 'A',
+      link: function (scope, element, attr) {
+        element.bind(attr.ionStopEvent, stopEvent);
+      }
+    };
+  });
 
-            var insert = oldTitleEl && angular.element(oldTitleEl) || null;
-            $animate.enter(newTitleEl, $element, insert, function() {
-              hb.align();
-            });
 
-            //Cleanup any old titles leftover (besides the one we already did replaceWith on)
-            angular.forEach(currentTitles, function(el) {
-              if (el && el.parentNode) {
-                //Use .remove() to cleanup things like .data()
-                angular.element(el).remove();
-              }
-            });
+})(window.angular, window.ionic);
 
-            //$apply so bindings fire
-            $scope.$digest();
+(function() {
+'use strict';
 
-            //Stop flicker of new title on ios7
-            ionic.requestAnimationFrame(function() {
-              newTitleEl[0].classList.remove('invisible');
-            });
-          });
-        }
-      };
-    }
-  };
-}])
+angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
 
 /**
  * @ngdoc directive
  * @name ionView
  * @module ionic
  * @restrict E
- * @parent ionNavBar
+ * @parent ionNavView
  *
  * @description
  * A container for content, used to tell a parent {@link ionic.directive:ionNavBar}
@@ -4653,7 +5048,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  *
  * ```html
  * <ion-nav-bar></ion-nav-bar>
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <ion-view title="My Page">
  *     <ion-content>
  *       Hello!
@@ -4662,58 +5057,46 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * </ion-nav-view>
  * ```
  *
- * @param {expression=} left-buttons The leftButtons to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {expression=} right-buttons The rightButtons to display on the parent {@link ionic.directive:ionNavBar}.
  * @param {string=} title The title to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideBackButton Whether to hide the back button on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideNavBar Whether to hide the parent {@link ionic.directive:ionNavBar}.
+ * @param {boolean=} hideBackButton Whether to hide the back button on the parent
+ * {@link ionic.directive:ionNavBar} by default.
+ * @param {boolean=} hideNavBar Whether to hide the parent
+ * {@link ionic.directive:ionNavBar} by default.
  */
 .directive('ionView', ['$ionicViewService', '$rootScope', '$animate',
            function( $ionicViewService,   $rootScope,   $animate) {
   return {
     restrict: 'EA',
     priority: 1000,
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      hideBackButton: '@',
-      hideNavBar: '@',
-    },
-
+    require: '^?ionNavBar',
     compile: function(tElement, tAttrs, transclude) {
       tElement.addClass('pane');
       tElement[0].removeAttribute('title');
 
-      return function link($scope, $element, $attr) {
-
-        $rootScope.$broadcast('viewState.viewEnter', {
-          title: $scope.title,
-          navDirection: $scope.$navDirection || $scope.$parent.$navDirection
-        });
-
-        // Should we hide a back button when this tab is shown
-        $scope.hideBackButton = $scope.$eval($scope.hideBackButton);
-        if($scope.hideBackButton) {
-          $rootScope.$broadcast('viewState.showBackButton', false);
+      return function link($scope, $element, $attr, navBarCtrl) {
+        if (!navBarCtrl) {
+          return;
         }
+        var initialTitle = $attr.title;
+        navBarCtrl.changeTitle(initialTitle, $scope.$navDirection);
 
-        // Should the nav bar be hidden for this view or not?
-        $rootScope.$broadcast('viewState.showNavBar', ($scope.hideNavBar !== 'true') );
-
-        // watch for changes in the left buttons
-        $scope.$watch('leftButtons', function(value) {
-          $scope.$emit('viewState.leftButtonsChanged', $scope.leftButtons);
+        // watch for changes in the title, don't set initial value as changeTitle does that
+        $attr.$observe('title', function(val, oldVal) {
+          if (val !== initialTitle) {
+            navBarCtrl.setTitle(val);
+          }
         });
 
-        $scope.$watch('rightButtons', function(val) {
-          $scope.$emit('viewState.rightButtonsChanged', $scope.rightButtons);
+        $scope.$watch($attr.hideBackButton, function(value) {
+          // Should we hide a back button when this tab is shown
+          navBarCtrl.showBackButton(!value);
         });
 
-        // watch for changes in the title
-        $scope.$watch('title', function(val) {
-          $scope.$emit('viewState.titleUpdated', $scope);
+        $scope.$watch($attr.hideNavBar, function(value) {
+          // Should the nav bar be hidden for this view or not?
+          navBarCtrl.showBar(!value);
         });
+
       };
     }
   };
@@ -4721,39 +5104,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
 
 
 /**
-* @private
-*/
-.directive('ionNavBackButton', ['$ionicViewService', '$rootScope',
-                     function($ionicViewService,   $rootScope) {
-
-  function goBack(e) {
-    var backView = $ionicViewService.getBackView();
-    backView && backView.go();
-    e.alreadyHandled = true;
-    return false;
-  }
-
-  return {
-    restrict: 'E',
-    scope: {
-      type: '=',
-      label: '=',
-      icon: '='
-    },
-    replace: true,
-    template:
-    '<button ng-click="goBack($event)" class="button back-button {{type}} ' +
-      '{{(icon && !label) ? \'icon \' + icon : \'\'}}">' +
-      '<i ng-if="icon && label" class="icon {{icon}}"></i> ' +
-      '{{label}}' +
-    '</button>',
-    link: function($scope) {
-      $scope.goBack = goBack;
-    }
-  };
-}])
-
-/**
  * @ngdoc directive
  * @name ionNavView
  * @module ionic
@@ -4787,8 +5137,11 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * {@link ionic.directive:ionNavBar} directive which will render a header bar that updates as we
  * navigate through the navigation stack.
  *
+ * You can any [animation class](/docs/components#animation) on the navView to have its pages slide.
+ * Recommended for page transitions: 'slide-left-right', 'slide-left-right-ios7', 'slide-in-up'.
+ *
  * ```html
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <!-- Center content -->
  *   <ion-nav-bar>
  *   </ion-nav-bar>
@@ -4843,8 +5196,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * @param {string=} name A view name. The name should be unique amongst the other views in the
  * same state. You can have views of the same name that live in different states. For more
  * information, see ui-router's [ui-view documentation](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view).
- * @param {string=} animation The animation to use for views underneath this ionNavView.
- * Defaults to 'slide-left-right'.
  */
 .directive('ionNavView', ['$ionicViewService', '$state', '$compile', '$controller', '$animate',
               function( $ionicViewService,   $state,   $compile,   $controller,   $animate) {
@@ -4857,10 +5208,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     terminal: true,
     priority: 2000,
     transclude: true,
-    controller: ['$scope', function($scope) {
-      this.setNextAnimation = function(anim) {
-        $scope.$nextAnimation = anim;
-      };
+    controller: [function(){
     }],
     compile: function (element, attr, transclude) {
       return function(scope, element, attr, navViewCtrl) {
@@ -4953,10 +5301,45 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     }
   };
   return directive;
+}])
+
+
+/**
+ * @ngdoc directive
+ * @name navClear
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Disables any transition animations between views, along with removing the back
+ * button which would normally show on the next view. This directive is useful for
+ * links within a sideMenu.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would disable
+ * any animations which would normally occur between views.
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('navClear', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    link: function($scope, $element, $attr) {
+      $element.bind('click', function(){
+        $ionicViewService.nextViewOptions({
+          disableAnimate: true,
+          disableBack: true
+        });
+      });
+    }
+  };
 }]);
 
 })();
 
+/*
 (function() {
 'use strict';
 
@@ -4979,8 +5362,9 @@ angular.module('ionic.ui.virtRepeat', [])
   };
 });
 })(ionic);
+*/
 
-
+/*
 (function() {
 'use strict';
 
@@ -5015,7 +5399,6 @@ function isTagNameInList(element, list){
 
 // Utility to find the viewport/content elements given the start element:
 function findViewportAndContent(startElement){
-  /*jshint eqeqeq:false, curly:false */
   var root = $rootElement[0];
   var e, n;
   // Somewhere between the grandparent and the root node
@@ -5105,13 +5488,13 @@ function computeRowHeight(element){
 
 angular.module('ionic.ui.virtualRepeat', [])
 
-/**
- * A replacement for ng-repeat that supports virtual lists.
- * This is not a 1 to 1 replacement for ng-repeat. However, in situations
- * where you have huge lists, this repeater will work with our virtual
- * scrolling to only render items that are showing or will be showing
- * if a scroll is made.
- */
+//
+// A replacement for ng-repeat that supports virtual lists.
+// This is not a 1 to 1 replacement for ng-repeat. However, in situations
+// where you have huge lists, this repeater will work with our virtual
+// scrolling to only render items that are showing or will be showing
+// if a scroll is made.
+//
 .directive('ionVirtualRepeat', ['$log', function($log) {
     return {
       require: ['?ngModel, ^virtualList'],
@@ -5308,46 +5691,335 @@ angular.module('ionic.ui.virtualRepeat', [])
   }]);
 
 })(ionic);
-
-(function() {
-'use strict';
+*/
 
 angular.module('ionic.ui.scroll')
 
 /**
+ * @ngdoc service
+ * @name $ionicScrollDelegate
+ * @module ionic
+ * @description
+ * Delegate for controlling scrollViews (created by
+ * {@link ionic.directive:ionContent} and
+ * {@link ionic.directive:ionScroll} directives).
+ *
+ * Methods called directly on the $ionicScrollDelegate service will control all scroll
+ * views.  Use the {@link ionic.service:$ionicScrollDelegate#$getByHandle $getByHandle}
+ * method to control specific scrollViews.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content>
+ *     <button ng-click="scrollTop()">Scroll to Top!</button>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollTop = function() {
+ *     $ionicScrollDelegate.scrollTop();
+ *   };
+ * }
+ * ```
+ *
+ * Example of advanced usage, with two scroll areas using `delegate-handle`
+ * for fine control.
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content delegate-handle="mainScroll">
+ *     <button ng-click="scrollMainToTop()">
+ *       Scroll content to top!
+ *     </button>
+ *     <ion-scroll delegate-handle="small" style="height: 100px;">
+ *       <button ng-click="scrollSmallToTop()">
+ *         Scroll small area to top!
+ *       </button>
+ *     </ion-scroll>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollMainToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
+ *   };
+ *   $scope.scrollSmallToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('small').scrollTop();
+ *   };
+ * }
+ * ```
+ */
+
+.service('$ionicScrollDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#resize
+   * @description Tell the scrollView to recalculate the size of its container.
+   */
+  'resize',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTop
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTop',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollBottom
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollBottom',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTo
+   * @param {number} left The x-value to scroll to.
+   * @param {number} top The y-value to scroll to.
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTo',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#anchorScroll
+   * @description Tell the scrollView to scroll to the element with an id
+   * matching window.location.hash.
+   *
+   * If no matching element is found, it will scroll to top.
+   *
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'anchorScroll',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#rememberScrollPosition
+   * @description
+   * Will make it so, when this scrollView is destroyed (user leaves the page),
+   * the last scroll position the page was on will be saved, indexed by the
+   * given id.
+   *
+   * Note: for pages associated with a view under an ion-nav-view,
+   * rememberScrollPosition automatically saves their scroll.
+   *
+   * Related methods: scrollToRememberedPosition, forgetScrollPosition (below).
+   *
+   * In the following example, the scroll position of the ion-scroll element
+   * will persist, even when the user changes the toggle switch.
+   *
+   * ```html
+   * <ion-toggle ng-model="shouldShowScrollView"></ion-toggle>
+   * <ion-scroll delegate-handle="myScroll" ng-if="shouldShowScrollView">
+   *   <div ng-controller="ScrollCtrl">
+   *     <ion-list>
+   *       <ion-item ng-repeat="i in items">{{i}}</ion-item>
+   *     </ion-list>
+   *   </div>
+   * </ion-scroll>
+   * ```
+   * ```js
+   * function ScrollCtrl($scope, $ionicScrollDelegate) {
+   *   var delegate = $ionicScrollDelegate.$getByHandle('myScroll');
+   *
+   *   // Put any unique ID here.  The point of this is: every time the controller is recreated
+   *   // we want to load the correct remembered scroll values.
+   *   delegate.rememberScrollPosition('my-scroll-id');
+   *   delegate.scrollToRememberedPosition();
+   *   $scope.items = [];
+   *   for (var i=0; i<100; i++) {
+   *     $scope.items.push(i);
+   *   }
+   * }
+   * ```
+   *
+   * @param {string} id The id to remember the scroll position of this
+   * scrollView by.
+   */
+  'rememberScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#forgetScrollPosition
+   * @description
+   * Stop remembering the scroll position for this scrollView.
+   */
+  'forgetScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollToRememberedPosition
+   * @description
+   * If this scrollView has an id associated with its scroll position,
+   * (through calling rememberScrollPosition), and that position is remembered,
+   * load the position and scroll to it.
+   * @param {boolean=} shouldAnimate Whether to animate the scroll.
+   */
+  'scrollToRememberedPosition'
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * scrollViews with `delegate-handle` matching the given handle.
+   *
+   * Example: `$ionicScrollDelegate.$getByHandle('my-handle').scrollTop();`
+   */
+]))
+
+/**
  * @private
  */
-.controller('$ionicScroll', ['$scope', 'scrollViewOptions', '$timeout', '$ionicScrollDelegate', '$window', function($scope, scrollViewOptions, $timeout, $ionicScrollDelegate, $window) {
+.factory('$$scrollValueCache', function() {
+  return {};
+})
+
+.controller('$ionicScroll', [
+  '$scope',
+  'scrollViewOptions',
+  '$timeout',
+  '$window',
+  '$$scrollValueCache',
+  '$location',
+  '$rootScope',
+  '$document',
+  '$ionicScrollDelegate',
+function($scope, scrollViewOptions, $timeout, $window, $$scrollValueCache, $location, $rootScope, $document, $ionicScrollDelegate) {
 
   var self = this;
 
+  this._scrollViewOptions = scrollViewOptions; //for testing
+
   var element = this.element = scrollViewOptions.el;
+  var $element = this.$element = angular.element(element);
   var scrollView = this.scrollView = new ionic.views.Scroll(scrollViewOptions);
 
+  //Attach self to element as a controller so other directives can require this controller
+  //through `require: '$ionicScroll'
+  //Also attach to parent so that sibling elements can require this
+  ($element.parent().length ? $element.parent() : $element)
+    .data('$$ionicScrollController', this);
+
+  var deregisterInstance = $ionicScrollDelegate._registerInstance(
+    this, scrollViewOptions.delegateHandle
+  );
+
   if (!angular.isDefined(scrollViewOptions.bouncing)) {
     ionic.Platform.ready(function() {
       scrollView.options.bouncing = !ionic.Platform.isAndroid();
     });
   }
 
-  var $element = this.$element = angular.element(element);
-
-  //Attach self to element as a controller so other directives can require this controller
-  //through `require: '$ionicScroll'
-  $element.data('$$ionicScrollController', this);
+  var resize = angular.bind(scrollView, scrollView.resize);
+  ionic.on('resize', resize, $window);
 
-  //Register delegate for event handling
-  $ionicScrollDelegate.register($scope, $element, scrollView);
+  // set by rootScope listener if needed
+  var backListenDone = angular.noop;
 
-  $window.addEventListener('resize', resize);
   $scope.$on('$destroy', function() {
+    deregisterInstance();
+    ionic.off('resize', resize, $window);
     $window.removeEventListener('resize', resize);
+    backListenDone();
+    if (self._rememberScrollId) {
+      $$scrollValueCache[self._rememberScrollId] = scrollView.getValues();
+    }
   });
-  function resize() {
-    scrollView.resize();
-  }
 
-  this.setRefresher = function(refresherScope, refresherElement) {
+  $element.on('scroll', function(e) {
+    var detail = (e.originalEvent || e).detail || {};
+    $scope.$onScroll && $scope.$onScroll({
+      event: e,
+      scrollTop: detail.scrollTop || 0,
+      scrollLeft: detail.scrollLeft || 0
+    });
+  });
+
+  $scope.$on('$viewContentLoaded', function(e, historyData) {
+    //only the top-most scroll area under a view should remember that view's
+    //scroll position
+    if (e.defaultPrevented) { return; }
+    e.preventDefault();
+
+    var viewId = historyData && historyData.viewId;
+    if (viewId) {
+      self.rememberScrollPosition(viewId);
+      self.scrollToRememberedPosition();
+
+      backListenDone = $rootScope.$on('$viewHistory.viewBack', function(e, fromViewId, toViewId) {
+        //When going back from this view, forget its saved scroll position
+        if (viewId === fromViewId) {
+          self.forgetScrollPosition();
+        }
+      });
+    }
+  });
+
+  $timeout(function() {
+    scrollView.run();
+  });
+
+  this._rememberScrollId = null;
+
+  this.resize = function() {
+    return $timeout(resize);
+  };
+
+  this.scrollTop = function(shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(0, 0, !!shouldAnimate);
+    });
+  };
+
+  this.scrollBottom = function(shouldAnimate) {
+    this.resize().then(function() {
+      var max = scrollView.getScrollMax();
+      scrollView.scrollTo(max.left, max.top, !!shouldAnimate);
+    });
+  };
+
+  this.scrollTo = function(left, top, shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(left, top, !!shouldAnimate);
+    });
+  };
+
+  this.anchorScroll = function(shouldAnimate) {
+    this.resize().then(function() {
+      var hash = $location.hash();
+      var elm = hash && $document[0].getElementById(hash);
+      if (hash && elm) {
+        var scroll = ionic.DomUtil.getPositionInParent(elm, self.$element);
+        scrollView.scrollTo(scroll.left, scroll.top, !!shouldAnimate);
+      } else {
+        scrollView.scrollTo(0,0, !!shouldAnimate);
+      }
+    });
+  };
+
+  this.rememberScrollPosition = function(id) {
+    if (!id) {
+      throw new Error("Must supply an id to remember the scroll by!");
+    }
+    this._rememberScrollId = id;
+  };
+  this.forgetScrollPosition = function() {
+    delete $$scrollValueCache[this._rememberScrollId];
+    this._rememberScrollId = null;
+  };
+  this.scrollToRememberedPosition = function(shouldAnimate) {
+    var values = $$scrollValueCache[this._rememberScrollId];
+    if (values) {
+      this.resize().then(function() {
+        scrollView.scrollTo(+values.left, +values.top, shouldAnimate);
+      });
+    }
+  };
+
+
+
+  /**
+   * @private
+   */
+  this._setRefresher = function(refresherScope, refresherElement) {
     var refresher = this.refresher = refresherElement;
     var refresherHeight = self.refresher.clientHeight || 0;
     scrollView.activatePullToRefresh(refresherHeight, function() {
@@ -5361,10 +6033,7 @@ angular.module('ionic.ui.scroll')
       refresherScope.$onRefresh();
     });
   };
-
-  $timeout(function() {
-    scrollView.run();
-  });
 }]);
 
-})();
+
+})();
\ No newline at end of file
diff --git a/phonegap/www/scripts/ionic.js b/phonegap/www/scripts/ionic.js
index 1105ae1..664e471 100644
--- a/phonegap/www/scripts/ionic.js
+++ b/phonegap/www/scripts/ionic.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,13 +12,14 @@
  *
  */
 
+(function() {
 
 // Create namespaces
 //
 window.ionic = {
   controllers: {},
   views: {},
-  version: '{{ VERSION }}'
+  version: '1.0.0-beta.1'
 };
 
 (function(ionic) {
@@ -135,16 +136,19 @@ window.ionic = {
   };
 })(ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
+
+  var readyCallbacks = [];
+  var isDomReady = false;
 
-  var readyCallbacks = [],
-  domReady = function() {
+  function domReady() {
+    isDomReady = true;
     for(var x=0; x<readyCallbacks.length; x++) {
       ionic.requestAnimationFrame(readyCallbacks[x]);
     }
     readyCallbacks = [];
     document.removeEventListener('DOMContentLoaded', domReady);
-  };
+  }
   document.addEventListener('DOMContentLoaded', domReady);
 
   // From the man himself, Mr. Paul Irish.
@@ -164,7 +168,6 @@ window.ionic = {
   * @ngdoc utility
   * @name ionic.DomUtil
   * @module ionic
-  * @group utilities
   */
   ionic.DomUtil = {
     //Call with proper context
@@ -231,12 +234,12 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.DomUtil#ready
      * @description
-     * Call a function when the dom is ready, or if it is already ready
+     * Call a function when the DOM is ready, or if it is already ready
      * call the function immediately.
      * @param {function} callback The function to be called.
      */
     ready: function(cb) {
-      if(document.readyState === "complete") {
+      if(isDomReady || document.readyState === "complete") {
         ionic.requestAnimationFrame(cb);
       } else {
         readyCallbacks.push(cb);
@@ -322,8 +325,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent of element matching the
      * className, or null.
      */
-    getParentWithClass: function(e, className) {
-      while(e.parentNode) {
+    getParentWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e.parentNode && depth--) {
         if(e.parentNode.classList && e.parentNode.classList.contains(className)) {
           return e.parentNode;
         }
@@ -339,8 +343,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent or self matching the
      * className, or null.
      */
-    getParentOrSelfWithClass: function(e, className) {
-      while(e) {
+    getParentOrSelfWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e && depth--) {
         if(e.classList && e.classList.contains(className)) {
           return e;
         }
@@ -371,7 +376,7 @@ window.ionic = {
   //Shortcuts
   ionic.requestAnimationFrame = ionic.DomUtil.requestAnimationFrame;
   ionic.animationFrameThrottle = ionic.DomUtil.animationFrameThrottle;
-})(window.ionic);
+})(this, document, ionic);
 
 /**
  * ion-events.js
@@ -424,7 +429,6 @@ window.ionic = {
    * @ngdoc utility
    * @name ionic.EventController
    * @module ionic
-   * @group utilities
    */
   ionic.EventController = {
     VIRTUALIZED_EVENTS: ['tap', 'swipe', 'swiperight', 'swipeleft', 'drag', 'hold', 'release'],
@@ -494,7 +498,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#onGesture
      * @alias ionic.onGesture
-     * @description Add an event listener for a gesture on an element. 
+     * @description Add an event listener for a gesture on an element.
      * @param {string} eventType The gesture event to listen for.
      * @param {function(e)} callback The function to call when the gesture
      * happens.
@@ -510,7 +514,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#offGesture
      * @alias ionic.offGesture
-     * @description Remove an event listener for a gesture on an element. 
+     * @description Remove an event listener for a gesture on an element.
      * @param {string} eventType The gesture event.
      * @param {function(e)} callback The listener that was added earlier.
      * @param {DOMElement} element The element the listener was added on.
@@ -1930,13 +1934,12 @@ window.ionic = {
   };
 })(window.ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
 
   /**
    * @ngdoc utility
    * @name ionic.Platform
    * @module ionic
-   * @group utilities
    */
   ionic.Platform = {
 
@@ -1989,18 +1992,15 @@ window.ionic = {
      * @private
      */
     detect: function() {
-      var i, bodyClass = document.body.className;
-
       ionic.Platform._checkPlatforms();
 
-      // only change the body class if we got platform info
-      for(i = 0; i < this.platforms.length; i++) {
-        bodyClass += ' platform-' + this.platforms[i];
-      }
-
-      bodyClass += ' grade-' + this.grade;
-
-      document.body.className = bodyClass.trim();
+      ionic.requestAnimationFrame(function(){
+        // only add to the body class if we got platform info
+        for(var i = 0; i < ionic.Platform.platforms.length; i++) {
+          document.body.classList.add('platform-' + ionic.Platform.platforms[i]);
+        }
+        document.body.classList.add('grade-' + ionic.Platform.grade);
+      });
     },
 
     /**
@@ -2054,7 +2054,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiPad
+     * @name ionic.Platform#isIPad
      * @returns {boolean} Whether we are running on iPad.
      */
     isIPad: function() {
@@ -2062,7 +2062,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiOS
+     * @name ionic.Platform#isIOS
      * @returns {boolean} Whether we are running on iOS.
      */
     isIOS: function() {
@@ -2184,15 +2184,17 @@ window.ionic = {
       this._showStatusBar = val;
       this.ready(function(){
         // run this only when or if the platform (cordova) is ready
-        if(ionic.Platform._showStatusBar) {
-          // they do not want it to be full screen
-          StatusBar.show();
-          document.body.classList.remove('status-bar-hide');
-        } else {
-          // it should be full screen
-          StatusBar.hide();
-          document.body.classList.add('status-bar-hide');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform._showStatusBar) {
+            // they do not want it to be full screen
+            window.StatusBar && window.StatusBar.show();
+            document.body.classList.remove('status-bar-hide');
+          } else {
+            // it should be full screen
+            window.StatusBar && window.StatusBar.hide();
+            document.body.classList.add('status-bar-hide');
+          }
+        });
       });
     },
 
@@ -2201,25 +2203,26 @@ window.ionic = {
      * @name ionic.Platform#fullScreen
      * @description
      * Sets whether the app is fullscreen or not (in Cordova).
-     * @param {boolean} showFullScreen Whether or not to set the app to fullscreen.
+     * @param {boolean=} showFullScreen Whether or not to set the app to fullscreen. Defaults to true.
+     * @param {boolean=} showStatusBar Whether or not to show the device's status bar. Defaults to false.
      */
     fullScreen: function(showFullScreen, showStatusBar) {
-      // fullScreen( [showFullScreen[, showStatusBar] ] )
       // showFullScreen: default is true if no param provided
       this.isFullScreen = (showFullScreen !== false);
 
       // add/remove the fullscreen classname to the body
       ionic.DomUtil.ready(function(){
         // run this only when or if the DOM is ready
-        if(ionic.Platform.isFullScreen) {
-          document.body.classList.add('fullscreen');
-        } else {
-          document.body.classList.remove('fullscreen');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform.isFullScreen) {
+            document.body.classList.add('fullscreen');
+          } else {
+            document.body.classList.remove('fullscreen');
+          }
+        });
+        // showStatusBar: default is false if no param provided
+        ionic.Platform.showStatusBar( (showStatusBar === true) );
       });
-
-      // showStatusBar: default is false if no param provided
-      this.showStatusBar( (showStatusBar === true) );
     }
 
   };
@@ -2253,10 +2256,13 @@ window.ionic = {
     }
     readyCallbacks = [];
     ionic.trigger('platformready', { target: document });
-    document.removeEventListener("deviceready", onPlatformReady, false);
+
+    ionic.requestAnimationFrame(function(){
+      document.body.classList.add('platform-ready');
+    });
   }
 
-})(window.ionic);
+})(this, document, ionic);
 
 (function(document, ionic) {
   'use strict';
@@ -2343,7 +2349,7 @@ window.ionic = {
 
     var ele = target.control || target;
 
-    if(ele.disabled || ele.type === 'file') return;
+    if(ele.disabled || ele.type === 'file' || ele.type === 'range') return;
 
     void 0;
 
@@ -2357,7 +2363,7 @@ window.ionic = {
 
     ele.dispatchEvent(clickEvent);
 
-    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA' || ele.tagName === 'SELECT') {
+    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA') {
       ele.focus();
       e.preventDefault();
     } else {
@@ -2398,8 +2404,7 @@ window.ionic = {
           ele.tagName === "A" ||
           ele.tagName === "BUTTON" ||
           ele.tagName === "LABEL" ||
-          ele.tagName === "TEXTAREA" ||
-          ele.tagName === "SELECT" ) {
+          ele.tagName === "TEXTAREA" ) {
 
         return ionic.tapElement(ele, e);
       }
@@ -2448,10 +2453,15 @@ window.ionic = {
     // check if this click's coordinates are different than its touchstart/mousedown
     var c = getCoordinates(event);
 
-    return (c.x > startCoordinates.x + HIT_RADIUS ||
-            c.x < startCoordinates.x - HIT_RADIUS ||
-            c.y > startCoordinates.y + HIT_RADIUS ||
-            c.y < startCoordinates.y - HIT_RADIUS);
+    // Quick check for 0,0 which could be simulated mouse click for form submission
+    if(c.x === 0 && c.y === 0) {
+      return false;
+    }
+
+    return (c.x > startCoordinates.x + 2 ||
+            c.x < startCoordinates.x - 2 ||
+            c.y > startCoordinates.y + 2 ||
+            c.y < startCoordinates.y - 2);
   }
 
   function recordCoordinates(event) {
@@ -2482,23 +2492,19 @@ window.ionic = {
               gesture.originalEvent.changedTouches[0]) ||
           touches[0].originalEvent || touches[0];
 
-      if(e) return { x: e.clientX, y: e.clientY };
+      if(e) return { x: e.clientX || e.pageX, y: e.clientY || e.pageY };
     }
     return { x:0, y:0 };
   }
 
+  var clickPreventTimerId;
   function removeClickPrevent(e) {
-    setTimeout(function(){
+    clearTimeout(clickPreventTimerId);
+    clickPreventTimerId = setTimeout(function(){
       var tap = isRecentTap(e);
       if(tap) delete tapCoordinates[tap.id];
+      startCoordinates = {};
     }, REMOVE_PREVENT_DELAY);
-
-    setTimeout(function(){
-      for(var hitKey in hitElements) {
-        hitElements[hitKey] && hitElements[hitKey].classList.remove('active');
-        delete hitElements[hitKey];
-      }
-    }, 150);
   }
 
   function stopEvent(e){
@@ -2510,8 +2516,7 @@ window.ionic = {
   function blurActive() {
     var ele = document.activeElement;
     if(ele && (ele.tagName === "INPUT" ||
-               ele.tagName === "TEXTAREA" ||
-               ele.tagName === "SELECT")) {
+               ele.tagName === "TEXTAREA")) {
       // using a timeout to prevent funky scrolling while a keyboard hides
       setTimeout(function(){
         ele.blur();
@@ -2521,46 +2526,143 @@ window.ionic = {
 
   function recordStartCoordinates(e) {
     startCoordinates = getCoordinates(e);
-
-    var x, ele = e.target;
-    for(x=0; x<5; x++) {
-      if(!ele || ele.tagName === 'LABEL') break;
-      if( ele.classList.contains('item') || ele.classList.contains('button') ) {
-        hitElements[hitCounts] = ele;
-        hitCounts = (hitCounts > 24 ? 0 : hitCounts + 1);
-        ionic.requestAnimationFrame(function(){
-          ele.classList.add('active');
-        });
-        break;
-      }
-      ele = ele.parentElement;
-    }
   }
 
   var tapCoordinates = {}; // used to remember coordinates to ignore if they happen again quickly
   var startCoordinates = {}; // used to remember where the coordinates of the start of the tap
   var CLICK_PREVENT_DURATION = 1500; // max milliseconds ghostclicks in the same area should be prevented
-  var REMOVE_PREVENT_DELAY = 375; // delay after a touchend/mouseup before removing the ghostclick prevent
+  var REMOVE_PREVENT_DELAY = 380; // delay after a touchend/mouseup before removing the ghostclick prevent
   var HIT_RADIUS = 15;
-  var hitElements = {};
-  var hitCounts = 0;
 
-  // set global click handler and check if the event should stop or not
-  document.addEventListener('click', preventGhostClick, true);
+  ionic.Platform.ready(function(){
+
+    if(ionic.Platform.grade === 'c') {
+      // low performing phones should have a longer ghostclick prevent
+      REMOVE_PREVENT_DELAY = 800;
+    }
+
+    // set global click handler and check if the event should stop or not
+    document.addEventListener('click', preventGhostClick, true);
 
-  // global tap event listener polyfill for HTML elements that were "tapped" by the user
-  ionic.on("tap", tapPolyfill, document);
+    // global release event listener polyfill for HTML elements that were tapped or held
+    ionic.on("release", tapPolyfill, document);
 
-  // listeners used to remove ghostclick prevention
-  document.addEventListener('touchend', removeClickPrevent, false);
-  document.addEventListener('mouseup', removeClickPrevent, false);
+    // listeners used to remove ghostclick prevention
+    document.addEventListener('touchend', removeClickPrevent, false);
+    document.addEventListener('mouseup', removeClickPrevent, false);
 
-  // in the case the user touched the screen, then scrolled, it shouldn't fire the click
-  document.addEventListener('touchstart', recordStartCoordinates, false);
-  document.addEventListener('mousedown', recordStartCoordinates, false);
+    // in the case the user touched the screen, then scrolled, it shouldn't fire the click
+    document.addEventListener('touchstart', recordStartCoordinates, false);
+    document.addEventListener('mousedown', recordStartCoordinates, false);
+  });
 
 })(this, document, ionic);
 
+(function(document, ionic) {
+  'use strict';
+
+  var queueElements = {};   // elements that should get an active state in XX milliseconds
+  var activeElements = {};  // elements that are currently active
+  var keyId = 0;            // a counter for unique keys for the above ojects
+
+  ionic.activator = {
+
+    start: function(e) {
+      // when an element is touched/clicked, it climbs up a few
+      // parents to see if it is an .item or .button element
+      ionic.requestAnimationFrame(function(){
+        var ele = e.target;
+        var eleToActivate;
+
+        for(var x=0; x<4; x++) {
+          if(!ele) break;
+          if(eleToActivate && ele.classList.contains('item')) {
+            eleToActivate = ele;
+            break;
+          }
+          if( ele.tagName == 'A' || ele.tagName == 'BUTTON' || ele.getAttribute('ng-click') ) {
+            eleToActivate = ele;
+          }
+          if( ele.classList.contains('button') ) {
+            eleToActivate = ele;
+            break;
+          }
+          ele = ele.parentElement;
+        }
+
+        if(eleToActivate) {
+          // queue that this element should be set to active
+          queueElements[keyId] = eleToActivate;
+
+          // in XX milliseconds, set the queued elements to active
+          // add listeners to clear all queued/active elements onMove
+          if(e.type === 'touchstart') {
+            document.body.removeEventListener('mousedown', ionic.activator.start);
+            document.body.addEventListener('touchmove', clear, false);
+            setTimeout(activateElements, 85);
+          } else {
+            document.body.addEventListener('mousemove', clear, false);
+            ionic.requestAnimationFrame(activateElements);
+          }
+
+          keyId = (keyId > 19 ? 0 : keyId + 1);
+        }
+
+      });
+    }
+  };
+
+  function activateElements() {
+    // activate all elements in the queue
+    for(var key in queueElements) {
+      if(queueElements[key]) {
+        queueElements[key].classList.add('active');
+        activeElements[key] = queueElements[key];
+      }
+    }
+    queueElements = {};
+  }
+
+  function deactivateElements() {
+    for(var key in activeElements) {
+      if(activeElements[key]) {
+        activeElements[key].classList.remove('active');
+        delete activeElements[key];
+      }
+    }
+  }
+
+  function onEnd(e) {
+    // clear out any active/queued elements after XX milliseconds
+    setTimeout(clear, 200);
+  }
+
+  function clear() {
+    // clear out any elements that are queued to be set to active
+    queueElements = {};
+
+    // in the next frame, remove the active class from all active elements
+    ionic.requestAnimationFrame(deactivateElements);
+
+    // remove onMove listeners that clear out active elements
+    document.body.removeEventListener('mousemove', clear);
+    document.body.removeEventListener('touchmove', clear);
+  }
+
+  // use window.onload because this doesn't need to run immediately
+  window.addEventListener('load', function(){
+    // start an active element
+    document.body.addEventListener('touchstart', ionic.activator.start, false);
+    document.body.addEventListener('mousedown', ionic.activator.start, false);
+
+    // clear all active elements after XX milliseconds
+    document.body.addEventListener('touchend', onEnd, false);
+    document.body.addEventListener('mouseup', onEnd, false);
+    document.body.addEventListener('touchcancel', onEnd, false);
+  }, false);
+
+})(document, ionic);
+
 (function(ionic) {
 
   /* for nextUid() function below */
@@ -2773,12 +2875,12 @@ function androidKeyboardFix() {
     //If the height changes, and it's less than before, we have a keyboard open
     } else if (rememberedDeviceHeight !== window.innerHeight &&
                window.innerHeight < rememberedDeviceHeight) {
-      document.body.classList.add('hide-footer');
+      document.body.classList.add('footer-hide');
       //Wait for next frame so document.activeElement is set
       ionic.requestAnimationFrame(handleKeyboardChange);
     } else {
       //Otherwise we have a keyboard close or a *really* weird resize
-      document.body.classList.remove('hide-footer');
+      document.body.classList.remove('footer-hide');
     }
 
     function handleKeyboardChange() {
@@ -2850,7 +2952,7 @@ var IS_EMBEDDED_OBJECT_REGEX = /object|embed/i;
 
 	// Create namespaces
 	if (!global.core) {
-		global.core = { effect : {} };
+		var core = global.core = { effect : {} };
 
 	} else if (!core.effect) {
 		core.effect = {};
@@ -3436,8 +3538,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     function shouldIgnorePress(e) {
       // Don't react if initial down happens on a form element
       return e.target.tagName.match(IS_INPUT_LIKE_REGEX) ||
-        e.target.isContentEditable ||
-        e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX);
+             e.target.isContentEditable ||
+             e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX) ||
+             e.target.dataset.preventScroll;
     }
 
 
@@ -3502,8 +3605,18 @@ ionic.views.Scroll = ionic.views.View.inherit({
         mousedown = false;
       }, false);
 
+      var wheelShowBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('in');
+      }, 500, true);
+
+      var wheelHideBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('out');
+      }, 100, false);
+
       document.addEventListener("mousewheel", function(e) {
+        wheelShowBarFn();
         self.scrollBy(e.wheelDeltaX/self.options.wheelDampen, -e.wheelDeltaY/self.options.wheelDampen);
+        wheelHideBarFn();
       });
     }
   },
@@ -3558,9 +3671,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
   __resizeScrollbars: function() {
     var self = this;
 
-    // Bring the scrollbars in to show the content change
-    self.__fadeScrollbars('in');
-
     // Update horiz bar
     if(self.__indicatorX) {
       var width = Math.max(Math.round(self.__clientWidth * self.__clientWidth / (self.__contentWidth)), 20);
@@ -4175,8 +4285,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     var self = this;
 
-    self.__fadeScrollbars('in');
-
     // Reset interruptedAnimation flag
     self.__interruptedAnimation = true;
 
@@ -4419,6 +4527,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
       self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
       if (self.__isDragging) {
         self.__interruptedAnimation = false;
+        self.__fadeScrollbars('in');
       }
 
     }
@@ -4921,15 +5030,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 (function(ionic) {
 'use strict';
 
-  /**
-   * @ngdoc controller
-   * @name ionicBar
-   * @module ionic
-   * @group page layout
-   * @description
-   * Controller for the {@link ionic.directive:ionHeaderBar} and
-   * {@link ionic.directive:ionFooterBar} directives.
-   */
   ionic.views.HeaderBar = ionic.views.View.inherit({
     initialize: function(opts) {
       this.el = opts.el;
@@ -4941,16 +5041,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.align();
     },
 
-    /**
-     * @ngdoc method
-     * @name ionicBar#align
-     * @description
-     * Aligns the title text with the buttons in the bar
-     * so that the title size is maximized and aligned correctly
-     * as much as possible.
-     * @param {string=} direction Which direction to align the title towards.
-     * Available: 'left', 'right', 'center'. Default: 'center'.
-     */
     align: function(align) {
 
       align || (align = this.alignTitle);
@@ -5034,7 +5124,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   var ITEM_OPTIONS_CLASS = 'item-options';
   var ITEM_PLACEHOLDER_CLASS = 'item-placeholder';
   var ITEM_REORDERING_CLASS = 'item-reordering';
-  var ITEM_DRAG_CLASS = 'item-drag';
+  var ITEM_REORDER_BTN_CLASS = 'item-reorder';
 
   var DragOp = function() {};
   DragOp.prototype = {
@@ -5043,6 +5133,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     drag: function(e) {
     },
     end: function(e) {
+    },
+    isSameItem: function(item) {
+      return false;
     }
   };
 
@@ -5054,6 +5147,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   };
 
   SlideDrag.prototype = new DragOp();
+
   SlideDrag.prototype.start = function(e) {
     var content, buttons, offsetX, buttonsWidth;
 
@@ -5091,6 +5185,27 @@ ionic.views.Scroll = ionic.views.View.inherit({
     };
   };
 
+  /**
+   * Check if this is the same item that was previously dragged.
+   */
+  SlideDrag.prototype.isSameItem = function(op) {
+    if(op._lastDrag && this._currentDrag) {
+      return this._currentDrag.content == op._lastDrag.content;
+    }
+    return false;
+  };
+
+  SlideDrag.prototype.clean = function(e) {
+    var lastDrag = this._lastDrag;
+
+    if(!lastDrag) return;
+
+    ionic.requestAnimationFrame(function() {
+      lastDrag.content.style[ionic.CSS.TRANSITION] = '';
+      lastDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(0, 0, 0)';
+    });
+  };
+
   SlideDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
     var buttonsWidth;
 
@@ -5151,21 +5266,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     }
 
-    // var content = this._currentDrag.content;
-
-    // var onRestingAnimationEnd = function(e) {
-    //   if(e.propertyName == '-webkit-transform') {
-    //     if(content) content.classList.remove(ITEM_SLIDING_CLASS);
-    //   }
-    //   e.target.removeEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-    // };
-
     ionic.requestAnimationFrame(function() {
-      // var currentX = parseFloat(_this._currentDrag.content.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]) || 0;
-      // if(currentX !== restingPoint) {
-      //   _this._currentDrag.content.classList.add(ITEM_SLIDING_CLASS);
-      //   _this._currentDrag.content.addEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-      // }
       if(restingPoint === 0) {
         _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = '';
       } else {
@@ -5175,9 +5276,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
 
       // Kill the current drag
+      _this._lastDrag = _this._currentDrag;
       _this._currentDrag = null;
 
-
       // We are done, notify caller
       doneCallback && doneCallback();
     });
@@ -5331,7 +5432,8 @@ ionic.views.Scroll = ionic.views.View.inherit({
       opts = ionic.extend({
         onReorder: function(el, oldIndex, newIndex) {},
         virtualRemoveThreshold: -200,
-        virtualAddThreshold: 200
+        virtualAddThreshold: 200,
+        canSwipe: false
       }, opts);
 
       ionic.extend(this, opts);
@@ -5346,10 +5448,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.onRefreshOpening = opts.onRefreshOpening || function() {};
       this.onRefreshHolding = opts.onRefreshHolding || function() {};
 
-      window.ionic.onGesture('touch', function(e) {
-        _this._handleTouch(e);
-      }, this.el);
-
       window.ionic.onGesture('release', function(e) {
         _this._handleEndDrag(e);
       }, this.el);
@@ -5427,10 +5525,22 @@ ionic.views.Scroll = ionic.views.View.inherit({
       }
     },
 
+    /**
+     * Clear any active drag effects on the list.
+     */
+    clearDragEffects: function() {
+      if(this._lastDragOp) {
+        this._lastDragOp.clean && this._lastDragOp.clean();
+        this._lastDragOp = null;
+      }
+    },
+
     _initDrag: function() {
       //ionic.views.ListView.__super__._initDrag.call(this);
 
-      //this._isDragging = false;
+      // Store the last one
+      this._lastDragOp = this._dragOp;
+
       this._dragOp = null;
     },
 
@@ -5449,10 +5559,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _startDrag: function(e) {
       var _this = this;
 
+      var didStart = false;
+
       this._isDragging = false;
 
+      var lastDragOp = this._lastDragOp;
+
       // Check if this is a reorder drag
-      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_DRAG_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
+      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
         var item = this._getItem(e.target);
 
         if(item) {
@@ -5466,20 +5580,25 @@ ionic.views.Scroll = ionic.views.View.inherit({
           });
           this._dragOp.start(e);
           e.preventDefault();
-          return;
         }
       }
 
       // Or check if this is a swipe to the side drag
       else if(!this._didDragUpOrDown && (e.gesture.direction == 'left' || e.gesture.direction == 'right') && Math.abs(e.gesture.deltaX) > 5) {
-        this._dragOp = new SlideDrag({ el: this.el });
-        this._dragOp.start(e);
-        e.preventDefault();
-        return;
+
+        // Make sure this is an item with buttons
+        var item = this._getItem(e.target);
+        if(item && item.querySelector('.item-options')) {
+          this._dragOp = new SlideDrag({ el: this.el });
+          this._dragOp.start(e);
+          e.preventDefault();
+        }
       }
 
-      // We aren't handling it, so pass it up the chain
-      //ionic.views.ListView.__super__._startDrag.call(this, e);
+      // If we had a last drag operation and this is a new one on a different item, clean that last one
+      if(lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
+        lastDragOp.clean && lastDragOp.clean();
+      }
     },
 
 
@@ -5493,13 +5612,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
         return;
       }
 
-      // Cancel touch timeout
-      clearTimeout(this._touchTimeout);
-      var items = _this.el.querySelectorAll('.item');
-      for(var i = 0, l = items.length; i < l; i++) {
-        items[i].classList.remove('active');
-      }
-
       this._dragOp.end(e, function() {
         _this._initDrag();
       });
@@ -5511,17 +5623,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _handleDrag: function(e) {
       var _this = this, content, buttons;
 
-      if(Math.abs(e.gesture.deltaY) > 5) {
-        this._didDragUpOrDown = true;
+      if (!this.canSwipe) {
+        return;
       }
 
-      // If the user has a touch timeout to highlight an element, clear it if we
-      // get sufficient draggage
-      if(Math.abs(e.gesture.deltaX) > 10 || Math.abs(e.gesture.deltaY) > 10) {
-        clearTimeout(this._touchTimeout);
+      if(Math.abs(e.gesture.deltaY) > 5) {
+        this._didDragUpOrDown = true;
       }
 
-      clearTimeout(this._touchTimeout);
       // If we get a drag event, make sure we aren't in another drag, then check if we should
       // start one
       if(!this.isDragging && !this._dragOp) {
@@ -5536,25 +5645,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       e.gesture.srcEvent.preventDefault();
       this._dragOp.drag(e);
-    },
-
-    /**
-     * Handle the touch event to show the active state on an item if necessary.
-     */
-    _handleTouch: function(e) {
-      var _this = this;
-
-      var item = ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_CLASS);
-      if(!item) { return; }
-
-      this._touchTimeout = setTimeout(function() {
-        var items = _this.el.querySelectorAll('.item');
-        for(var i = 0, l = items.length; i < l; i++) {
-          items[i].classList.remove('active');
-        }
-        item.classList.add('active');
-      }, 250);
-    },
+    }
 
   });
 
@@ -5578,7 +5669,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       this.showDelay = opts.showDelay || 0;
 
-      this._loadingBox = this.el.querySelector('.loading');
+      this._loadingBox = this.el.querySelector('.loading') || this.el;
     },
     show: function() {
       var _this = this;
@@ -5607,6 +5698,11 @@ ionic.views.Scroll = ionic.views.View.inherit({
       window.clearTimeout(this._showDelayTimeout);
 
       this.el.classList.remove('active');
+    },
+    setContent: function(html) {
+      if (this._loadingBox) {
+        this._loadingBox.innerHTML = html || '';
+      }
     }
   });
 
@@ -5788,14 +5884,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
  *
 */
 
-/**
- * @ngdoc controller
- * @name ionicSlideBox
- * @module ionic
- * @description
- * Controller for the {@link ionic.directive:ionSlideBox} directive.
- */
-
 (function(ionic) {
 'use strict';
 
@@ -6251,16 +6339,13 @@ ionic.views.Slider = ionic.views.View.inherit({
     }
 
     // Public API
+    this.update = function() {
+      setTimeout(setup);
+    };
     this.setup = function() {
       setup();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slide
-     * @param {number} to The index to slide to.
-     * @param {number=} speed The number of milliseconds for the change to take.
-     */
     this.slide = function(to, speed) {
       // cancel slideshow
       stop();
@@ -6268,23 +6353,13 @@ ionic.views.Slider = ionic.views.View.inherit({
       slide(to, speed);
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#prev
-     * @description Go to the previous slide. Wraps around if at the beginning.
-     */
-    this.prev = function() {
+    this.prev = this.previous = function() {
       // cancel slideshow
       stop();
 
       prev();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#next
-     * @description Go to the next slide. Wraps around if at the end.
-     */
     this.next = function() {
       // cancel slideshow
       stop();
@@ -6292,32 +6367,16 @@ ionic.views.Slider = ionic.views.View.inherit({
       next();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#stop
-     * @description Stop sliding. The slideBox will not move again until
-     * explicitly told to do so.
-     */
     this.stop = function() {
       // cancel slideshow
       stop();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#currentIndex
-     * @returns number The index of the current slide.
-     */
     this.currentIndex = function() {
       // return current index position
       return index;
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slidesCount
-     * @returns number The number of slides there are currently.
-     */
     this.slidesCount = function() {
       // return total number of slides
       return length;
@@ -6996,13 +7055,24 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
       };
     },
 
+    isOpenLeft: function() {
+      return this.getOpenAmount() > 0;
+    },
+
+    isOpenRight: function() {
+      return this.getOpenAmount() < 0;
+    },
+
     /**
      * Toggle the left menu to open 100%
      */
-    toggleLeft: function() {
-      this.content.enableAnimation();
+    toggleLeft: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount > 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount <= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(100);
@@ -7012,10 +7082,13 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
     /**
      * Toggle the right menu to open 100%
      */
-    toggleRight: function() {
-      this.content.enableAnimation();
+    toggleRight: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount < 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount >= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(-100);
@@ -7381,3 +7454,5 @@ ionic.controllers.TabBarController = ionic.controllers.ViewController.inherit({
 });
 
 })(window.ionic);
+
+})();
\ No newline at end of file
diff --git a/phonegap/www/styles/ionic.css b/phonegap/www/styles/ionic.css
index c34f04f..24f78d8 100644
--- a/phonegap/www/styles/ionic.css
+++ b/phonegap/www/styles/ionic.css
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -16,7 +16,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -26,7 +26,7 @@
  *
  */
 /*!
-  Ionicons, v#{$ionicons-version}
+  Ionicons, v1.4.1
   Created by Ben Sperry for the Ionic Framework, http://ionicons.com/
   https://twitter.com/benjsperry  https://twitter.com/ionicframework
   MIT License: https://github.com/driftyco/ionicons
@@ -1686,11 +1686,11 @@
  * --------------------------------------------------
  * Adapted from normalize.css and some reset.css. We don't care even one
  * bit about old IE, so we don't need any hacks for that in here.
- * 
+ *
  * There are probably other things we could remove here, as well.
  *
  * normalize.css v2.1.2 | MIT License | git.io/normalize
- 
+
  * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)
  * http://cssreset.com
  */
@@ -2116,6 +2116,9 @@ body.grade-b, body.grade-c {
   text-align: center;
   font-size: 30px; }
   .ionic-refresher-content .icon-pulling {
+    -webkit-animation-name: refresh-spin-back;
+    -moz-animation-name: refresh-spin-back;
+    animation-name: refresh-spin-back;
     -webkit-animation-duration: 200ms;
     -moz-animation-duration: 200ms;
     animation-duration: 200ms;
@@ -2140,6 +2143,20 @@ body.grade-b, body.grade-c {
   100% {
     -webkit-transform: rotate(-180deg); } }
 
+@keyframes refresh-spin-back {
+  0% {
+    transform: rotate(-180deg); }
+
+  100% {
+    transform: rotate(0); } }
+
+@-webkit-keyframes refresh-spin-back {
+  0% {
+    -webkit-transform: rotate(-180deg); }
+
+  100% {
+    -webkit-transform: rotate(0); } }
+
 .scroll-refresher.active .icon-pulling {
   display: block; }
 .scroll-refresher.active .icon-refreshing {
@@ -2193,6 +2210,12 @@ ion-infinite-scroll.active .scroll-infinite {
 .has-subheader {
   top: 88px; }
 
+.has-tabs-top {
+  top: 93px; }
+
+.has-header.has-subheader.has-tabs-top {
+  top: 137px; }
+
 .has-footer {
   bottom: 44px; }
 
@@ -2466,64 +2489,64 @@ a.subdued {
       padding-left: 8px;
       height: 28px; }
   .bar.bar-light {
-    background-color: white;
     border-color: #ddd;
+    background-color: white;
     background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
     color: #444; }
     .bar.bar-light .title {
       color: #444; }
   .bar.bar-stable {
-    background-color: #f8f8f8;
     border-color: #b2b2b2;
+    background-color: #f8f8f8;
     background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
     color: #444; }
     .bar.bar-stable .title {
       color: #444; }
   .bar.bar-positive {
-    background-color: #4a87ee;
     border-color: #145fd7;
+    background-color: #4a87ee;
     background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
     color: #fff; }
     .bar.bar-positive .title {
       color: #fff; }
   .bar.bar-calm {
-    background-color: #43cee6;
     border-color: #1aacc3;
+    background-color: #43cee6;
     background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
     color: #fff; }
     .bar.bar-calm .title {
       color: #fff; }
   .bar.bar-assertive {
-    background-color: #ef4e3a;
     border-color: #cc2311;
+    background-color: #ef4e3a;
     background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
     color: #fff; }
     .bar.bar-assertive .title {
       color: #fff; }
   .bar.bar-balanced {
-    background-color: #66cc33;
     border-color: #498f24;
+    background-color: #66cc33;
     background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
     color: #fff; }
     .bar.bar-balanced .title {
       color: #fff; }
   .bar.bar-energized {
-    background-color: #f0b840;
     border-color: #d39211;
+    background-color: #f0b840;
     background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
     color: #fff; }
     .bar.bar-energized .title {
       color: #fff; }
   .bar.bar-royal {
-    background-color: #8a6de9;
     border-color: #552bdf;
+    background-color: #8a6de9;
     background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
     color: #fff; }
     .bar.bar-royal .title {
       color: #fff; }
   .bar.bar-dark {
-    background-color: #444444;
     border-color: #111;
+    background-color: #444444;
     background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
     color: #fff; }
     .bar.bar-dark .title {
@@ -2580,200 +2603,200 @@ a.subdued {
     line-height: 32px; }
   .bar .button-bar + .button, .bar .button + .button-bar {
     margin-left: 5px; }
-  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .title + .buttons {
+  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .buttons.pull-right, .bar .title + .buttons {
     position: absolute;
     top: 5px;
     right: 5px;
     bottom: 5px; }
 
 .bar-light .button {
-  color: #444;
+  border-color: #ddd;
   background-color: white;
-  border-color: #ddd; }
+  color: #444; }
   .bar-light .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-light .button.active {
+    border-color: #ccc;
     background-color: #fafafa;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #ccc; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-light .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-light .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-stable .button {
-  color: #444;
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
-  border-color: #b2b2b2; }
+  color: #444; }
   .bar-stable .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-stable .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-stable .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-stable .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-positive .button {
-  color: #fff;
+  border-color: #145fd7;
   background-color: #4a87ee;
-  border-color: #145fd7; }
+  color: #fff; }
   .bar-positive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-positive .button.active {
+    border-color: #145fd7;
     background-color: #145fd7;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #145fd7; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-positive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-positive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-calm .button {
-  color: #fff;
+  border-color: #1aacc3;
   background-color: #43cee6;
-  border-color: #1aacc3; }
+  color: #fff; }
   .bar-calm .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-calm .button.active {
+    border-color: #1aacc3;
     background-color: #1aacc3;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #1aacc3; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-calm .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-calm .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-assertive .button {
-  color: #fff;
+  border-color: #cc2311;
   background-color: #ef4e3a;
-  border-color: #cc2311; }
+  color: #fff; }
   .bar-assertive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-assertive .button.active {
+    border-color: #cc2311;
     background-color: #cc2311;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #cc2311; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-assertive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-assertive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-balanced .button {
-  color: #fff;
+  border-color: #498f24;
   background-color: #66cc33;
-  border-color: #498f24; }
+  color: #fff; }
   .bar-balanced .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-balanced .button.active {
+    border-color: #498f24;
     background-color: #498f24;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #498f24; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-balanced .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-balanced .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-energized .button {
-  color: #fff;
+  border-color: #d39211;
   background-color: #f0b840;
-  border-color: #d39211; }
+  color: #fff; }
   .bar-energized .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-energized .button.active {
+    border-color: #d39211;
     background-color: #d39211;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #d39211; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-energized .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-energized .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-royal .button {
-  color: #fff;
+  border-color: #552bdf;
   background-color: #8a6de9;
-  border-color: #552bdf; }
+  color: #fff; }
   .bar-royal .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-royal .button.active {
+    border-color: #552bdf;
     background-color: #552bdf;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #552bdf; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-royal .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-royal .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-dark .button {
-  color: #fff;
+  border-color: #111;
   background-color: #444444;
-  border-color: #111; }
+  color: #fff; }
   .bar-dark .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-dark .button.active {
+    border-color: #000;
     background-color: #262626;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #000; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-dark .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-dark .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-header {
   top: 0;
@@ -2823,9 +2846,9 @@ a.subdued {
   -webkit-transform: translate3d(0, 0, 0);
   -moz-transform: translate3d(0, 0, 0);
   transform: translate3d(0, 0, 0);
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
   background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-  border-color: #b2b2b2;
   color: #444;
   position: absolute;
   bottom: 0;
@@ -2839,78 +2862,6 @@ a.subdued {
   .tabs .tab-item .badge {
     background-color: #444;
     color: #f8f8f8; }
-  .tabs.tabs-light {
-    background-color: #fff;
-    background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
-    border-color: #ddd;
-    color: #444; }
-    .tabs.tabs-light .tab-item .badge {
-      background-color: #444;
-      color: #fff; }
-  .tabs.tabs-stable {
-    background-color: #f8f8f8;
-    background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-    border-color: #b2b2b2;
-    color: #444; }
-    .tabs.tabs-stable .tab-item .badge {
-      background-color: #444;
-      color: #f8f8f8; }
-  .tabs.tabs-positive {
-    background-color: #4a87ee;
-    background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
-    border-color: #145fd7;
-    color: #fff; }
-    .tabs.tabs-positive .tab-item .badge {
-      background-color: #fff;
-      color: #4a87ee; }
-  .tabs.tabs-calm {
-    background-color: #43cee6;
-    background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
-    border-color: #1aacc3;
-    color: #fff; }
-    .tabs.tabs-calm .tab-item .badge {
-      background-color: #fff;
-      color: #43cee6; }
-  .tabs.tabs-assertive {
-    background-color: #ef4e3a;
-    background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
-    border-color: #cc2311;
-    color: #fff; }
-    .tabs.tabs-assertive .tab-item .badge {
-      background-color: #fff;
-      color: #ef4e3a; }
-  .tabs.tabs-balanced {
-    background-color: #66cc33;
-    background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
-    border-color: #498f24;
-    color: #fff; }
-    .tabs.tabs-balanced .tab-item .badge {
-      background-color: #fff;
-      color: #66cc33; }
-  .tabs.tabs-energized {
-    background-color: #f0b840;
-    background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
-    border-color: #d39211;
-    color: #fff; }
-    .tabs.tabs-energized .tab-item .badge {
-      background-color: #fff;
-      color: #f0b840; }
-  .tabs.tabs-royal {
-    background-color: #8a6de9;
-    background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
-    border-color: #552bdf;
-    color: #fff; }
-    .tabs.tabs-royal .tab-item .badge {
-      background-color: #fff;
-      color: #8a6de9; }
-  .tabs.tabs-dark {
-    background-color: #444;
-    background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
-    border-color: #111;
-    color: #fff; }
-    .tabs.tabs-dark .tab-item .badge {
-      background-color: #fff;
-      color: #444; }
   @media (min--moz-device-pixel-ratio: 1.5), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
     .tabs {
       padding-top: 2px;
@@ -2920,7 +2871,90 @@ a.subdued {
       background-size: 100% 1px;
       background-repeat: no-repeat; } }
 
-.tabs-top {
+/* Allow parent element of tabs to define color, or just the tab itself */
+.tabs-light > .tabs, .tabs.tabs-light {
+  border-color: #ddd;
+  background-color: #fff;
+  background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
+  color: #444; }
+  .tabs-light > .tabs .tab-item .badge, .tabs.tabs-light .tab-item .badge {
+    background-color: #444;
+    color: #fff; }
+
+.tabs-stable > .tabs, .tabs.tabs-stable {
+  border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
+  color: #444; }
+  .tabs-stable > .tabs .tab-item .badge, .tabs.tabs-stable .tab-item .badge {
+    background-color: #444;
+    color: #f8f8f8; }
+
+.tabs-positive > .tabs, .tabs.tabs-positive {
+  border-color: #145fd7;
+  background-color: #4a87ee;
+  background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
+  color: #fff; }
+  .tabs-positive > .tabs .tab-item .badge, .tabs.tabs-positive .tab-item .badge {
+    background-color: #fff;
+    color: #4a87ee; }
+
+.tabs-calm > .tabs, .tabs.tabs-calm {
+  border-color: #1aacc3;
+  background-color: #43cee6;
+  background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
+  color: #fff; }
+  .tabs-calm > .tabs .tab-item .badge, .tabs.tabs-calm .tab-item .badge {
+    background-color: #fff;
+    color: #43cee6; }
+
+.tabs-assertive > .tabs, .tabs.tabs-assertive {
+  border-color: #cc2311;
+  background-color: #ef4e3a;
+  background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
+  color: #fff; }
+  .tabs-assertive > .tabs .tab-item .badge, .tabs.tabs-assertive .tab-item .badge {
+    background-color: #fff;
+    color: #ef4e3a; }
+
+.tabs-balanced > .tabs, .tabs.tabs-balanced {
+  border-color: #498f24;
+  background-color: #66cc33;
+  background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
+  color: #fff; }
+  .tabs-balanced > .tabs .tab-item .badge, .tabs.tabs-balanced .tab-item .badge {
+    background-color: #fff;
+    color: #66cc33; }
+
+.tabs-energized > .tabs, .tabs.tabs-energized {
+  border-color: #d39211;
+  background-color: #f0b840;
+  background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
+  color: #fff; }
+  .tabs-energized > .tabs .tab-item .badge, .tabs.tabs-energized .tab-item .badge {
+    background-color: #fff;
+    color: #f0b840; }
+
+.tabs-royal > .tabs, .tabs.tabs-royal {
+  border-color: #552bdf;
+  background-color: #8a6de9;
+  background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
+  color: #fff; }
+  .tabs-royal > .tabs .tab-item .badge, .tabs.tabs-royal .tab-item .badge {
+    background-color: #fff;
+    color: #8a6de9; }
+
+.tabs-dark > .tabs, .tabs.tabs-dark {
+  border-color: #111;
+  background-color: #444;
+  background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
+  color: #fff; }
+  .tabs-dark > .tabs .tab-item .badge, .tabs.tabs-dark .tab-item .badge {
+    background-color: #fff;
+    color: #444; }
+
+/* Allow parent element to have tabs-top */
+.tabs-top > .tabs, .tabs.tabs-top {
   top: 44px;
   padding-top: 0;
   padding-bottom: 2px;
@@ -2949,6 +2983,9 @@ a.subdued {
   .tab-item:hover {
     cursor: pointer; }
 
+.tabs-item-hide, .tabs-item-hide > .tabs {
+  display: none; }
+
 .tabs-icon-top .tab-item, .tabs-icon-bottom .tab-item {
   font-size: 12px;
   line-height: 14px; }
@@ -2992,25 +3029,25 @@ a.subdued {
 
 /* Navigational tab */
 /* Active state for tab */
-.tab-item.active {
+.tab-item.tab-item-active {
   opacity: 1; }
-  .tab-item.active.tab-item-light {
+  .tab-item.tab-item-active.tab-item-light {
     color: #fff; }
-  .tab-item.active.tab-item-stable {
+  .tab-item.tab-item-active.tab-item-stable {
     color: #f8f8f8; }
-  .tab-item.active.tab-item-positive {
+  .tab-item.tab-item-active.tab-item-positive {
     color: #4a87ee; }
-  .tab-item.active.tab-item-calm {
+  .tab-item.tab-item-active.tab-item-calm {
     color: #43cee6; }
-  .tab-item.active.tab-item-assertive {
+  .tab-item.tab-item-active.tab-item-assertive {
     color: #ef4e3a; }
-  .tab-item.active.tab-item-balanced {
+  .tab-item.tab-item-active.tab-item-balanced {
     color: #66cc33; }
-  .tab-item.active.tab-item-energized {
+  .tab-item.tab-item-active.tab-item-energized {
     color: #f0b840; }
-  .tab-item.active.tab-item-royal {
+  .tab-item.tab-item-active.tab-item-royal {
     color: #8a6de9; }
-  .tab-item.active.tab-item-dark {
+  .tab-item.tab-item-active.tab-item-dark {
     color: #444; }
 
 .item.tabs {
@@ -3103,7 +3140,6 @@ a.subdued {
     left: 20%;
     overflow: visible;
     min-height: 240px;
-    max-width: 768px;
     width: 60%; }
   .modal.ng-leave-active {
     bottom: 0; } }
@@ -3186,6 +3222,13 @@ a.subdued {
   .popup-buttons .button:last-child {
     margin-right: 0px; }
 
+.popup-open {
+  pointer-events: none; }
+  .popup-open.modal-open .modal {
+    pointer-events: none; }
+  .popup-open .popup-backdrop, .popup-open .popup {
+    pointer-events: auto; }
+
 .popup-backdrop {
   -webkit-animation-name: fadeIn;
   -moz-animation-name: fadeIn;
@@ -3208,6 +3251,9 @@ a.subdued {
   background-color: rgba(0, 0, 0, 0.4); }
 
 .loading-backdrop {
+  -webkit-transition: visibility 0s linear 0.3s;
+  -moz-transition: visibility 0s linear 0.3s;
+  transition: visibility 0s linear 0.3s;
   position: fixed;
   top: 0;
   left: 0;
@@ -3220,13 +3266,8 @@ a.subdued {
     -moz-transition-delay: 0s;
     transition-delay: 0s;
     visibility: visible; }
-
-.loading-backdrop {
-  -webkit-transition: visibility 0s linear 0.3s;
-  -moz-transition: visibility 0s linear 0.3s;
-  transition: visibility 0s linear 0.3s; }
-  .loading-backdrop.active {
-    background-color: rgba(0, 0, 0, 0.7); }
+    .loading-backdrop.active.show-backdrop {
+      background-color: rgba(0, 0, 0, 0.7); }
 
 .loading {
   position: fixed;
@@ -3247,12 +3288,9 @@ a.subdued {
  * --------------------------------------------------
  */
 .item {
-  color: #444;
-  background-color: #fff;
   border-color: #ddd;
-  -webkit-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  -moz-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
+  background-color: #fff;
+  color: #444;
   position: relative;
   z-index: 2;
   display: block;
@@ -3288,77 +3326,81 @@ a.subdued {
     position: absolute;
     top: 15px;
     right: 35px; }
+  .item.item-button-right .badge {
+    right: 65px; }
   .item.item-divider .badge {
     top: 7.5px; }
   .item .badge + .badge {
     margin-right: 5px; }
   .item.item-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
   .item.item-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
   .item.item-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
   .item.item-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
   .item.item-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
   .item.item-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
   .item.item-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
   .item.item-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
   .item.item-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
+  .item[ng-click]:hover {
+    cursor: pointer; }
 
 .item.active:not(.item-divider):not(.item-input):not(.item-input-inset), .item-complex.active .item-content {
-  background-color: #D9D9D9;
-  border-color: #ccc; }
+  border-color: #ccc;
+  background-color: #D9D9D9; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-light, .item-complex.active .item-content.item-light {
-    background-color: #fafafa;
-    border-color: #ccc; }
+    border-color: #ccc;
+    background-color: #fafafa; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-stable, .item-complex.active .item-content.item-stable {
-    background-color: #e5e5e5;
-    border-color: #a2a2a2; }
+    border-color: #a2a2a2;
+    background-color: #e5e5e5; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-positive, .item-complex.active .item-content.item-positive {
-    background-color: #145fd7;
-    border-color: #145fd7; }
+    border-color: #145fd7;
+    background-color: #145fd7; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-calm, .item-complex.active .item-content.item-calm {
-    background-color: #1aacc3;
-    border-color: #1aacc3; }
+    border-color: #1aacc3;
+    background-color: #1aacc3; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-assertive, .item-complex.active .item-content.item-assertive {
-    background-color: #cc2311;
-    border-color: #cc2311; }
+    border-color: #cc2311;
+    background-color: #cc2311; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-balanced, .item-complex.active .item-content.item-balanced {
-    background-color: #498f24;
-    border-color: #498f24; }
+    border-color: #498f24;
+    background-color: #498f24; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-energized, .item-complex.active .item-content.item-energized {
-    background-color: #d39211;
-    border-color: #d39211; }
+    border-color: #d39211;
+    background-color: #d39211; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-royal, .item-complex.active .item-content.item-royal {
-    background-color: #552bdf;
-    border-color: #552bdf; }
+    border-color: #552bdf;
+    background-color: #552bdf; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-dark, .item-complex.active .item-content.item-dark {
-    background-color: #262626;
-    border-color: #000; }
+    border-color: #000;
+    background-color: #262626; }
 
 .item, .item h1, .item h2, .item h3, .item h4, .item h5, .item h6, .item p, .item-content, .item-content h1, .item-content h2, .item-content h3, .item-content h4, .item-content h5, .item-content h6, .item-content p {
   overflow: hidden;
@@ -3384,14 +3426,6 @@ a.item {
   padding: 0; }
 
 .item-complex .item-content, .item-radio .item-content {
-  /**
-   * The content area of a complex list item. This area can
-   * Slide left and right and be dragged to support different
-   * UI interactions.
-   */
-  -webkit-transition: all 0.1s ease-in-out;
-  -moz-transition: all 0.1s ease-in-out;
-  transition: all 0.1s ease-in-out;
   position: relative;
   z-index: 2;
   padding: 15px 40px 15px 15px;
@@ -3545,40 +3579,38 @@ a.item-content {
  * By default, if an .item is created out of an <a> or <button>
  * then a arrow will be added to the right side of the item.
  */
-a.item, button.item, .item a[href].item-content, .item[ng-click] a.item-content {
+a.item, button.item, .item[href] .item-content, .item[ng-click] .item-content {
   padding-right: 40px; }
+  a.item:after, button.item:after, .item[href] .item-content:after, .item[ng-click] .item-content:after {
+    display: -webkit-box;
+    display: -webkit-flex;
+    display: -moz-box;
+    display: -moz-flex;
+    display: -ms-flexbox;
+    display: flex;
+    -webkit-box-align: center;
+    -ms-flex-align: center;
+    -webkit-align-items: center;
+    -moz-align-items: center;
+    align-items: center;
+    -webkit-font-smoothing: antialiased;
+    font-smoothing: antialiased;
+    position: absolute;
+    top: 0;
+    right: 11px;
+    height: 100%;
+    color: #ccc;
+    content: "\f125";
+    text-transform: none;
+    font-weight: normal;
+    font-style: normal;
+    font-variant: normal;
+    font-size: 16px;
+    font-family: 'Ionicons';
+    line-height: 1;
+    speak: none; }
 
-a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-click] a.item-content:after {
-  /* By default, both <a> and <button> have right side arrow icons */
-  display: -webkit-box;
-  display: -webkit-flex;
-  display: -moz-box;
-  display: -moz-flex;
-  display: -ms-flexbox;
-  display: flex;
-  -webkit-box-align: center;
-  -ms-flex-align: center;
-  -webkit-align-items: center;
-  -moz-align-items: center;
-  align-items: center;
-  -webkit-font-smoothing: antialiased;
-  font-smoothing: antialiased;
-  position: absolute;
-  top: 0;
-  right: 11px;
-  height: 100%;
-  color: #ccc;
-  content: "\f125";
-  text-transform: none;
-  font-weight: normal;
-  font-style: normal;
-  font-variant: normal;
-  font-size: 16px;
-  font-family: 'Ionicons';
-  line-height: 1;
-  speak: none; }
-
-.grade-b a.item:after, .grade-b button.item:after, .grade-b .item a[href].item-content:after, .grade-b .item[ng-click] a.item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item a[href].item-content:after, .grade-c .item[ng-click] a.item-content:after {
+.grade-b a.item:after, .grade-b button.item:after, .grade-b .item[href] .item-content:after, .grade-b .item[ng-click] .item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item[href] .item-content:after, .grade-c .item[ng-click] .item-content:after {
   -webkit-font-smoothing: none;
   font-smoothing: none;
   content: '>';
@@ -3587,10 +3619,10 @@ a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-clic
 a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after, button.item-button-right:after, .item a.item-content:after {
   display: none; }
 
-.item-avatar {
+.item-avatar, .item-avatar .item-content {
   padding-left: 70px;
   min-height: 70px; }
-  .item-avatar img:first-child, .item-avatar .item-img {
+  .item-avatar > img:first-child, .item-avatar .item-image, .item-avatar .item-content > img:first-child, .item-avatar .item-content .item-image {
     position: absolute;
     top: 15px;
     left: 15px;
@@ -3602,7 +3634,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .item-thumbnail-left, .item-thumbnail-left .item-content {
   padding-left: 105px;
   min-height: 100px; }
-  .item-thumbnail-left > img:first-child, .item-thumbnail-left > .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content > .item-image {
+  .item-thumbnail-left > img:first-child, .item-thumbnail-left .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content .item-image {
     position: absolute;
     top: 10px;
     left: 10px;
@@ -3610,13 +3642,13 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-avatar.item-complex, .item-thumbnail-left.item-complex {
   padding-left: 0; }
 
 .item-thumbnail-right, .item-thumbnail-right .item-content {
   padding-right: 105px;
   min-height: 100px; }
-  .item-thumbnail-right > img:first-child, .item-thumbnail-right > .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content > .item-image {
+  .item-thumbnail-right > img:first-child, .item-thumbnail-right .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content .item-image {
     position: absolute;
     top: 10px;
     right: 10px;
@@ -3624,7 +3656,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-thumbnail-right.item-complex {
   padding-right: 0; }
 
 .item-image {
@@ -3656,32 +3688,58 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   color: #aaa;
   font-size: 14px; }
 
-.item-reordering {
-  position: absolute;
-  z-index: 9;
-  width: 100%; }
+.item-left-editable .item-content, .item-right-editable .item-content {
+  -webkit-transition-duration: 250ms;
+  -moz-transition-duration: 250ms;
+  transition-duration: 250ms;
+  -webkit-transition-timing-function: ease-in-out;
+  -moz-transition-timing-function: ease-in-out;
+  transition-timing-function: ease-in-out;
+  -webkit-transition-property: none;
+  -moz-transition-property: none;
+  transition-property: none; }
+
+.item-left-editable .item-content {
+  -webkit-transition-property: -webkit-transform;
+  -moz-transition-property: -moz-transform;
+  transition-property: transform; }
+
+.item-right-editable .item-content {
+  -webkit-transition-property: margin-right;
+  -moz-transition-property: margin-right;
+  transition-property: margin-right; }
+
+.item-left-editable.item-right-editable .item-content {
+  -webkit-transition-property: -webkit-transform, margin-right;
+  -moz-transition-property: -moz-transform, margin-right;
+  transition-property: transform, margin-right; }
+
+.list-left-editing .item-left-editable .item-content, .item-left-editing.item-left-editable .item-content {
+  -webkit-transform: translate3d(50px, 0, 0);
+  -moz-transform: translate3d(50px, 0, 0);
+  transform: translate3d(50px, 0, 0); }
 
-.item-placeholder {
-  opacity: 0.7; }
+.list-right-editing .item-right-editable .item-content, .item-right-editing.item-right-editable .item-content {
+  margin-right: 50px; }
 
-/**
- * The left-side edit area of a complex list item. This area shows
- * whe the list item is in edit mode.
- */
-.item-edit {
-  -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
+.item-left-edit {
+  -webkit-transition: all ease-in-out 250ms;
+  -moz-transition: all ease-in-out 250ms;
+  transition: all ease-in-out 250ms;
+  -webkit-transform: translate3d(-42px, 0, 0);
+  -moz-transform: translate3d(-42px, 0, 0);
+  transform: translate3d(-42px, 0, 0);
   position: absolute;
   top: 0;
-  left: 8px;
+  left: 0;
   z-index: 0;
-  width: 48px;
+  width: 50px;
   height: 100%;
-  line-height: 100%; }
-  .item-edit .button {
+  line-height: 100%;
+  opacity: 0; }
+  .item-left-edit .button {
     height: 100%; }
-    .item-edit .button.icon {
+    .item-left-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3695,30 +3753,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       align-items: center;
       position: absolute;
       top: 0;
-      left: 0;
-      height: 100%;
-      color: #ef4e3a;
-      font-size: 24px; }
-  .item-edit.ng-enter {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: -48px;
-    opacity: 0; }
-  .item-edit.ng-enter-active {
-    left: 8px;
-    opacity: 1; }
-  .item-edit.ng-leave {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: 0px;
-    opacity: 1; }
-  .item-edit.ng-leave-active {
-    left: -48px;
-    opacity: 0; }
+      height: 100%; }
+
+.list-left-editing .item-left-edit, .item-left-editing .item-left-edit {
+  -webkit-transform: translate3d(8px, 0, 0);
+  -moz-transform: translate3d(8px, 0, 0);
+  transform: translate3d(8px, 0, 0);
+  opacity: 1; }
+
+.item-delete .button.icon {
+  color: #ef4e3a;
+  font-size: 24px; }
+  .item-delete .button.icon:hover {
+    opacity: 0.7; }
 
-.item-drag {
+.item-right-edit {
   position: absolute;
   top: 0;
   right: 0;
@@ -3726,10 +3775,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   width: 50px;
   height: 100%;
   background: inherit; }
-  .item-drag .button {
-    min-width: 42px;
+  .item-right-edit .button {
+    min-width: 50px;
     height: 100%; }
-    .item-drag .button.icon:before {
+    .item-right-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3746,6 +3795,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       height: 100%;
       font-size: 32px; }
 
+.item-reorder .button.icon {
+  color: #444;
+  font-size: 32px; }
+
+.item-reordering {
+  position: absolute;
+  z-index: 9;
+  width: 100%;
+  box-shadow: 0px 0px 10px 0px #aaa; }
+  .item-reordering .item-reorder {
+    z-index: 1; }
+
+.item-placeholder {
+  opacity: 0.7; }
+
 /**
  * The hidden right-side buttons that can be exposed under a list item
  * with dragging.
@@ -3775,25 +3839,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   padding-left: 0;
   margin-bottom: 20px; }
 
-/* If a list is the last item in a container, don't add margin-bottom */
 .list:last-child {
   margin-bottom: 0px; }
 
 /**
- * List editing styles. These trigger when the entire list goes into
- * "edit mode" or reordering list items
- */
-.list-editing .item-content {
-  -webkit-transform: translate3d(50px, 0, 0);
-  -moz-transform: translate3d(50px, 0, 0);
-  transform: translate3d(50px, 0, 0); }
-
-.list-reordering .item-content {
-  margin-right: 50px; }
-.list-reordering .item-drag {
-  z-index: 1; }
-
-/**
  * List Header
  * --------------------------------------------------
  */
@@ -3857,6 +3906,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .badge {
   background-color: transparent;
   color: #AAAAAA;
+  z-index: 1;
   display: inline-block;
   padding: 3px 8px;
   min-width: 10px;
@@ -3908,19 +3958,19 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
  */
 .slider {
   position: relative;
-  overflow: hidden;
-  visibility: hidden; }
+  visibility: hidden;
+  overflow: hidden; }
 
 .slider-slides {
   position: relative;
   height: 100%; }
 
 .slider-slide {
-  display: block;
   position: relative;
+  display: block;
+  float: left;
   width: 100%;
   height: 100%;
-  float: left;
   vertical-align: top; }
 
 .slider-slide-image > img {
@@ -3929,9 +3979,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .slider-pager {
   position: absolute;
   bottom: 20px;
+  z-index: 1;
   width: 100%;
-  text-align: center;
-  z-index: 1; }
+  height: 15px;
+  text-align: center; }
   .slider-pager .slider-pager-page {
     display: inline-block;
     margin: 0px 3px;
@@ -3940,10 +3991,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     text-decoration: none;
     opacity: 0.3; }
     .slider-pager .slider-pager-page.active {
-      opacity: 1;
       -webkit-transition: opacity 0.4s ease-in;
       -moz-transition: opacity 0.4s ease-in;
-      transition: opacity 0.4s ease-in; }
+      transition: opacity 0.4s ease-in;
+      opacity: 1; }
 
 /**
  * Split Pane
@@ -4008,8 +4059,8 @@ legend {
     font-size: 1.07143; }
 
 label, input, button, select, textarea {
-  font-size: 14px;
   font-weight: normal;
+  font-size: 14px;
   line-height: 1.42857; }
 
 input, button, select, textarea {
@@ -4029,7 +4080,7 @@ input, button, select, textarea {
   align-items: center;
   position: relative;
   overflow: hidden;
-  padding: 6px 8px 5px; }
+  padding: 6px 0 5px 8px; }
   .item-input input {
     -webkit-border-radius: 0;
     -moz-border-radius: 0;
@@ -4044,6 +4095,7 @@ input, button, select, textarea {
     -moz-appearance: none;
     appearance: none;
     margin: 0;
+    padding-right: 24px;
     background-color: transparent; }
   .item-input .button .icon {
     -webkit-box-flex: 0;
@@ -4619,13 +4671,22 @@ input[type="range"] {
   padding-left: 0; }
 
 /**
+ * Progress
+ * --------------------------------------------------
+ */
+progress {
+  display: block;
+  margin: 15px auto;
+  width: 100%; }
+
+/**
  * Buttons
  * --------------------------------------------------
  */
 .button {
-  color: #444;
-  background-color: #f8f8f8;
   border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  color: #444;
   position: relative;
   display: inline-block;
   margin: 0;
@@ -4645,9 +4706,9 @@ input[type="range"] {
     color: #444;
     text-decoration: none; }
   .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .button:after {
     position: absolute;
     top: -6px;
@@ -4675,248 +4736,248 @@ input[type="range"] {
     margin-top: 10px;
     margin-bottom: 10px; }
   .button.button-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
     .button.button-light:hover {
       color: #444;
       text-decoration: none; }
     .button.button-light.active {
+      border-color: #ccc;
       background-color: #fafafa;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #ccc; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-light.button-clear {
-      color: #ddd;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-light.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ddd; }
+    .button.button-light.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-light.button-outline {
-      background: transparent;
       border-color: #ddd;
+      background: transparent;
       color: #ddd; }
       .button.button-light.button-outline.active {
         background-color: #ddd;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
     .button.button-stable:hover {
       color: #444;
       text-decoration: none; }
     .button.button-stable.active {
+      border-color: #a2a2a2;
       background-color: #e5e5e5;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #a2a2a2; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-stable.button-clear {
-      color: #b2b2b2;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-stable.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #b2b2b2; }
+    .button.button-stable.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-stable.button-outline {
-      background: transparent;
       border-color: #b2b2b2;
+      background: transparent;
       color: #b2b2b2; }
       .button.button-stable.button-outline.active {
         background-color: #b2b2b2;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
     .button.button-positive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-positive.active {
+      border-color: #145fd7;
       background-color: #145fd7;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #145fd7; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-positive.button-clear {
-      color: #4a87ee;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-positive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #4a87ee; }
+    .button.button-positive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-positive.button-outline {
-      background: transparent;
       border-color: #4a87ee;
+      background: transparent;
       color: #4a87ee; }
       .button.button-positive.button-outline.active {
         background-color: #4a87ee;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
     .button.button-calm:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-calm.active {
+      border-color: #1aacc3;
       background-color: #1aacc3;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #1aacc3; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-calm.button-clear {
-      color: #43cee6;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-calm.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #43cee6; }
+    .button.button-calm.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-calm.button-outline {
-      background: transparent;
       border-color: #43cee6;
+      background: transparent;
       color: #43cee6; }
       .button.button-calm.button-outline.active {
         background-color: #43cee6;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
     .button.button-assertive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-assertive.active {
+      border-color: #cc2311;
       background-color: #cc2311;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #cc2311; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-assertive.button-clear {
-      color: #ef4e3a;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-assertive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ef4e3a; }
+    .button.button-assertive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-assertive.button-outline {
-      background: transparent;
       border-color: #ef4e3a;
+      background: transparent;
       color: #ef4e3a; }
       .button.button-assertive.button-outline.active {
         background-color: #ef4e3a;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
     .button.button-balanced:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-balanced.active {
+      border-color: #498f24;
       background-color: #498f24;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #498f24; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-balanced.button-clear {
-      color: #66cc33;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-balanced.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #66cc33; }
+    .button.button-balanced.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-balanced.button-outline {
-      background: transparent;
       border-color: #66cc33;
+      background: transparent;
       color: #66cc33; }
       .button.button-balanced.button-outline.active {
         background-color: #66cc33;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
     .button.button-energized:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-energized.active {
+      border-color: #d39211;
       background-color: #d39211;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #d39211; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-energized.button-clear {
-      color: #f0b840;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-energized.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #f0b840; }
+    .button.button-energized.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-energized.button-outline {
-      background: transparent;
       border-color: #f0b840;
+      background: transparent;
       color: #f0b840; }
       .button.button-energized.button-outline.active {
         background-color: #f0b840;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
     .button.button-royal:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-royal.active {
+      border-color: #552bdf;
       background-color: #552bdf;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #552bdf; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-royal.button-clear {
-      color: #8a6de9;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-royal.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #8a6de9; }
+    .button.button-royal.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-royal.button-outline {
-      background: transparent;
       border-color: #8a6de9;
+      background: transparent;
       color: #8a6de9; }
       .button.button-royal.button-outline.active {
         background-color: #8a6de9;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
     .button.button-dark:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-dark.active {
+      border-color: #000;
       background-color: #262626;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #000; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-dark.button-clear {
-      color: #444;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-dark.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #444; }
+    .button.button-dark.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-dark.button-outline {
-      background: transparent;
       border-color: #444;
+      background: transparent;
       color: #444; }
       .button.button-dark.button-outline.active {
         background-color: #444;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
 
 .button-small {
   padding: 0 4px;
@@ -4965,13 +5026,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-clear.button-clear {
-    color: #b2b2b2;
-    background: none;
     border-color: transparent;
-    box-shadow: none; }
-  .button-clear.button-icon {
     background: none;
-    border-color: transparent; }
+    box-shadow: none;
+    color: #b2b2b2; }
+  .button-clear.button-icon {
+    border-color: transparent;
+    background: none; }
   .button-clear.active {
     opacity: 0.3; }
 
@@ -4982,13 +5043,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-outline.button-outline {
-    background: transparent;
     border-color: #b2b2b2;
+    background: transparent;
     color: #b2b2b2; }
     .button-outline.button-outline.active {
       background-color: #b2b2b2;
-      color: #fff;
-      box-shadow: none; }
+      box-shadow: none;
+      color: #fff; }
 
 .padding > .button.button-block:first-child {
   margin-top: 0; }
@@ -6009,9 +6070,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-sm .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-sm .col, .responsive-sm .col-10, .responsive-sm .col-20, .responsive-sm .col-25, .responsive-sm .col-33, .responsive-sm .col-34, .responsive-sm .col-50, .responsive-sm .col-66, .responsive-sm .col-67, .responsive-sm .col-75, .responsive-sm .col-80, .responsive-sm .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 767px) {
   .responsive-md {
@@ -6022,9 +6091,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-md .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-md .col, .responsive-md .col-10, .responsive-md .col-20, .responsive-md .col-25, .responsive-md .col-33, .responsive-md .col-34, .responsive-md .col-50, .responsive-md .col-66, .responsive-md .col-67, .responsive-md .col-75, .responsive-md .col-80, .responsive-md .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 1023px) {
   .responsive-lg {
@@ -6035,9 +6112,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-lg .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-lg .col, .responsive-lg .col-10, .responsive-lg .col-20, .responsive-lg .col-25, .responsive-lg .col-33, .responsive-lg .col-34, .responsive-lg .col-50, .responsive-lg .col-66, .responsive-lg .col-67, .responsive-lg .col-75, .responsive-lg .col-80, .responsive-lg .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 /**
  * Utility Classes
@@ -6062,9 +6147,9 @@ a.button {
 .invisible {
   visibility: hidden; }
 
-.hide-footer .bar-footer, .hide-footer .tabs {
+.footer-hide .bar-footer, .footer-hide .tabs {
   display: none; }
-.hide-footer .has-footer, .hide-footer .has-tabs {
+.footer-hide .has-footer, .footer-hide .has-tabs {
   bottom: 0; }
 
 .inline {
diff --git a/phonegap/www/styles/main.scss b/phonegap/www/styles/main.scss
index b239573..5cae25d 100644
--- a/phonegap/www/styles/main.scss
+++ b/phonegap/www/styles/main.scss
@@ -381,9 +381,10 @@ p {
 .tabs.tabs-dark {
   background-color: #222222;
 }
-.button.button-dark {
+.button.button-dark.button-icon {
   background-color: #222222;
 }
+
 /* END Dark Overrides */
 
 /* Bar Firetruck */
@@ -464,7 +465,6 @@ button.button-ghost {
 .has-header.has-page-title, .platform-android.platform-cordova .has-header.has-page-title, .platform-android.platform-cordova .bar-subheader.has-page-title {
   top: 107px;  
 }
-
 .platform-ios7.platform-cordova:not(.fullscreen) .has-header.has-page-title {
   top: 127px;
 }
diff --git a/phonegap/www/views/about.html b/phonegap/www/views/about.html
index 12b5476..e57adb0 100644
--- a/phonegap/www/views/about.html
+++ b/phonegap/www/views/about.html
@@ -1,4 +1,7 @@
 <ion-view right-buttons="rightButtons" title="{{logoTitle}}">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <ion-content padding="true" has-header="true" has-tabs="true">
     <div ng-include src="'views/loading.html'" data-ng-show="submitting"></div>
     <div>
diff --git a/phonegap/www/views/cab.html b/phonegap/www/views/cab.html
index fc7cd64..ab2cee7 100644
--- a/phonegap/www/views/cab.html
+++ b/phonegap/www/views/cab.html
@@ -1,4 +1,7 @@
 <ion-view title="{{logoTitle}}" right-buttons="rightButtons">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <div class="centered page-header-container has-header">
     <h5>Courtesy of</h5>
   </div>
diff --git a/phonegap/www/views/featured.html b/phonegap/www/views/featured.html
index f4fecc8..d8095b0 100644
--- a/phonegap/www/views/featured.html
+++ b/phonegap/www/views/featured.html
@@ -1,4 +1,7 @@
 <ion-view title="{{logoTitle}}" right-buttons="rightButtons" class="featured-content-view">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <div ng-include src="'views/loading.html'" data-ng-show="!dataLoaded"></div>
   <div class="centered featured-heading" data-ng-show="dataLoaded">
     <h5>Featured Venues</h5>
diff --git a/phonegap/www/views/search-choose-keywords.html b/phonegap/www/views/search-choose-keywords.html
index 9799184..4f11631 100644
--- a/phonegap/www/views/search-choose-keywords.html
+++ b/phonegap/www/views/search-choose-keywords.html
@@ -1,4 +1,7 @@
 <ion-view right-buttons="rightButtons" title="{{logoTitle}}">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <div ng-include src="'views/loading.html'" data-ng-show="!menuDataLoaded"></div>
   <div class="centered page-header-container has-header keywords-header">
     <h5>Refine your search by choosing up to 6 experiences</h5>
diff --git a/phonegap/www/views/search-choose-location.html b/phonegap/www/views/search-choose-location.html
index f9b03cf..ab19544 100644
--- a/phonegap/www/views/search-choose-location.html
+++ b/phonegap/www/views/search-choose-location.html
@@ -1,4 +1,7 @@
 <ion-view right-buttons="rightButtons" title="{{logoTitle}}">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <div ng-include src="'views/loading.html'" data-ng-show="!menuDataLoaded"></div>
   <div class="centered page-header-container has-header">
     <h5>Where do you want to go out?</h5>
diff --git a/phonegap/www/views/search-choose-venue-type.html b/phonegap/www/views/search-choose-venue-type.html
index bc30aa7..7bd495c 100644
--- a/phonegap/www/views/search-choose-venue-type.html
+++ b/phonegap/www/views/search-choose-venue-type.html
@@ -1,4 +1,7 @@
 <ion-view right-buttons="rightButtons" title="{{logoTitle}}">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <div ng-include src="'views/loading.html'" data-ng-show="!menuDataLoaded"></div>
   <div class="centered page-header-container has-header" data-ng-show="menuDataLoaded">
     <h5>Pick your mood</h5>
diff --git a/phonegap/www/views/search-results.html b/phonegap/www/views/search-results.html
index b8ec269..e493370 100644
--- a/phonegap/www/views/search-results.html
+++ b/phonegap/www/views/search-results.html
@@ -1,4 +1,7 @@
 <ion-view right-buttons="rightButtons" title="{{logoTitle}}">
+  <ion-nav-buttons side="right">
+    <button class="button button-icon button-dark icon-left ion-home" ng-click="goHome()"></button>
+  </ion-nav-buttons>
   <div ng-include src="'views/loading.html'" data-ng-show="contentLoading"></div>
   <ion-content padding="false" has-header="true" has-tabs="true" class="search-results-content" ng-show="!contentLoading">
     <div ng-if="noMatches" class="no-matches-message">
diff --git a/phonegap/platforms/android/assets/www/index.html b/phonegap/platforms/android/assets/www/index.html
index 5e01d4f..b9b791d 100644
--- a/phonegap/platforms/android/assets/www/index.html
+++ b/phonegap/platforms/android/assets/www/index.html
@@ -43,6 +43,7 @@
        // ga('send', 'pageview');
     </script>
 
+    <script src="scripts/fastclick.js"></script>
     <script src="scripts/ionic.js"></script>
     <script src="scripts/jquery.js"></script>
     <script src="scripts/angular.js"></script>
diff --git a/phonegap/platforms/android/assets/www/scripts/ionic-angular.js b/phonegap/platforms/android/assets/www/scripts/ionic-angular.js
index 0aba146..c8cdf25 100644
--- a/phonegap/platforms/android/assets/www/scripts/ionic-angular.js
+++ b/phonegap/platforms/android/assets/www/scripts/ionic-angular.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,6 +12,7 @@
  *
  */
 
+(function() {
 /**
  * Create a wrapping module to ease having to include too many
  * modules.
@@ -37,33 +38,25 @@ angular.module('ionic.service', [
   'ionic.decorator.location'
 ]);
 
-// UI specific services and delegates
-angular.module('ionic.ui.service', [
-  'ionic.ui.service.scrollDelegate',
-  'ionic.ui.service.slideBoxDelegate',
-  'ionic.ui.service.sideMenuDelegate',
-]);
-
 angular.module('ionic.ui', [
-                            'ionic.ui.content',
-                            'ionic.ui.scroll',
-                            'ionic.ui.tabs',
-                            'ionic.ui.viewState',
-                            'ionic.ui.header',
-                            'ionic.ui.sideMenu',
-                            'ionic.ui.slideBox',
-                            'ionic.ui.list',
-                            'ionic.ui.checkbox',
-                            'ionic.ui.toggle',
-                            'ionic.ui.radio',
-                            'ionic.ui.touch',
-                            'ionic.ui.popup'
-                           ]);
-
+    'ionic.ui.checkbox',
+    'ionic.ui.content',
+    'ionic.ui.header',
+    'ionic.ui.list',
+    'ionic.ui.navBar',
+    'ionic.ui.popup',
+    'ionic.ui.radio',
+    'ionic.ui.scroll',
+    'ionic.ui.sideMenu',
+    'ionic.ui.slideBox',
+    'ionic.ui.tabs',
+    'ionic.ui.toggle',
+    'ionic.ui.touch',
+    'ionic.ui.viewState'
+]);
 
 angular.module('ionic', [
     'ionic.service',
-    'ionic.ui.service',
     'ionic.ui',
 
     // Angular deps
@@ -127,6 +120,86 @@ angular.element.prototype.removeClass = function(cssClasses) {
   return this;
 };
 
+
+function delegateService(methodNames) {
+  return ['$log', function($log) {
+    var delegate = this;
+
+    var instances = this._instances = [];
+    this._registerInstance = function(instance, handle) {
+      handle || (handle = ionic.Utils.nextUid());
+
+      instance.$$delegateHandle = handle;
+      instances.push(instance);
+
+      return function deregister() {
+        var index = instances.indexOf(instance);
+        if (index !== -1) {
+          instances.splice(index, 1);
+        }
+      };
+    };
+
+    this.$getByHandle = function(handle) {
+      if (!handle) {
+        return delegate;
+      }
+      return new InstanceForHandle(handle);
+    };
+
+    /*
+     * Creates a new object that will have all the methodNames given,
+     * and call them on the given the controller instance matching given
+     * handle.
+     * The reason we don't just let $getByHandle return the controller instance
+     * itself is that the controller instance might not exist yet.
+     *
+     * We want people to be able to do
+     * `var instance = $ionicScrollDelegate.$getByHandle('foo')` on controller
+     * instantiation, but on controller instantiation a child directive
+     * may not have been compiled yet!
+     *
+     * So this is our way of solving this problem: we create an object
+     * that will only try to fetch the controller with given handle
+     * once the methods are actually called.
+     */
+    function InstanceForHandle(handle) {
+      this.handle = handle;
+    }
+    methodNames.forEach(function(methodName) {
+      InstanceForHandle.prototype[methodName] = function() {
+        var handle = this.handle;
+        var instancesToUse = instances.filter(function(instance) {
+          return instance.$$delegateHandle === handle;
+        });
+        if (!instancesToUse.length) {
+          return $log.warn(
+            'Delegate for handle "'+this.handle+'" could not find a',
+            'corresponding element with delegate-handle="'+this.handle+'"!',
+            methodName, 'was not called!');
+        }
+        return callMethod(instancesToUse, methodName, arguments);
+      };
+      delegate[methodName] = function() {
+        return callMethod(instances, methodName, arguments);
+      };
+
+      function callMethod(instancesToUse, methodName, args) {
+        var finalResult;
+        var result;
+        instancesToUse.forEach(function(instance, index) {
+          result = instance[methodName].apply(instance, args);
+          //Make it so the first result is the one returned
+          if (index === 0) {
+            finalResult = result;
+          }
+        });
+        return finalResult;
+      }
+    });
+  }];
+}
+
 angular.module('ionic.service.actionSheet', ['ionic.service.templateLoad', 'ionic.service.platform', 'ionic.ui.actionSheet', 'ngAnimate'])
 
 /**
@@ -405,6 +478,7 @@ angular.module('ionic.service.loading', ['ionic.ui.loading'])
      * @returns {object} A shown loader with the following methods:
      *  - `hide()` - Hides the loader.
      *  - `show()` - Shows the loader.
+     *  - `setContent(string)` - Sets the html content of the loader.
      */
     show: function(opts) {
       var defaults = {
@@ -452,7 +526,6 @@ angular.module('ionic.service.modal', ['ionic.service.templateLoad', 'ionic.serv
  * @ngdoc service
  * @name $ionicModal
  * @module ionic
- * @controller ionicModal
  * @description
  * The Modal is a content pane that can go over the user's main view
  * temporarily.  Usually used for making a choice or editing an item.
@@ -683,7 +756,6 @@ angular.module('ionic.service.platform', [])
  * @ngdoc service
  * @name $ionicPlatform
  * @module ionic
- * @group utilities
  * @description
  * An angular abstraction of {@link ionic.utility:ionic.Platform}.
  *
@@ -869,8 +941,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         console.log('Tapped!', res);
       }, function(err) {
         console.log('Err:', err);
-      }, function(msg) {
-        console.log('message:', msg);
+      }, function(popup) {
+        // If you need to access the popup directly, do it in the notify method
+        // This is also where you can programatically close the popup:
+        // popup.close();
       });
 
       // A confirm dialog
@@ -922,7 +996,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   });
   ```
 
- 
+
  */
 .factory('$ionicPopup', ['$rootScope', '$q', '$document', '$compile', '$timeout', '$ionicTemplateLoader',
   function($rootScope, $q, $document, $compile, $timeout, $ionicTemplateLoader) {
@@ -947,6 +1021,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     }
   };
 
+  var focusLastButton = function(popup) {
+    var buttons, lastButton;
+    buttons = popup.el.querySelectorAll('button');
+    lastButton = buttons[buttons.length-1];
+    if(lastButton) {
+      lastButton.focus();
+    }
+  }
+
   // Show a single popup
   var showSinglePopup = function(popup, opts) {
     var _this = this;
@@ -957,6 +1040,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+
+      focusLastButton(popup);
     });
   };
 
@@ -966,6 +1051,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+      focusLastButton(popup);
     });
   };
 
@@ -1003,11 +1089,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     var el = $compile('<ion-popup-backdrop></ion-popup-backdrop>')($rootScope.$new(true));
     $document[0].body.appendChild(el[0]);
     backdropEl = el;
+    $document[0].body.classList.add('popup-open');
   };
 
   // Remove the backdrop element
   var removeBackdrop = function() {
     backdropEl.remove();
+    $timeout(function(){
+      $document[0].body.classList.remove('popup-open');
+    }, 300);
   };
 
   // Push the new popup onto the stack with the given data and scope.
@@ -1054,7 +1144,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   var constructPopupOnScope = function(element, scope) {
     var popup = {
       el: element[0],
-      scope: scope
+      scope: scope,
+      close: function() {
+        popAndRemove(this);
+      }
     };
 
     scope.popup = popup;
@@ -1063,8 +1156,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   }
 
   var buildPopupTemplate = function(opts, content) {
-    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">' 
-        + (content || '') + 
+    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">'
+        + (content || '') +
       '</ion-popup>';
   };
 
@@ -1120,18 +1213,25 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   };
 
 
+
   // Public API
   return {
+    /**
+     * @private
+     */
     showPopup: function(data) {
       var q = $q.defer();
 
       createPopup(data, q).then(function(popup, scope) {
 
+        // Send the popup back
+        q.notify(popup);
+
         // We constructed the popup, push it on the stack and show it
         pushAndShow(popup, data);
 
       }, function(err) {
-        console.error('Unable to load popup:', err);
+        void 0;
       });
 
       return q.promise;
@@ -1142,7 +1242,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @name $ionicPopup#show
      * @description show a complex popup. This is the master show function for all popups
      * @param {data} object The options for showing a popup, of the form:
-     *
+     * @returns {Promise} an Angular promise which resolves when the user enters the correct data, and also
+     * sends the constructed popup in the notify function (for programatic closing, as shown in the example above).
      * ```
      * {
      *   content: '', // String. The content of the popup
@@ -1150,7 +1251,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *   subTitle: '', // String (optional). The sub-title of the popup
      *   templateUrl: '', // URL String (optional). The URL of a template to load as the content (instead of the `content` field)
      *   scope: null, // Scope (optional). A scope to apply to the popup content (for using ng-model in a template, for example)
-     *   buttons: 
+     *   buttons:
      *     [
      *       {
      *         text: 'Cancel',
@@ -1173,7 +1274,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *         }
      *       }
      *     ]
-     * 
+     *
      * }
      * ```
     */
@@ -1190,7 +1291,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *
      * ```javascript
      *  $ionicPopup.alert({
-     *    title: 'Hey!;,
+     *    title: 'Hey!',
      *    content: 'Don\'t do that!'
      *  }).then(function(res) {
      *    // Accepted
@@ -1283,7 +1384,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @ngdoc method
      * @name $ionicPopup#prompt
      * @description show a simple prompt dialog.
-     * 
+     *
      * ```javascript
      *  $ionicPopup.prompt({
      *    title: 'Password Check',
@@ -1336,7 +1437,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         ]
       });
     }
-    
+
   };
 }]);
 
@@ -1484,6 +1585,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           currentView = viewHistory.currentView,
           backView = viewHistory.backView,
           forwardView = viewHistory.forwardView,
+          nextViewOptions = this.nextViewOptions(),
           rsp = {
             viewId: null,
             navAction: null,
@@ -1517,7 +1619,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
         // they went back one, set the old current view as a forward view
         rsp.viewId = backView.viewId;
         rsp.navAction = 'moveBack';
-        currentView.scrollValues = {}; //when going back, erase scrollValues
+        rsp.viewId = backView.viewId;
         if(backView.historyId === currentView.historyId) {
           // went back in the same history
           rsp.navDirection = 'back';
@@ -1591,13 +1693,23 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           stateName: this.getCurrentStateName(),
           stateParams: this.getCurrentStateParams(),
           url: $location.url(),
-          scrollValues: null
         });
 
+        if (rsp.navAction == 'moveBack') {
+          //moveBack(from, to);
+          $rootScope.$emit('$viewHistory.viewBack', currentView.viewId, rsp.viewId);
+        }
+
         // add the new view to this history's stack
         hist.stack.push(viewHistory.views[rsp.viewId]);
       }
 
+      if(nextViewOptions) {
+        if(nextViewOptions.disableAnimate) rsp.navDirection = null;
+        if(nextViewOptions.disableBack) viewHistory.views[rsp.viewId].backViewId = null;
+        this.nextViewOptions(null);
+      }
+
       this.setNavViews(rsp.viewId);
 
       hist.cursor = viewHistory.currentView.index;
@@ -1747,6 +1859,14 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
       return { historyId: 'root', scope: $rootScope };
     },
 
+    nextViewOptions: function(opts) {
+      if(arguments.length) {
+        this._nextOpts = opts;
+      } else {
+        return this._nextOpts;
+      }
+    },
+
     getRenderer: function(navViewElement, navViewAttrs, navViewScope) {
       var service = this;
       var registerData;
@@ -1902,293 +2022,29 @@ angular.module('ionic.decorator.location', [])
  * @private
  */
 .config(['$provide', function($provide) {
-  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
-}]);
-
-function $LocationDecorator($location, $timeout) {
-
-  $location.__hash = $location.hash;
-  //Fix: when window.location.hash is set, the scrollable area
-  //found nearest to body's scrollTop is set to scroll to an element
-  //with that ID.
-  $location.hash = function(value) {
-    if (angular.isDefined(value)) {
-      $timeout(function() {
-        var scroll = document.querySelector('.scroll-content');
-        if (scroll)
-          scroll.scrollTop = 0;
-      }, 0, false);
-    }
-    return $location.__hash(value);
-  };
-
-  return $location;
-}
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.scrollDelegate', [])
-
-/**
- * @ngdoc service
- * @name $ionicScrollDelegate
- * @module ionic
- * @group page layout
- * @description
- * Allows you to have some control over a scrollable area (created by an
- * {@link ionic.directive:ionContent} or {@link ionic.directive:ionScroll}
- * directive).
- *
- * Inject it into a controller, and its methods will send messages to the nearest scrollView and all of its children.
- *
- * @usage
- * ```html
- * <ion-content ng-controller="MyController">
- *   <button class="button" ng-click="scrollToTop()">
- *     Scroll To Top
- *   </button>
- * </ion-content>
- * ```
- * ```js
- * function MyController($scope, $ionicScrollDelegate) {
- *   $scope.scrollToTop = function() {
- *     $ionicScrollDelegate.scrollTop();
- *   };
- * }
- * ```
- */
-.factory('$ionicScrollDelegate', ['$rootScope', '$timeout', '$q', '$anchorScroll', '$location', '$document', function($rootScope, $timeout, $q, $anchorScroll, $location, $document) {
-  return {
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollTop
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTop: function(animate) {
-      $rootScope.$broadcast('scroll.scrollTop', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollBottom
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollBottom: function(animate) {
-      $rootScope.$broadcast('scroll.scrollBottom', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scroll
-     * @param {number} left The x-value to scroll to.
-     * @param {number} top The y-value to scroll to.
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTo: function(left, top, animate) {
-      $rootScope.$broadcast('scroll.scrollTo', left, top, animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#anchorScroll
-     * @description Tell the scrollView to scroll to the element with an id
-     * matching window.location.hash.
-     *
-     * If no matching element is found, it will scroll to top.
-     *
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    anchorScroll: function(animate) {
-      $rootScope.$broadcast('scroll.anchorScroll', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#resize
-     * @description Tell the scrollView to recalculate the size of its container.
-     */
-    resize: function() {
-      $rootScope.$broadcast('scroll.resize');
-    },
-    /**
-     * @private
-     */
-    tapScrollToTop: function(element, animate) {
-      var _this = this;
-      if (!angular.isDefined(animate)) {
-        animate = true;
-      }
-
-      ionic.on('tap', function(e) {
-        var target = e.target;
-        //Don't scroll to top for a button click
-        if (ionic.DomUtil.getParentOrSelfWithClass(target, 'button')) {
-          return;
-        }
-
-        var el = element[0];
-        var bounds = el.getBoundingClientRect();
-
-        if(ionic.DomUtil.rectContains(e.gesture.touches[0].pageX, e.gesture.touches[0].pageY, bounds.left, bounds.top, bounds.left + bounds.width, bounds.top + 20)) {
-          _this.scrollTop(animate);
-        }
-      }, element[0]);
-    },
-
-    finishRefreshing: function($scope) {
-      $scope.$broadcast('scroll.refreshComplete');
-    },
-
-    /**
-     * @private
-     * Attempt to get the current scroll view in scope (if any)
-     *
-     * Note: will not work in an isolated scope context.
-     */
-    getScrollView: function($scope) {
-      return $scope.scrollView;
-    },
-
-    /**
-     * @private
-     * Register a scope and scroll view for scroll event handling.
-     * $scope {Scope} the scope to register and listen for events
-     */
-    register: function($scope, $element, scrollView) {
-
-      var scrollEl = $element[0];
-
-      function scrollViewResize() {
-        // Run the resize after this digest
-        return $timeout(function() {
-          scrollView.resize();
-        });
-      }
-
-      $element.on('scroll', function(e) {
-        var detail = (e.originalEvent || e).detail || {};
-
-        $scope.$onScroll && $scope.$onScroll({
-          event: e,
-          scrollTop: detail.scrollTop || 0,
-          scrollLeft: detail.scrollLeft || 0
-        });
-
-      });
-
-      $scope.$parent.$on('scroll.resize', scrollViewResize);
-
-      // Called to stop refreshing on the scroll view
-      $scope.$parent.$on('scroll.refreshComplete', function(e) {
-        scrollView.finishPullToRefresh();
-      });
-
-      $scope.$parent.$on('scroll.anchorScroll', function(e, animate) {
-        scrollViewResize().then(function() {
-          var hash = $location.hash();
-          var elm;
-          if (hash && (elm = document.getElementById(hash)) ) {
-            var scroll = ionic.DomUtil.getPositionInParent(elm, scrollEl);
-            scrollView.scrollTo(scroll.left, scroll.top, !!animate);
-          } else {
-            scrollView.scrollTo(0,0, !!animate);
-          }
-        });
-      });
-
-      $scope.$parent.$on('scroll.scrollTo', function(e, left, top, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(left, top, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollTop', function(e, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(0, 0, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollBottom', function(e, animate) {
-        scrollViewResize().then(function() {
-          var sv = scrollView;
-          if (sv) {
-            var max = sv.getScrollMax();
-            sv.scrollTo(max.left, max.top, !!animate);
-          }
-        });
-      });
-    }
-  };
-}]);
-
-})(ionic);
-
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.sideMenuDelegate', [])
-
-.factory('$ionicSideMenuDelegate', ['$rootScope', '$timeout', '$q', function($rootScope, $timeout, $q) {
-  return {
-    getSideMenuController: function($scope) {
-      return $scope.sideMenuController;
-    },
-    close: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.close();
-      }
-    },
-    toggleLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleLeft();
-      }
-    },
-    toggleRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleRight();
-      }
-    },
-    openLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(100);
-      }
-    },
-    openRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(-100);
+  function $LocationDecorator($location, $timeout) {
+
+    $location.__hash = $location.hash;
+    //Fix: when window.location.hash is set, the scrollable area
+    //found nearest to body's scrollTop is set to scroll to an element
+    //with that ID.
+    $location.hash = function(value) {
+      if (angular.isDefined(value)) {
+        $timeout(function() {
+          var scroll = document.querySelector('.scroll-content');
+          if (scroll)
+            scroll.scrollTop = 0;
+        }, 0, false);
       }
-    }
-  };
-}]);
-
-})();
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.slideBoxDelegate', [])
-
-.factory('$ionicSlideBoxDelegate', ['$rootScope', '$timeout', function($rootScope, $timeout) {
-  return {
-    /**
-     * Trigger a slidebox to update and resize itself
-     */
-    update: function(animate) {
-      $rootScope.$broadcast('slideBox.update');
-    },
+      return $location.__hash(value);
+    };
 
-    register: function($scope, $element) {
-      $scope.$parent.$on('slideBox.update', function(e) {
-        if(e.defaultPrevented) {
-          return;
-        }
-        $timeout(function() {
-          $scope.$parent.slideBoxController.setup();
-        });
-        e.preventDefault();
-      });
-    }
-  };
+    return $location;
+  }
+  
+  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
 }]);
 
-})(ionic);
-
 (function() {
 'use strict';
 
@@ -2251,124 +2107,144 @@ angular.module('ionic.ui.actionSheet', [])
 
 angular.module('ionic.ui.header', ['ngAnimate', 'ngSanitize'])
 
-.directive('barHeader', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'C',
-    link: function($scope, $element, $attr) {
-      // We want to scroll to top when the top of this element is clicked
-      $ionicScrollDelegate.tapScrollToTop($element);
-    }
-  };
-}])
+.directive('ionNavBar', tapScrollToTopDirective())
+.directive('ionHeaderBar', tapScrollToTopDirective())
 
 /**
  * @ngdoc directive
  * @name ionHeaderBar
  * @module ionic
  * @restrict E
+ *
  * @description
- * While Ionic provides simple Header and Footer bars that can be created through
- * HTML and CSS alone, Header bars specifically can be extended in order to
- * provide dynamic layout features such as auto-title centering and animation.
- * They are also used by the Views and Navigation Controller to animate a title
- * on navigation and toggle a back button.
- *
- * The main header bar feature provided is auto title centering.
- * In this situation, the title text will center itself until either the
- * left or right button content is too wide for the label to center.
- * In that case, it will slide left or right until it can fit.
- * You can also align the title left for a more Android-friendly header.
- *
- * Using two-way data binding, the header bar will automatically
- * readjust the heading title alignment when the title or buttons change.
- *
- * @param {string} title The title use on the headerBar.
- * @param {expression=} leftButtons Point to an array of buttons to put on the left of the bar.
- * @param {expression=} rightButtons Point to an array of buttons to put on the right of the bar.
- * @param {string=} type The type of the bar, for example 'bar-positive'.
- * @param {string=} align Where to align the title. 'left', 'right', or 'center'.  Defaults to 'center'.
+ * Adds a fixed header bar above some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
  *
  * @usage
  * ```html
- * <ion-header-bar
- *  title="{{myTitle}}"
- *  left-buttons="leftButtons"
- *  right-buttons="rightButtons"
- *  type="bar-positive"
- *  align-title="center">
+ * <ion-header-bar align-title="left" class="bar-positive">
+ *   <div class="buttons">
+ *     <button class="button" ng-click="doSomething()">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons">
+ *     <button class="button">Right Button</button>
+ *   </div>
  * </ion-header-bar>
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
  * ```
- *
  */
-.directive('ionHeaderBar', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<header class="bar bar-header">\
-                <div class="buttons">\
-                  <button ng-repeat="button in leftButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-                <h1 class="title" ng-bind-html="title"></h1>\
-                <div class="buttons">\
-                  <button ng-repeat="button in rightButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-              </header>',
+.directive('ionHeaderBar', barDirective(true))
 
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      type: '@',
-      alignTitle: '@'
-    },
-    link: function($scope, $element, $attr) {
-      var hb = new ionic.views.HeaderBar({
-        el: $element[0],
-        alignTitle: $scope.alignTitle || 'center'
-      });
+/**
+ * @ngdoc directive
+ * @name ionFooterBar
+ * @module ionic
+ * @restrict E
+ *
+ * @description
+ * Adds a fixed footer bar below some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
+ *
+ * @usage
+ * ```html
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
+ * <ion-footer-bar align-title="left" class="bar-assertive">
+ *   <div class="buttons">
+ *     <button class="button">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons" ng-click="doSomething()">
+ *     <button class="button">Right Button</button>
+ *   </div>
+ * </ion-footer-bar>
+ * ```
+ */
+.directive('ionFooterBar', barDirective(false));
 
-      $element.addClass($scope.type);
+function tapScrollToTopDirective() {
+  return ['$ionicScrollDelegate', function($ionicScrollDelegate) {
+    return {
+      restrict: 'E',
+      link: function($scope, $element, $attr) {
+        ionic.on('tap', onTap, $element[0]);
+        $scope.$on('$destroy', function() {
+          ionic.off('tap', onTap, $element[0]);
+        });
 
-      $scope.headerBarView = hb;
+        function onTap(e) {
+          if (ionic.DomUtil.getParentOrSelfWithClass(e.target, 'button', 4)) {
+            return;
+          }
+          var touch = e.gesture && e.gesture.touches[0] || e.detail.touches[0];
+          var bounds = $element[0].getBoundingClientRect();
+          if (ionic.DomUtil.rectContains(
+            touch.pageX, touch.pageY,
+            bounds.left, bounds.top - 20,
+            bounds.left + bounds.width, bounds.top + bounds.height
+          )) {
+            $ionicScrollDelegate.scrollTop(true);
+          }
+        }
+      }
+    };
+  }];
+}
 
-      $scope.$watchCollection('leftButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
 
-      $scope.$watchCollection('rightButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
-
-      $scope.$watch('title', function(val) {
-        // Resize the title since the title has changed
-        hb.align();
-      });
-    }
-  };
-}])
-
-.directive('ionFooterBar', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<footer class="bar bar-footer" ng-transclude>\
-              </footer>',
+function barDirective(isHeader) {
+  return [function() {
+    return {
+      restrict: 'E',
+      compile: function($element, $attr) {
+        $element.addClass(isHeader ? 'bar bar-header' : 'bar bar-footer');
+
+        return { pre: prelink };
+        function prelink($scope, $element, $attr) {
+          var hb = new ionic.views.HeaderBar({
+            el: $element[0],
+            alignTitle: $attr.alignTitle || 'center'
+          });
 
-    scope: {
-      type: '@',
-    },
+          var el = $element[0];
+          //just incase header is on rootscope
+          var parentScope = $scope.$parent || $scope;
 
-    link: function($scope, $element, $attr) {
-      $element.addClass($scope.type);
-    }
-  };
-});
+          if (isHeader) {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubheader = value.indexOf('bar-subheader') !== -1;
+              parentScope.$hasHeader = !isSubheader;
+              parentScope.$hasSubheader = isSubheader;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasHeader = parentScope.$hasSubheader = null;
+            });
+          } else {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubfooter = value.indexOf('bar-subfooter') !== -1;
+              parentScope.$hasFooter = !isSubfooter;
+              parentScope.$hasSubfooter = isSubfooter;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasFooter = parentScope.$hasSubfooter = null;
+            });
+            $scope.$watch('$hasTabs', function(val) {
+              $element.toggleClass('has-tabs', !!val);
+            });
+          }
+        }
+      }
+    };
+  }];
+}
 
 })(ionic);
 
@@ -2428,7 +2304,7 @@ angular.module('ionic.ui.checkbox', [])
 (function() {
 'use strict';
 
-angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
+angular.module('ionic.ui.content', ['ionic.ui.scroll'])
 
 /**
  * Panel is a simple 100% width and height, fixed panel. It's meant for content to be
@@ -2438,7 +2314,6 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionPane
  * @module ionic
- * @group page layout
  * @restrict E
  *
  * @description A simple container that fits content, with no side effects.  Adds the 'pane' class to the element.
@@ -2456,12 +2331,12 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionContent
  * @module ionic
- * @group page layout
- * @groupMainItem
+ * @delegate ionic.service:$ionicScrollDelegate
+ * @restrict E
  *
  * @description
  * The ionContent directive provides an easy to use content area that can be configured
- * to use Ionic's custom Scroll View, or the built in overflow scorlling of the browser.
+ * to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
  *
  * While we recommend using the custom Scroll features in Ionic in most cases, sometimes
  * (for performance reasons) only the browser's native overflow scrolling will suffice,
@@ -2472,52 +2347,48 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * directive, and infinite scrolling with the {@link ionic.directive:ionInfiniteScroll}
  * directive.
  *
- * @restrict E
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
+ * @param {boolean=} padding Whether to add padding to the content.
+ * of the content.  Defaults to true on iOS, false on Android.
  * @param {boolean=} scroll Whether to allow scrolling of content.  Defaults to true.
  * @param {boolean=} overflow-scroll Whether to use overflow-scrolling instead of
  * Ionic scroll.
- * @param {boolean=} padding Whether to add padding to the content.
- * @param {boolean=} has-header Whether to offset the content for a header bar.
- * @param {boolean=} has-subheader Whether to offset the content for a subheader bar.
- * @param {boolean=} has-footer Whether to offset the content for a footer bar.
  * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
  * of the content.  Defaults to true on iOS, false on Android.
  * @param {expression=} on-scroll Expression to evaluate when the content is scrolled.
  * @param {expression=} on-scroll-complete Expression to evaluate when a scroll action completes.
  */
 .directive('ionContent', [
-  '$parse',
   '$timeout',
-  '$ionicScrollDelegate',
   '$controller',
   '$ionicBind',
-function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    transclude: true,
     require: '^?ionNavView',
     scope: true,
-    template:
-    '<div class="scroll-content">' +
-      '<div class="scroll"></div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(attr.hasHeader == "true") { element.addClass('has-header'); }
-      if(attr.hasSubheader == "true") { element.addClass('has-subheader'); }
-      if(attr.hasFooter == "true") { element.addClass('has-footer'); }
-      if(attr.hasTabs == "true") { element.addClass('has-tabs'); }
-      if(attr.padding == "true") { element.find('div').addClass('padding'); }
+    compile: function(element, attr) {
+      element.addClass('scroll-content');
 
-      return {
-        //Prelink <ion-content> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr, navViewCtrl) {
-        var clone, sc, scrollView, scrollCtrl,
-          scrollContent = angular.element($element[0].querySelector('.scroll'));
+        $scope.$watch(function() {
+          return ($scope.$hasHeader ? ' has-header' : '')  +
+            ($scope.$hasSubheader ? ' has-subheader' : '') +
+            ($scope.$hasFooter ? ' has-footer' : '') +
+            ($scope.$hasSubfooter ? ' has-subfooter' : '') +
+            ($scope.$hasTabs ? ' has-tabs' : '') +
+            ($scope.$hasTabsTop ? ' has-tabs-top' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
 
         $ionicBind($scope, $attr, {
           $onScroll: '&onScroll',
@@ -2534,16 +2405,22 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           scrollEventInterval: '@'
         });
 
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
+        }
+
         if ($scope.scroll === "false") {
           //do nothing
         } else if(attr.overflowScroll === "true") {
           $element.addClass('overflow-scroll');
         } else {
-
-          scrollCtrl = $controller('$ionicScroll', {
+          $controller('$ionicScroll', {
             $scope: $scope,
             scrollViewOptions: {
               el: $element[0],
+              delegateHandle: attr.delegateHandle,
               bouncing: $scope.$eval($scope.hasBouncing),
               startX: $scope.$eval($scope.startX) || 0,
               startY: $scope.$eval($scope.startY) || 0,
@@ -2560,33 +2437,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
               }
             }
           });
-          //Publish scrollView to parent so children can access it
-          scrollView = $scope.$parent.scrollView = scrollCtrl.scrollView;
-
-          $scope.$on('$viewContentLoaded', function(e, viewHistoryData) {
-            viewHistoryData || (viewHistoryData = {});
-            var scroll = viewHistoryData.scrollValues;
-            if (scroll) {
-              $timeout(function() {
-                scrollView.scrollTo(+scroll.left || null, +scroll.top || null);
-              }, 0);
-            }
-
-            //Save scroll onto viewHistoryData when scope is destroyed
-            $scope.$on('$destroy', function() {
-              viewHistoryData.scrollValues = scrollView.getValues();
-            });
-          });
-
         }
 
-        transclude($scope, function(clone) {
-          if (scrollCtrl) {
-            clone.data('$$ionicScrollController', scrollCtrl);
-          }
-          scrollContent.append(clone);
-        });
-
       }
     }
   };
@@ -2597,7 +2449,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @name ionRefresher
  * @module ionic
  * @restrict E
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @description
  * Allows you to add pull-to-refresh to a scrollView.
@@ -2608,19 +2459,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * When refreshing is complete, $broadcast the 'scroll.refreshComplete' event
  * from your controller.
  *
- * @param {expression=} on-refresh Called when the user pulls down enough and lets go
- * of the refresher.
- * @param {expression=} on-pulling Called when the user starts to pull down
- * on the refresher.
- * @param {string=} pulling-icon The icon to display while the user is pulling down.
- * Default: 'ion-arrow-down-c'.
- * @param {string=} pulling-text The text to display while the user is pulling down.
- * @param {string=} refreshing-icon The icon to display after user lets go of the
- * refresher.
- * @param {string=} refreshing-text The text to display after the user lets go of
- * the refresher.
- *
  * @usage
+ *
  * ```html
  * <ion-content ng-controller="MyController">
  *   <ion-refresher
@@ -2645,6 +2485,19 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  *   };
  * });
  * ```
+ *
+ * @param {expression=} on-refresh Called when the user pulls down enough and lets go
+ * of the refresher.
+ * @param {expression=} on-pulling Called when the user starts to pull down
+ * on the refresher.
+ * @param {string=} pulling-icon The icon to display while the user is pulling down.
+ * Default: 'ion-arrow-down-c'.
+ * @param {string=} pulling-text The text to display while the user is pulling down.
+ * @param {string=} refreshing-icon The icon to display after user lets go of the
+ * refresher.
+ * @param {string=} refreshing-text The text to display after the user lets go of
+ * the refresher.
+ *
  */
 .directive('ionRefresher', ['$ionicBind', function($ionicBind) {
   return {
@@ -2677,7 +2530,7 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           $onPulling: '&onPulling'
         });
 
-        scrollCtrl.setRefresher($scope, $element[0]);
+        scrollCtrl._setRefresher($scope, $element[0]);
         $scope.$on('scroll.refreshComplete', function() {
           $element[0].classList.remove('active');
           scrollCtrl.scrollView.finishPullToRefresh();
@@ -2691,7 +2544,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @ngdoc directive
  * @name ionInfiniteScroll
  * @module ionic
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @restrict E
  *
@@ -2857,12 +2709,12 @@ angular.module('ionic.ui.list', ['ngAnimate'])
     },
 
     template: '<div class="item item-complex">\
-            <div class="item-edit" ng-if="deleteClick !== undefined">\
+            <div class="item-left-edit item-delete" ng-if="deleteClick !== undefined">\
               <button class="button button-icon icon" ng-class="deleteIconClass" ng-click="deleteClick()" ion-stop-event="click"></button>\
             </div>\
             <a class="item-content" ng-href="{{ href }}" ng-transclude></a>\
-            <div class="item-drag" ng-if="reorderIconClass !== undefined">\
-              <button data-ionic-action="reorder" class="button button-icon icon" ng-class="reorderIconClass"></button>\
+            <div class="item-right-edit item-reorder" ng-if="reorderIconClass !== undefined">\
+              <button data-ionic-action="reorder" data-prevent-scroll="true" class="button button-icon icon" ng-class="reorderIconClass"></button>\
             </div>\
             <div class="item-options" ng-if="itemOptionButtons">\
              <button ng-click="b.onTap(item, b)" ion-stop-event="click" class="button" ng-class="b.type" ng-repeat="b in itemOptionButtons" ng-bind="b.text"></button>\
@@ -2898,22 +2750,24 @@ angular.module('ionic.ui.list', ['ngAnimate'])
           $scope.deleteClick = function() {
             if($attr.onDelete) {
               // this item has an on-delete attribute
-              $scope.onDelete({ item: $scope.item });
+              $scope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             } else if($parentAttrs.onDelete) {
               // run the parent list's onDelete method
               // if it doesn't exist nothing will happen
-              $parentScope.onDelete({ item: $scope.item });
+              $parentScope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             }
           };
 
           // Set which icons to use for deleting
           $scope.deleteIconClass = $scope.deleteIcon || $parentScope.deleteIcon || 'ion-minus-circled';
+          $element.addClass('item-left-editable');
         }
       }
 
       // set the reorder Icon Class only if the item or list set can-reorder="true"
       if(($attr.canReorder ? $scope.canReorder : $parentScope.canReorder) === "true") {
         $scope.reorderIconClass = $scope.reorderIcon || $parentScope.reorderIcon || 'ion-navicon';
+        $element.addClass('item-right-editable');
       }
 
       // Set the option buttons which can be revealed by swiping to the left
@@ -2923,6 +2777,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
         if(typeof $scope.itemOptionButtons === "undefined") {
           $scope.itemOptionButtons = $parentScope.optionButtons();
         }
+        $element.addClass('item-swipeable');
       }
 
     }
@@ -2996,7 +2851,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       reorderIcon: '@'
     },
 
-    template: '<div class="list" ng-class="{\'list-editing\': showDelete, \'list-reordering\': showReorder}" ng-transclude></div>',
+    template: '<div class="list" ng-class="{\'list-left-editing\': showDelete, \'list-right-editing\': showReorder}" ng-transclude></div>',
 
     controller: ['$scope', '$attrs', function($scope, $attrs) {
       this.scope = $scope;
@@ -3005,6 +2860,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
 
     link: function($scope, $element, $attr, ionicScrollCtrl) {
       $scope.listView = new ionic.views.ListView({
+        canSwipe: $scope.canSwipe !== "false" && !!$scope.optionButtons(),
         el: $element[0],
         listEl: $element[0].children[0],
         scrollEl: ionicScrollCtrl && ionicScrollCtrl.element,
@@ -3023,6 +2879,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       var destroyShowReorderWatch = $scope.$watch('showReorder', function(val) {
         if(val) {
           $element[0].classList.add('item-options-hide');
+          $scope.listView && $scope.listView.clearDragEffects();
         } else if(val === false) {
           // false checking is because it could be undefined
           // if its undefined then we don't care to do anything
@@ -3059,7 +2916,7 @@ angular.module('ionic.ui.loading', [])
     link: function($scope, $element){
       $element.addClass($scope.animation || '');
     },
-    template: '<div class="loading-backdrop" ng-class="{enabled: showBackdrop}">' +
+    template: '<div class="loading-backdrop" ng-class="{\'show-backdrop\': showBackdrop}">' +
                 '<div class="loading" ng-transclude>' +
                 '</div>' +
               '</div>'
@@ -3090,146 +2947,582 @@ angular.module('ionic.ui.modal', [])
 
 })();
 
-(function() {
-angular.module('ionic.ui.navAnimation', [])
+
+angular.module('ionic.ui.navBar', ['ionic.service.view', 'ngSanitize'])
+
 /**
- * @ngdoc directive
- * @name ionNavAnimation
+ * @ngdoc service
+ * @name $ionicNavBarDelegate
  * @module ionic
- * @restrict A
- * @parent ionic.directive:ionNavView
- *
  * @description
- * When used under an {@link ionic.directive:ionNavView} and on an `<a>` element,
- * allows you to set the animation all clicks on that link within the navView use.
+ * Delegate for controlling the {@link ionic.directive:ionNavBar} directive.
  *
  * @usage
+ *
  * ```html
- * <ion-nav-view>
- *   <ion-view>
- *     <ion-content>
- *       <a href="#/some-page" ion-nav-animation="slide-in-up">
- *         Click me and #/some-page will transition in with the slide-in-up animation!
- *       </a>
- *     </ion-content>
- *   </ion-view>
- * </ion-nav-view>
+ * <body ng-controller="MyCtrl">
+ *   <ion-nav-bar>
+ *     <button ng-click="setNavTitle('banana')">
+ *       Set title to banana!
+ *     </button>
+ *   </ion-nav-bar>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.setNavTitle = function(title) {
+ *     $ionicNavBarDelegate.setTitle(title);
+ *   }
+ * }
  * ```
- *
- * @param {string} ion-nav-animation The animation to make the parent ionNavView change pages with when clicking this element.
  */
-.directive('ionNavAnimation', function() {
-  return {
-    restrict: 'A',
-    require: '^?ionNavView',
-    link: function($scope, $element, $attrs, navViewCtrl) {
-      if (!navViewCtrl) {
-        return;
-      }
-      ionic.on('tap', function() {
-        navViewCtrl.setNextAnimation($attrs.ionNavAnimation);
-      }, $element[0]);
-    }
+.service('$ionicNavBarDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#back
+   * @description Goes back in the view history.
+   * @param {DOMEvent=} event The event object (eg from a tap event)
+   */
+  'back',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#align
+   * @description Aligns the title with the buttons in a given direction.
+   * @param {string=} direction The direction to the align the title text towards.
+   * Available: 'left', 'right', 'center'. Default: 'center'.
+   */
+  'align',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBackButton
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBackButton} should be shown
+   * (if it exists).
+   * @param {boolean} show Whether to show the back button.
+   */
+  'showBackButton',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBar
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBar} should be shown.
+   * @param {boolean} show Whether to show the bar.
+   */
+  'showBar',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#setTitle
+   * @description
+   * Set the title for the {@link ionic.directive:ionNavBar}.
+   * @param {string} title The new title to show.
+   */
+  'setTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#changeTitle
+   * @description
+   * Change the title, transitioning the new title in and the old one out in a given direction.
+   * @param {string} title The new title to show.
+   * @param {string} direction The direction to transition the new title in.
+   * Available: 'forward', 'back'.
+   */
+  'changeTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getTitle
+   * @returns {string} The current title of the navbar.
+   */
+  'getTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getPreviousTitle
+   * @returns {string} The previous title of the navbar.
+   */
+  'getPreviousTitle'
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * navBars with delegate-handle matching the given handle.
+   *
+   * Example: `$ionicNavBarDelegate.$getByHandle('myHandle').setTitle('newTitle')`
+   */
+]))
+
+.controller('$ionicNavBar', [
+  '$scope',
+  '$element',
+  '$attrs',
+  '$ionicViewService',
+  '$animate',
+  '$compile',
+  '$ionicNavBarDelegate',
+function($scope, $element, $attrs, $ionicViewService, $animate, $compile, $ionicNavBarDelegate) {
+  //Let the parent know about our controller too so that children of
+  //sibling content elements can know about us
+  $element.parent().data('$ionNavBarController', this);
+
+  var deregisterInstance = $ionicNavBarDelegate._registerInstance(this, $attrs.delegateHandle);
+
+  $scope.$on('$destroy', deregisterInstance);
+
+  var self = this;
+
+  this.leftButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.left-buttons')
+  );
+  this.rightButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.right-buttons')
+  );
+
+  this.back = function(e) {
+    var backView = $ionicViewService.getBackView();
+    backView && backView.go();
+    e && (e.alreadyHandled = true);
+    return false;
   };
-});
-})();
 
+  this.align = function(direction) {
+    this._headerBarView.align(direction);
+  };
 
-(function() {
-'use strict';
+  this.showBackButton = function(show) {
+    $scope.backButtonShown = !!show;
+  };
 
-angular.module('ionic.ui.popup', [])
+  this.showBar = function(show) {
+    $scope.isInvisible = !show;
+  };
 
-/**
- * @private
- */
-.directive('ionPopupBackdrop', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    template: '<div class="popup-backdrop"></div>'
-  }
-})
+  this.setTitle = function(title) {
+    $scope.oldTitle = $scope.title;
+    $scope.title = title || '';
+  };
 
-/**
- * @private
- */
-.directive('ionPopup', ['$ionicBind', function($ionicBind) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    scope: true,
-    link: function($scope, $element, $attr) {
-      $ionicBind($scope, $attr, {
-        title: '@',
-        buttons: '=',
-        $onButtonTap: '&onButtonTap',
-        $onClose: '&onClose'
-      });
+  this.changeTitle = function(title, direction) {
+    if ($scope.title === title) {
+      return false;
+    }
+    this.setTitle(title);
+    $scope.isReverse = direction == 'back';
+    $scope.shouldAnimate = !!direction;
 
-      $scope._buttonTapped = function(button, event) {
-        var result = button.onTap && button.onTap(event);
+    if (!$scope.shouldAnimate) {
+      //We're done!
+      this._headerBarView.align();
+    } else {
+      this._animateTitles();
+    }
+    return true;
+  };
 
-        // A way to return false
-        if(event.defaultPrevented) {
-          return $scope.$onClose({button: button, result: false, event: event });
-        }
+  this.getTitle = function() {
+    return $scope.title || '';
+  };
 
-        // Truthy test to see if we should close the window
-        if(result) {
-          return $scope.$onClose({button: button, result: result, event: event });
-        }
-        $scope.$onButtonTap({button: button, event: event});
-      }
-    },
-    template:   '<div class="popup">' +
-                  '<div class="popup-head">' +
-                    '<h3 class="popup-title" ng-bind-html="title"></h3>' +
-                    '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
-                  '</div>' +
-                  '<div class="popup-body" ng-transclude>' +
-                  '</div>' +
-                  '<div class="popup-buttons row">' +
-                    '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
-                  '</div>' +
-                '</div>'
+  this.getPreviousTitle = function() {
+    return $scope.oldTitle || '';
   };
-}]);
 
-})();
+  /**
+   * Exposed for testing
+   */
+  this._animateTitles = function() {
+    var oldTitleEl, newTitleEl, currentTitles;
+
+    //If we have any title right now
+    //(or more than one, they could be transitioning on switch),
+    //replace the first one with an oldTitle element
+    currentTitles = $element[0].querySelectorAll('.title');
+    if (currentTitles.length) {
+      oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
+      angular.element(currentTitles[0]).replaceWith(oldTitleEl);
+    }
+    //Compile new title
+    newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
 
-(function(ionic) {
-'use strict';
+    //Animate in on next frame
+    ionic.requestAnimationFrame(function() {
 
-angular.module('ionic.ui.radio', [])
+      oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+
+      var insert = oldTitleEl && angular.element(oldTitleEl) || null;
+      $animate.enter(newTitleEl, $element, insert, function() {
+        self._headerBarView.align();
+      });
+
+      //Cleanup any old titles leftover (besides the one we already did replaceWith on)
+      angular.forEach(currentTitles, function(el) {
+        if (el && el.parentNode) {
+          //Use .remove() to cleanup things like .data()
+          angular.element(el).remove();
+        }
+      });
+
+      //$apply so bindings fire
+      $scope.$digest();
+
+      //Stop flicker of new title on ios7
+      ionic.requestAnimationFrame(function() {
+        newTitleEl[0].classList.remove('invisible');
+      });
+    });
+  };
+}])
 
 /**
  * @ngdoc directive
- * @name ionRadio
+ * @name ionNavBar
  * @module ionic
+ * @delegate ionic.service:$ionicNavBarDelegate
  * @restrict E
+ *
  * @description
- * No different than the HTML radio input, except it's styled differently.
+ * If we have an {@link ionic.directive:ionNavView} directive, we can also create an
+ * `<ion-nav-bar>`, which will create a topbar that updates as the application state changes.
  *
- * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ * We can add a back button by putting an {@link ionic.directive:ionNavBackButton} inside.
+ *
+ * We can add buttons depending on the currently visible view using
+ * {@link ionic.directive:ionNavButtons}.
+ *
+ * Assign an [animation class](/docs/components#animations) to the element to
+ * enable animated changing of titles (recommended: 'slide-left-right' or 'nav-title-slide-ios7')
  *
  * @usage
+ *
  * ```html
- * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
- * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
- * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * <body ng-app="starter">
+ *   <!-- The nav bar that will be updated as we navigate -->
+ *   <ion-nav-bar class="bar-positive nav-title-slide-ios7">
+ *   </ion-nav-bar>
+ *
+ *   <!-- where the initial view template will be rendered -->
+ *   <ion-nav-view></ion-nav-view>
+ * </body>
  * ```
+ *
+ * @param {string=} delegate-handle The handle used to identify this navBar
+ * with {@link ionic.service:$ionicNavBarDelegate}.
+ * @param align-title {string=} Where to align the title of the navbar.
+ * Available: 'left', 'right', 'center'. Defaults to 'center'.
  */
-.directive('ionRadio', function() {
+.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
+function($ionicViewService, $rootScope, $animate, $compile) {
+
   return {
     restrict: 'E',
-    replace: true,
-    require: '?ngModel',
-    scope: {
-      ngModel: '=?',
-      ngValue: '=?',
-      ngChange: '&',
+    controller: '$ionicNavBar',
+    scope: true,
+    compile: function(tElement, tAttrs) {
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      tElement
+        .addClass('bar bar-header nav-bar')
+        .append(
+          '<div class="buttons left-buttons"> ' +
+          '</div>' +
+          '<h1 ng-bind-html="title" class="title"></h1>' +
+          '<div class="buttons right-buttons"> ' +
+          '</div>'
+        );
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, navBarCtrl) {
+        navBarCtrl._headerBarView = new ionic.views.HeaderBar({
+          el: $element[0],
+          alignTitle: $attr.alignTitle || 'center'
+        });
+
+        //defaults
+        $scope.backButtonShown = false;
+        $scope.shouldAnimate = true;
+        $scope.isReverse = false;
+        $scope.isInvisible = true;
+        $scope.$parent.$hasHeader = true;
+
+        $scope.$on('$destroy', function() {
+          $scope.$parent.$hasHeader = false;
+        });
+
+        $scope.$watch(function() {
+          return ($scope.isReverse ? ' reverse' : '') +
+            ($scope.isInvisible ? ' invisible' : '') +
+            (!$scope.shouldAnimate ? ' no-animation' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
+
+      }
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavBackButton
+ * @module ionic
+ * @restrict E
+ * @parent ionNavBar
+ * @description
+ * Creates a back button inside an {@link ionic.directive:ionNavBar}.
+ *
+ * Will show up when the user is able to go back in the current navigation stack.
+ *
+ * By default, will go back when clicked.  If you wish for more advanced behavior, see the
+ * examples below.
+ *
+ * @usage
+ *
+ * With default click action:
+ *
+ * ```html
+ * <ion-nav-bar>
+ *   <ion-nav-back-button class="button-icon">
+ *     <i class="ion-arrow-left-c"></i> Back!
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ *
+ * With custom click action, using {@link ionic.service:$ionicNavBarDelegate}:
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button-icon"
+ *     ng-click="canGoBack && goBack()">
+ *     <i class="ion-arrow-left-c"></i> Back
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.goBack = function() {
+ *     $ionicNavBarDelegate.back();
+ *   };
+ * }
+ * ```
+ *
+ * Displaying the previous title on the back button, again using
+ * {@link ionic.service:$ionicNavBarDelegate}.
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button button-icon ion-arrow-left-c">
+ *     {% raw %}{{getPreviousTitle() || 'Back'}}{% endraw %}
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.getPreviousTitle = function() {
+ *     return $ionicNavBarDelegate.getPreviousTitle();
+ *   };
+ * }
+ * ```
+ */
+.directive('ionNavBackButton', ['$ionicNgClick', function($ionicNgClick) {
+  return {
+    restrict: 'E',
+    require: '^ionNavBar',
+    compile: function(tElement, tAttrs) {
+      tElement.addClass('button back-button');
+      return function($scope, $element, $attr, navBarCtrl) {
+        if (!$attr.ngClick) {
+          $scope.$navBack = navBarCtrl.back;
+          $ionicNgClick($scope, $element, '$navBack($event)');
+        }
+
+        //If the current viewstate does not allow a back button,
+        //always hide it.
+        var deregisterListener = $scope.$parent.$on(
+          '$viewHistory.historyChange',
+          function(e, data) {
+            $scope.hasBackButton = !!data.showBack;
+          }
+        );
+        $scope.$on('$destroy', deregisterListener);
+
+        //Make sure both that a backButton is allowed in the first place,
+        //and that it is shown by the current view.
+        $scope.$watch('!!(backButtonShown && hasBackButton)', function(show) {
+          $element.toggleClass('hide', !show);
+        });
+      };
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavButtons
+ * @module ionic
+ * @restrict E
+ * @parent ionNavView
+ *
+ * @description
+ * Use ionNavButtons to set the buttons on your {@link ionic.directive:ionNavBar}
+ * from within an {@link ionic.directive:ionView}.
+ *
+ * Any buttons you declare will be placed onto the navbar's corresponding side,
+ * and then destroyed when the user leaves their parent view.
+ *
+ * @usage
+ * ```html
+ * <ion-nav-bar>
+ * </ion-nav-bar>
+ * <ion-nav-view>
+ *   <ion-view>
+ *     <ion-nav-buttons side="left">
+ *       <button class="button" ng-click="doSomething()">
+ *         I'm a button on the left of the navbar!
+ *       </button>
+ *     </ion-nav-buttons>
+ *     <ion-content>
+ *       Some super content here!
+ *     </ion-content>
+ *   </ion-view>
+ * </ion-nav-view>
+ * ```
+ *
+ * @param {string} side The side to place the buttons on in the parent
+ * {@link ionic.directive:ionNavBar}. Available: 'left' or 'right'.
+ */
+.directive('ionNavButtons', ['$compile', '$animate', function($compile, $animate) {
+  return {
+    require: '^ionNavBar',
+    restrict: 'E',
+    compile: function($element, $attrs) {
+      var content = $element.contents().remove();
+      return function($scope, $element, $attrs, navBarCtrl) {
+        var navElement = $attrs.side === 'right' ?
+          navBarCtrl.rightButtonsElement :
+          navBarCtrl.leftButtonsElement;
+
+        //Put all of our inside buttons into their own div,
+        //so we can remove them all when this element dies -
+        //even if the buttons have changed through an ng-repeat or the like,
+        //we just remove their div parent and they are gone.
+        var buttons = angular.element('<div>').append(content);
+
+        //Compile buttons inside content so they have access to everything
+        //something inside content does (eg parent ionicScroll)
+        $element.append(buttons);
+        $compile(buttons)($scope);
+
+        //Append buttons to navbar
+        $animate.enter(buttons, navElement);
+
+        //When our ion-nav-buttons container is destroyed,
+        //destroy everything in the navbar
+        $scope.$on('$destroy', function() {
+          $animate.leave(buttons);
+        });
+
+        // The original element is just a completely empty <ion-nav-buttons> element.
+        // make it invisible just to be sure it doesn't change any layout
+        $element.css('display', 'none');
+      };
+    }
+  };
+}]);
+
+(function() {
+'use strict';
+
+angular.module('ionic.ui.popup', [])
+
+/**
+ * @private
+ */
+.directive('ionPopupBackdrop', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    template: '<div class="popup-backdrop"></div>'
+  }
+})
+
+/**
+ * @private
+ */
+.directive('ionPopup', ['$ionicBind', function($ionicBind) {
+  return {
+    restrict: 'E',
+    replace: true,
+    transclude: true,
+    scope: true,
+    template:
+      '<div class="popup">' +
+        '<div class="popup-head">' +
+          '<h3 class="popup-title" ng-bind-html="title"></h3>' +
+          '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
+        '</div>' +
+        '<div class="popup-body" ng-transclude>' +
+        '</div>' +
+        '<div class="popup-buttons row">' +
+          '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
+        '</div>' +
+      '</div>',
+    link: function($scope, $element, $attr) {
+      $ionicBind($scope, $attr, {
+        title: '@',
+        buttons: '=',
+        $onButtonTap: '&onButtonTap',
+        $onClose: '&onClose'
+      });
+
+      $scope._buttonTapped = function(button, event) {
+        var result = button.onTap && button.onTap(event);
+
+        // A way to return false
+        if(event.defaultPrevented) {
+          return $scope.$onClose({button: button, result: false, event: event });
+        }
+
+        // Truthy test to see if we should close the window
+        if(result) {
+          return $scope.$onClose({button: button, result: result, event: event });
+        }
+        $scope.$onButtonTap({button: button, event: event});
+      }
+    }
+  };
+}]);
+
+})();
+
+(function(ionic) {
+'use strict';
+
+angular.module('ionic.ui.radio', [])
+
+/**
+ * @ngdoc directive
+ * @name ionRadio
+ * @module ionic
+ * @restrict E
+ * @description
+ * No different than the HTML radio input, except it's styled differently.
+ *
+ * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ *
+ * @usage
+ * ```html
+ * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
+ * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
+ * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * ```
+ */
+.directive('ionRadio', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    require: '?ngModel',
+    scope: {
+      ngModel: '=?',
+      ngValue: '=?',
+      ngChange: '&',
       icon: '@'
     },
     transclude: true,
@@ -3338,11 +3631,14 @@ angular.module('ionic.ui.scroll', [])
  * @ngdoc directive
  * @name ionScroll
  * @module ionic
+ * @delegate ionic.service:$ionicScrollDelegate
  * @restrict E
  *
  * @description
  * Creates a scrollable container for all content inside.
  *
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
  * @param {string=} direction Which way to scroll. 'x' or 'y'. Default 'y'.
  * @param {boolean=} paging Whether to scroll with paging.
  * @param {expression=} on-refresh Called on pull-to-refresh, triggered by an {@link ionic.directive:ionRefresher}.
@@ -3350,41 +3646,43 @@ angular.module('ionic.ui.scroll', [])
  * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default false.
  * @param {boolean=} scrollbar-x Whether to show the vertical scrollbar. Default true.
  */
-.directive('ionScroll', ['$parse', '$timeout', '$controller', function($parse, $timeout, $controller) {
+.directive('ionScroll', [
+  '$timeout',
+  '$controller',
+  '$ionicBind',
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    template: '<div class="scroll-view"><div class="scroll" ng-transclude></div></div>',
-    transclude: true,
-    scope: {
-      direction: '@',
-      paging: '@',
-      onRefresh: '&',
-      onScroll: '&',
-      scroll: '@',
-      scrollbarX: '@',
-      scrollbarY: '@',
-    },
-
+    scope: true,
     controller: function() {},
+    compile: function(element, attr) {
+      element.addClass('scroll-view');
 
-    compile: function(element, attr, transclude) {
-
-      return {
-        //Prelink <ion-scroll> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr) {
-        var scrollView, scrollCtrl,
-          sc = $element[0].children[0];
+        var scrollView, scrollCtrl;
 
-        if(attr.padding == "true") {
-          sc.classList.add('padding');
+        $ionicBind($scope, $attr, {
+          direction: '@',
+          paging: '@',
+          $onScroll: '&onScroll',
+          scroll: '@',
+          scrollbarX: '@',
+          scrollbarY: '@',
+        });
+
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
         }
         if($scope.$eval($scope.paging) === true) {
-          sc.classList.add('scroll-paging');
+          innerElement.addClass('scroll-paging');
         }
 
         if(!$scope.direction) { $scope.direction = 'y'; }
@@ -3392,6 +3690,7 @@ angular.module('ionic.ui.scroll', [])
 
         var scrollViewOptions= {
           el: $element[0],
+          delegateHandle: $attr.delegateHandle,
           paging: isPaging,
           scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
           scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
@@ -3438,33 +3737,97 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 }])
 
 /**
- * @ngdoc controller
- * @name ionicSideMenus
+ * @ngdoc service
+ * @name $ionicSideMenuDelegate
  * @module ionic
- * @group side menu
  *
  * @description
- * Controller for the {@link ionic.directive:ionSideMenus} directive.
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleLeft
- * @description Toggle the left side menu (if it exists).
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleRight
- * @description Toggle the right side menu (if it exists).
+ * Delegate for controlling the {@link ionic.directive:ionSideMenus} directive.
+ *
+ * Methods called directly on the $ionicSideMenuDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSideMenuDelegate#$getByHandle $getByHandle}
+ * method to control specific ionSideMenus instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-side-menus>
+ *     <ion-pane ion-side-menu-content>
+ *       Content!
+ *       <button ng-click="toggleLeftSideMenu()">
+ *         Toggle Left Side Menu
+ *       </button>
+ *     </ion-pane>
+ *     <ion-side-menu side="left">
+ *       Left Menu!
+ *     <ion-side-menu>
+ *   </ion-side-menus>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicSideMenuDelegate) {
+ *   $scope.toggleLeftSideMenu = function() {
+ *     $ionicSideMenuDelegate.toggleLeft();
+ *   };
+ * }
+ * ```
  */
+.service('$ionicSideMenuDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleLeft
+   * @description Toggle the left side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleRight
+   * @description Toggle the right side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenLeft
+   * @returns {boolean} Whether the left menu is currently opened.
+   */
+  'isOpenLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenRight
+   * @returns {boolean} Whether the right menu is currently opened.
+   */
+  'isOpenRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#canDragContent
+   * @param {boolean=} canDrag Set whether the content can or cannot be dragged to open
+   * side menus.
+   * @returns {boolean} Whether the content can be dragged to open side menus.
+   */
+  'canDragContent',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSideMenus} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSideMenuDelegate.$getByHandle('my-handle').toggleLeft();`
+   */
+]))
 
 /**
  * @ngdoc directive
  * @name ionSideMenus
  * @module ionic
+ * @delegate ionic.service:$ionicSideMenuDelegate
  * @restrict E
- * @group side menu
- * @groupMainItem
- * @controller ionicSideMenus
  *
  * @description
  * A container element for side menu(s) and the main content. Allows the left
@@ -3479,14 +3842,14 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  *
  * @usage
  * To use side menus, add an `<ion-side-menus>` parent element,
- * an `<ion-pane ion-side-menu-content>` for the center content,
+ * an `<ion-side-menu-content>` for the center content,
  * and one or more `<ion-side-menu>` directives.
  *
  * ```html
  * <ion-side-menus>
  *   <!-- Center content -->
- *   <ion-pane ion-side-menu-content ng-controller="ContentController">
- *   </ion-pane>
+ *   <ion-side-menu-content ng-controller="ContentController">
+ *   </io-side-menu-content>
  *
  *   <!-- Left menu -->
  *   <ion-side-menu side="left">
@@ -3498,20 +3861,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * </ion-side-menus>
  * ```
  * ```js
- * function ContentController($scope) {
+ * function ContentController($scope, $ionicSideMenuDelegate) {
  *   $scope.toggleLeft = function() {
- *     $scope.sideMenuController.toggleLeft();
+ *     $ionicSideMenuDelegate.toggleLeft();
  *   };
  * }
  * ```
  *
- * @param {expression=} model The model to assign this side menu container's {@link ionic.controller:ionicSideMenus} controller to. By default, assigns  to $scope.sideMenuController.
+ * @param {string=} delegate-handle The handle used to identify this side menu
+ * with {@link ionic.service:$ionicSideMenuDelegate}.
  *
  */
 .directive('ionSideMenus', function() {
   return {
     restrict: 'ECA',
-    controller: ['$scope', '$attrs', '$parse', function($scope, $attrs, $parse) {
+    controller: ['$scope', '$attrs', '$ionicSideMenuDelegate', function($scope, $attrs, $ionicSideMenuDelegate) {
       var _this = this;
 
       angular.extend(this, ionic.controllers.SideMenuController.prototype);
@@ -3521,9 +3885,20 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         right: { width: 275 }
       });
 
+      this.canDragContent = function(canDrag) {
+        if (arguments.length) {
+          $scope.dragContent = !!canDrag;
+        }
+        return $scope.dragContent;
+      };
+
       $scope.sideMenuContentTranslateX = 0;
 
-      $parse($attrs.model || 'sideMenuController').assign($scope, this);
+      var deregisterInstance = $ionicSideMenuDelegate._registerInstance(
+        this, $attrs.delegateHandle
+      );
+
+      $scope.$on('$destroy', deregisterInstance);
     }],
     replace: true,
     transclude: true,
@@ -3535,21 +3910,18 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @ngdoc directive
  * @name ionSideMenuContent
  * @module ionic
- * @restrict A
- * @group side menu
+ * @restrict E
  * @parent ionic.directive:ionSideMenus
  *
  * @description
  * A container for the main visible content, sibling to one or more
  * {@link ionic.directive:ionSideMenu} directives.
  *
- * An attribute directive, recommended to be used as part of an `<ion-pane>` element.
- *
  * @usage
  * ```html
- * <div ion-side-menu-content
- *   drag-content="canDragContent()">
- * </div>
+ * <ion-side-menu-content
+ *   drag-content="canDrag">
+ * </ion-side-menu-content>
  * ```
  * For a complete side menu example, see the
  * {@link ionic.directive:ionSideMenus} documentation.
@@ -3559,20 +3931,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  */
 .directive('ionSideMenuContent', ['$timeout', '$ionicGesture', function($timeout, $ionicGesture) {
   return {
-    restrict: 'AC',
+    restrict: 'EA', //DEPRECATED 'A'
     require: '^ionSideMenus',
     scope: true,
-    compile: function(element, attr, transclude) {
-      return function($scope, $element, $attr, sideMenuCtrl) {
+    compile: function(element, attr) {
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, sideMenuCtrl) {
 
-        $element.addClass('menu-content');
+        $element.addClass('menu-content pane');
 
         if (angular.isDefined(attr.dragContent)) {
           $scope.$watch(attr.dragContent, function(value) {
-            $scope.dragContent = value;
+            sideMenuCtrl.canDragContent(value);
           });
         } else {
-          $scope.dragContent = true;
+          sideMenuCtrl.canDragContent(true);
         }
 
         var defaultPrevented = false;
@@ -3653,7 +4026,7 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
           $ionicGesture.off(releaseGesture, 'release', dragReleaseFn);
           ionic.off('tap', contentTap, $element[0]);
         });
-      };
+      }
     }
   };
 }])
@@ -3663,7 +4036,6 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @name ionSideMenu
  * @module ionic
  * @restrict E
- * @group side menu
  * @parent ionic.directive:ionSideMenus
  *
  * @description
@@ -3688,14 +4060,13 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
   return {
     restrict: 'E',
     require: '^ionSideMenus',
-    replace: true,
-    transclude: true,
     scope: true,
-    template: '<div class="menu menu-{{side}}"></div>',
-    compile: function(element, attr, transclude) {
+    compile: function(element, attr) {
       angular.isUndefined(attr.isEnabled) && attr.$set('isEnabled', 'true');
       angular.isUndefined(attr.width) && attr.$set('width', '275');
 
+      element.addClass('menu menu-' + attr.side);
+
       return function($scope, $element, $attr, sideMenuCtrl) {
         $scope.side = $attr.side || 'left';
 
@@ -3714,14 +4085,79 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         $scope.$watch($attr.isEnabled, function(val) {
           sideMenu.setIsEnabled(!!val);
         });
-
-        transclude($scope, function(clone) {
-          $element.append(clone);
-        });
       };
     }
   };
-});
+})
+
+/**
+ * @ngdoc directive
+ * @name menuToggle
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Toggle a side menu on the given side
+ *
+ * @usage
+ * Below is an example of a link within a nav bar. Tapping this link would
+ * automatically open the given side menu
+ *
+ * ```html
+ * <ion-view>
+ *   <ion-nav-buttons side="left">
+ *    <button menu-toggle="left" class="button button-icon icon ion-navicon"></button>
+ *   </ion-nav-buttons>
+ *  ...
+ * </ion-view>
+ * ```
+ */
+.directive('menuToggle', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      var side = $scope.$eval($attr.menuToggle) || 'left';
+      $element.bind('click', function(){
+        if(side === 'left') {
+          sideMenuCtrl.toggleLeft();
+        } else if(side === 'right') {
+          sideMenuCtrl.toggleRight();
+        }
+      });
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name menuClose
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Closes a side menu which is currently opened.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would
+ * automatically close the currently opened menu
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('menuClose', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      $element.bind('click', function(){
+        sideMenuCtrl.close();
+      });
+    }
+  };
+}]);
+
 })();
 
 (function() {
@@ -3730,6 +4166,102 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 angular.module('ionic.ui.slideBox', [])
 
 /**
+ * @ngdoc service
+ * @name $ionicSlideBoxDelegate
+ * @module ionic
+ * @description
+ * Delegate that controls the {@link ionic.directive:ionSlideBox} directive.
+ *
+ * Methods called directly on the $ionicSlideBoxDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSlideBoxDelegate#$getByHandle $getByHandle}
+ * method to control specific slide box instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-slide-box>
+ *     <ion-slide>
+ *       <div class="box blue">
+ *         <button ng-click="nextSlide()">Next slide!</button>
+ *       </div>
+ *     </ion-slide>
+ *     <ion-slide>
+ *       <div class="box red">
+ *         Slide 2!
+ *       </div>
+ *     </ion-slide>
+ *   </ion-slide-box>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicSlideBoxDelegate) {
+ *   $scope.nextSlide = function() {
+ *     $ionicSlideBoxDelegate.next();
+ *   }
+ * }
+ * ```
+ */
+.service('$ionicSlideBoxDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#update
+   * @description
+   * Update the slidebox (for example if using Angular with ng-repeat,
+   * resize it for the elements inside).
+   */
+  'update',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slide
+   * @param {number} to The index to slide to.
+   * @param {number=} speed The number of milliseconds for the change to take.
+   */
+  'slide',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#previous
+   * @description Go to the previous slide. Wraps around if at the beginning.
+   */
+  'previous',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#next
+   * @description Go to the next slide. Wraps around if at the end.
+   */
+  'next',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#stop
+   * @description Stop sliding. The slideBox will not move again until
+   * explicitly told to do so.
+   */
+  'stop',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#currentIndex
+   * @returns number The index of the current slide.
+   */
+  'currentIndex',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slidesCount
+   * @returns number The number of slides there are currently.
+   */
+  'slidesCount'
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSlideBox} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSlideBoxDelegate.$getByHandle('my-handle').stop();`
+   */
+]))
+
+/**
  * The internal controller for the slide box controller.
  */
 
@@ -3737,8 +4269,8 @@ angular.module('ionic.ui.slideBox', [])
  * @ngdoc directive
  * @name ionSlideBox
  * @module ionic
+ * @delegate ionic.service:$ionicSlideBoxDelegate
  * @restrict E
- * @controller ionicSlideBox
  * @description
  * The Slide Box is a multi-page container where each page can be swiped or dragged between:
  *
@@ -3759,7 +4291,8 @@ angular.module('ionic.ui.slideBox', [])
  * </ion-slide-box>
  * ```
  *
- * @param {expression=} model The model to assign this slide box container's {@link ionic.controller:ionicSlideBox} controller to. By default, assigns to $scope.slideBoxController.
+ * @param {string=} delegate-handle The handle used to identify this slideBox
+ * with {@link ionic.service:$ionicSlideBoxDelegate}.
  * @param {boolean=} does-continue Whether the slide box should automatically slide.
  * @param {number=} slide-interval How many milliseconds to wait to change slides (if does-continue is true). Defaults to 4000.
  * @param {boolean=} show-pager Whether a pager should be shown for this slide box.
@@ -3767,7 +4300,11 @@ angular.module('ionic.ui.slideBox', [])
  * @param {expression=} on-slide-changed Expression called whenever the slide is changed.
  * @param {expression=} active-slide Model to bind the current slide to.
  */
-.directive('ionSlideBox', ['$timeout', '$compile', '$ionicSlideBoxDelegate', function($timeout, $compile, $ionicSlideBoxDelegate) {
+.directive('ionSlideBox', [
+  '$timeout',
+  '$compile',
+  '$ionicSlideBoxDelegate',
+function($timeout, $compile, $ionicSlideBoxDelegate) {
   return {
     restrict: 'E',
     replace: true,
@@ -3780,7 +4317,7 @@ angular.module('ionic.ui.slideBox', [])
       onSlideChanged: '&',
       activeSlide: '=?'
     },
-    controller: ['$scope', '$element', '$attrs', '$parse', function($scope, $element, $attrs, $parse) {
+    controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
       var _this = this;
 
       var continuous = $scope.$eval($scope.doesContinue) === true;
@@ -3826,9 +4363,12 @@ angular.module('ionic.ui.slideBox', [])
         slider.slide(index);
       });
 
-      $parse($attrs.model || 'slideBoxController').assign($scope.$parent, slider);
+      //Exposed for testing
+      this.__slider = slider;
 
-      $ionicSlideBoxDelegate.register($scope, $element);
+      var deregisterInstance = $ionicSlideBoxDelegate._registerInstance(slider, $attrs.delegateHandle);
+
+      $scope.$on('$destroy', deregisterInstance);
 
       this.slidesCount = function() {
         return slider.slidesCount();
@@ -3908,32 +4448,80 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
 }])
 
 /**
- * @ngdoc controller
- * @group tab bar
- * @name ionicTabs
+ * @ngdoc service
+ * @name $ionicTabsDelegate
  * @module ionic
  *
  * @description
- * Controller for the {@link ionic.directive:ionTabs} directive.
+ * Delegate for controlling the {@link ionic.directive:ionTabs} directive.
+ *
+ * Methods called directly on the $ionicTabsDelegate service will control all ionTabs
+ * directives. Use the {@link ionic.service:$ionicTabsDelegate#$getByHandle $getByHandle}
+ * method to control specific ionTabs instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-tabs>
+ *
+ *     <ion-tab title="Tab 1">
+ *       Hello tab 1!
+ *       <button ng-click="selectTabWithIndex(1)">Select tab 2!</button>
+ *     </ion-tab>
+ *     <ion-tab title="Tab 2">Hello tab 2!</ion-tab>
+ *
+ *   </ion-tabs>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicTabsDelegate) {
+ *   $scope.selectTabWithIndex = function(index) {
+ *     $ionicTabsDelegate.select(index);
+ *   }
+ * }
+ * ```
  */
-.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
-  var _selectedTab = null;
-  var self = this;
-  self.tabs = [];
-
+.service('$ionicTabsDelegate', delegateService([
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTabIndex
+   * @name $ionicTabsDelegate#select
+   * @description Select the tab matching the given index.
+   *
+   * @param {number} index Index of the tab to select.
+   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's
+   * view history (if it exists) and use it, or just load the default page.
+   * Default false.
+   * Hint: you probably want this to be true if you have an
+   * {@link ionic.directive:ionNavView} inside your tab.
+   */
+  'select',
+  /**
+   * @ngdoc method
+   * @name $ionicTabsDelegate#selectedIndex
    * @returns `number` The index of the selected tab, or -1.
    */
-  self.selectedTabIndex = function() {
-    return self.tabs.indexOf(_selectedTab);
-  };
+  'selectedIndex'
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTab
-   * @returns `ionTab` The selected tab or null if none selected.
+   * @name $ionicTabsDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionTabs} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicTabsDelegate.$getByHandle('my-handle').select(0);`
    */
+]))
+
+.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
+  var _selectedTab = null;
+  var self = this;
+  self.tabs = [];
+
+  self.selectedIndex = function() {
+    return self.tabs.indexOf(_selectedTab);
+  };
   self.selectedTab = function() {
     return _selectedTab;
   };
@@ -3974,17 +4562,6 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
     }
   };
 
-  /**
-   * @ngdoc method
-   * @name ionicTabs#select
-   * @description Select the given tab or tab index.
-   *
-   * @param {ionTab|number} tabOrIndex A tab object or index of a tab to select
-   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's view history
-   * (if it exists) and use it, or just loading the default page. Default false.
-   * Hint: you probably want this to be true if you have an
-   * {@link ionic.directive:ionNavView} inside your tab.
-   */
   self.select = function(tab, shouldEmitEvent) {
     var tabIndex;
     if (angular.isNumber(tab)) {
@@ -4033,20 +4610,24 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  * @ngdoc directive
  * @name ionTabs
  * @module ionic
+ * @delegate ionic.service:$ionicTabsDelegate
  * @restrict E
- * @group tab bar
- * @groupMainItem
- * @controller ionicTabs
  * @codepen KbrzJ
  *
  * @description
- * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed through.
+ * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed
+ * through.
  *
- * See the {@link ionic.directive:ionTab} directive's documentation for more details.
+ * Assign any [tabs class](/docs/components#tabs) or
+ * [animation class](/docs/components#animation) to the element to define
+ * its look and feel.
+ *
+ * See the {@link ionic.directive:ionTab} directive's documentation for more details on
+ * individual tabs.
  *
  * @usage
  * ```html
- * <ion-tabs tabs-type="tabs-icon-only">
+ * <ion-tabs class="tabs-positive tabs-icon-only">
  *
  *   <ion-tab title="Home" icon-on="ion-ios7-filing" icon-off="ion-ios7-filing-outline">
  *     <!-- Tab 1 content -->
@@ -4059,48 +4640,49 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  *   <ion-tab title="Settings" icon-on="ion-ios7-gear" icon-off="ion-ios7-gear-outline">
  *     <!-- Tab 3 content -->
  *   </ion-tab>
+ *
  * </ion-tabs>
  * ```
  *
- * @param {expression=} model The model to assign this tab bar's {@link ionic.controller:ionicTabs} controller to. By default, assigns  to $scope.tabsController.
- * @param {string=} animation The animation to use when changing between tab pages.
- * @param {string=} tabs-style The class to apply to the tabs. Defaults to 'tabs-positive'.
- * @param {string=} tabs-type Whether to put the tabs on the top or bottom. Defaults to 'tabs-bottom'.
+ * @param {string=} delegate-handle The handle used to identify these tabs
+ * with {@link ionic.service:$ionicTabsDelegate}.
  */
 
-.directive('ionTabs', ['$ionicViewService', '$ionicBind', '$parse', function($ionicViewService, $ionicBind, $parse) {
+.directive('ionTabs', ['$ionicViewService', '$ionicTabsDelegate', function($ionicViewService, $ionicTabsDelegate) {
   return {
     restrict: 'E',
-    replace: true,
     scope: true,
-    transclude: true,
     controller: 'ionicTabs',
-    template:
-    '<div class="view {{$animation}}">' +
-      '<div class="tabs {{$tabsStyle}} {{$tabsType}}">' +
-      '</div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(angular.isUndefined(attr.tabsType)) attr.$set('tabsType', 'tabs-positive');
-
-      return function link($scope, $element, $attr, tabsCtrl) {
-
-        $ionicBind($scope, $attr, {
-          $animation: '@animation',
-          $tabsStyle: '@tabsStyle',
-          $tabsType: '@tabsType'
-        });
+    compile: function(element, attr) {
+      element.addClass('view');
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="tabs"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, tabsCtrl) {
+        var deregisterInstance = $ionicTabsDelegate._registerInstance(
+          tabsCtrl, $attr.delegateHandle
+        );
 
-        $parse(attr.model || 'tabsController').assign($scope, tabsCtrl);
+        $scope.$on('$destroy', deregisterInstance);
 
         tabsCtrl.$scope = $scope;
         tabsCtrl.$element = $element;
         tabsCtrl.$tabsElement = angular.element($element[0].querySelector('.tabs'));
 
-        transclude($scope, function(clone) {
-          $element.append(clone);
+        var el = $element[0];
+        $scope.$watch(function() { return el.className; }, function(value) {
+          var isTabsTop = value.indexOf('tabs-top') !== -1;
+          var isHidden = value.indexOf('tabs-item-hide') !== -1;
+          $scope.$hasTabs = !isTabsTop && !isHidden;
+          $scope.$hasTabsTop = isTabsTop && !isHidden;
         });
-      };
+        $scope.$on('$destroy', function() {
+          $scope.$hasTabs = $scope.$hasTabsTop = null;
+        });
+      }
     }
   };
 }])
@@ -4112,7 +4694,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
 
 /**
  * @ngdoc directive
- * @group tab bar
  * @name ionTab
  * @module ionic
  * @restrict E
@@ -4123,8 +4704,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
  *
  * Each ionTab has its own view history.
  *
- * Whenever a tab is shown or hidden, it will broadcast a 'tab.shown' or 'tab.hidden' event.
- *
  * @usage
  * ```html
  * <ion-tab
@@ -4146,7 +4725,7 @@ function($scope, $ionicViewService, $rootScope, $element) {
  * @param {expression=} badge-style The style of badge to put on this tab (eg tabs-positive).
  * @param {expression=} on-select Called when this tab is selected.
  * @param {expression=} on-deselect Called when this tab is deselected.
- * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.controller:ionicTabs#select ionicTabBar controller's select method}.
+ * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.service:$ionicTabsDelegate#select $ionicTabsDelegate.select()}.
  */
 .directive('ionTab', ['$rootScope', '$animate', '$ionicBind', '$compile', '$ionicViewService',
 function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
@@ -4167,6 +4746,11 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         element[0].querySelector('data-ion-nav-view');
       var navViewName = navView && navView.getAttribute('name');
 
+      var tabNavItem = angular.element(
+        element[0].querySelector('ion-tab-nav') ||
+        element[0].querySelector('data-ion-tab-nav')
+      ).remove();
+
       //Remove the contents of the element so we can compile them later, if tab is selected
       var tabContent = angular.element('<div class="pane">')
         .append( element.contents().remove() );
@@ -4175,6 +4759,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
           tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $ionicBind($scope, $attr, {
           animate: '=',
           onSelect: '&',
@@ -4213,9 +4800,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         tabsCtrl.$tabsElement.append($compile(tabNavElement)($scope));
 
         $scope.$watch('$tabSelected', function(value) {
-          if (!value) {
-            $scope.$broadcast('tab.hidden', $scope);
-          }
           childScope && childScope.$destroy();
           childScope = null;
           childElement && $animate.leave(childElement);
@@ -4225,7 +4809,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
             childElement = tabContent.clone();
             $animate.enter(childElement, tabsCtrl.$element);
             $compile(childElement)(childScope);
-            $scope.$broadcast('tab.shown', $scope);
           }
         });
 
@@ -4246,7 +4829,7 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
     replace: true,
     require: ['^ionTabs', '^ionTab'],
     template:
-    '<a ng-class="{active: isTabActive(), \'has-badge\':badge}" ' +
+    '<a ng-class="{\'tab-item-active\': isTabActive(), \'has-badge\':badge}" ' +
       ' class="tab-item">' +
       '<span class="badge {{badgeStyle}}" ng-if="badge">{{badge}}</span>' +
       '<i class="icon {{getIconOn()}}" ng-if="getIconOn() && isTabActive()"></i>' +
@@ -4266,6 +4849,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         var tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $scope.selectTab = function(e) {
           e.preventDefault();
           tabsCtrl.select(tabCtrl.$scope, true);
@@ -4400,249 +4986,58 @@ angular.module('ionic.ui.touch', [])
       ionic.tapElement(e.target, e);
     }
     return function(scope, element, clickExpr) {
-      var clickHandler = $parse(clickExpr);
-
-      element.on('click', function(event) {
-        scope.$apply(function() {
-          clickHandler(scope, {$event: (event)});
-        });
-      });
-
-      ionic.on('tap', onTap, element[0]);
-
-      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
-      // something else nearby.
-      element.onclick = function(event) { };
-
-      scope.$on('$destroy', function () {
-        ionic.off('tap', onTap, element[0]);
-      });
-    };
-  }])
-
-  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
-    return function(scope, element, attr) {
-      $ionicNgClick(scope, element, attr.ngClick);
-    };
-  }])
-
-  .directive('ionStopEvent', function () {
-    function stopEvent(e) {
-      e.stopPropagation();
-    }
-    return {
-      restrict: 'A',
-      link: function (scope, element, attr) {
-        element.bind(attr.ionStopEvent, stopEvent);
-      }
-    };
-  });
-
-
-})(window.angular, window.ionic);
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
-
-/**
- * @ngdoc directive
- * @name ionNavBar
- * @module ionic
- * @restrict E
- *
- * @usage
- * If have an {@link ionic.directive:ionNavView} directive, we can also create an
- * <ion-nav-bar>, which will create a topbar that updates as the application state changes.
- * We can also add some styles and set up animations:
- *
- * ```html
- * <body ng-app="starter">
- *   <!-- The nav bar that will be updated as we navigate -->
- *   <ion-nav-bar animation="nav-title-slide-ios7"
- *            type="bar-positive"
- *            back-button-type="button-icon"
- *            back-button-icon="ion-arrow-left-c"></ion-nav-bar>
- *
- *   <!-- where the initial view template will be rendered -->
- *   <ion-nav-view animation="slide-left-right"></ion-nav-view>
- * </body>
- * ```
- *
- * @param {string=} back-button-type The type of the back button's icon. Available: 'button-icon' or just 'button'.
- * @param {string=} back-button-icon The icon to use for the back button. For example, 'ion-arrow-left-c'.
- * @param {string=} back-button-label The label to use for the back button. For example, 'Back'.
- * @param animation {string=} The animation used to transition between titles.
- * @param type {string=} The className for the navbar.  For example, 'bar-positive'.
- * @param align {string=} Where to align the title of the navbar. Available: 'left', 'right', 'center'. Defaults to 'center'.
- */
-.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
-                function( $ionicViewService,   $rootScope,   $animate,   $compile) {
-
-  return {
-    restrict: 'E',
-    replace: true,
-    scope: {
-      animation: '@',
-      type: '@',
-      backType: '@backButtonType',
-      backLabel: '@backButtonLabel',
-      backIcon: '@backButtonIcon',
-      alignTitle: '@'
-    },
-    controller: function() {},
-    template:
-    '<header class="bar bar-header nav-bar{{navBarClass()}}">' +
-      '<ion-nav-back-button ng-if="(backType || backLabel || backIcon)" ' +
-        'type="backType" label="backLabel" icon="backIcon" class="hide" ' +
-        'ng-class="{\'hide\': !backButtonEnabled}">' +
-      '</ion-nav-back-button>' +
-      '<div class="buttons left-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in leftButtons" ' +
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-
-      '<h1 ng-bind-html="title" class="title"></h1>' +
-
-      '<div class="buttons right-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in rightButtons" '+
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-    '</header>',
-    compile: function(tElement, tAttrs) {
-
-      return function link($scope, $element, $attr) {
-        //defaults
-        $scope.backButtonEnabled = false;
-        $scope.animateEnabled = true;
-        $scope.isReverse = false;
-        $scope.isInvisible = true;
-
-        $scope.navBarClass = function() {
-          return ($scope.type ? ' ' + $scope.type : '') +
-            ($scope.isReverse ? ' reverse' : '') +
-            ($scope.isInvisible ? ' invisible' : '') +
-            (!$scope.animationDisabled && $scope.animation ? ' ' + $scope.animation : '');
-        };
-
-        // Initialize our header bar view which will handle
-        // resizing and aligning our title labels
-        var hb = new ionic.views.HeaderBar({
-          el: $element[0],
-          alignTitle: $scope.alignTitle || 'center'
-        });
-        $scope.headerBarView = hb;
-
-        //Navbar events
-        $scope.$on('viewState.viewEnter', function(e, data) {
-          updateHeaderData(data);
-        });
-        $scope.$on('viewState.showNavBar', function(e, showNavBar) {
-          $scope.isInvisible = !showNavBar;
-        });
+      var clickHandler = $parse(clickExpr);
 
-        // All of these these are emitted from children of a sibling scope,
-        // so we listen on parent so we can catch them as they bubble up
-        var unregisterEventListeners = [
-          $scope.$parent.$on('$viewHistory.historyChange', function(e, data) {
-            $scope.backButtonEnabled = !!data.showBack;
-          }),
-          $scope.$parent.$on('viewState.leftButtonsChanged', function(e, data) {
-            $scope.leftButtons = data;
-          }),
-          $scope.$parent.$on('viewState.rightButtonsChanged', function(e, data) {
-            $scope.rightButtons = data;
-          }),
-          $scope.$parent.$on('viewState.showBackButton', function(e, data) {
-            $scope.backButtonEnabled = !!data;
-          }),
-          $scope.$parent.$on('viewState.titleUpdated', function(e, data) {
-            $scope.title = data && data.title || '';
-          })
-        ];
-        $scope.$on('$destroy', function() {
-          for (var i=0; i<unregisterEventListeners.length; i++)
-            unregisterEventListeners[i]();
+      element.on('click', function(event) {
+        scope.$apply(function() {
+          clickHandler(scope, {$event: (event)});
         });
+      });
 
-        function updateHeaderData(data) {
-
-          if (angular.isDefined(data.hideBackButton)) {
-            $scope.backButtonEnabled = !!data.hideBackButton;
-          }
-          $scope.isReverse = data.navDirection == 'back';
-          $scope.animateEnabled = !!(data.navDirection && data.animate !== false);
-
-          $scope.leftButtons = data.leftButtons;
-          $scope.rightButtons = data.rightButtons;
-          $scope.oldTitle = $scope.title;
-          $scope.title = data && data.title || '';
-
-          // only change if they're different
-          if($scope.oldTitle !== $scope.title) {
-            if (!$scope.animateEnabled) {
-              //If no animation, we're done!
-              hb.align();
-            } else {
-              animateTitles();
-            }
-          }
-        }
+      ionic.on("release", onTap, element[0]);
 
-        function animateTitles() {
-          var oldTitleEl, newTitleEl, currentTitles;
+      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
+      // something else nearby.
+      element.onclick = function(event) { };
 
-          //If we have any title right now (or more than one, they could be transitioning on switch),
-          //replace the first one with an oldTitle element
-          currentTitles = $element[0].querySelectorAll('.title');
-          if (currentTitles.length) {
-            oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
-            angular.element(currentTitles[0]).replaceWith(oldTitleEl);
-          }
-          //Compile new title
-          newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
+      scope.$on('$destroy', function () {
+        ionic.off("release", onTap, element[0]);
+      });
+    };
+  }])
 
-          //Animate in one frame
-          ionic.requestAnimationFrame(function() {
+  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
+    return function(scope, element, attr) {
+      $ionicNgClick(scope, element, attr.ngClick);
+    };
+  }])
 
-            oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+  .directive('ionStopEvent', function () {
+    function stopEvent(e) {
+      e.stopPropagation();
+    }
+    return {
+      restrict: 'A',
+      link: function (scope, element, attr) {
+        element.bind(attr.ionStopEvent, stopEvent);
+      }
+    };
+  });
 
-            var insert = oldTitleEl && angular.element(oldTitleEl) || null;
-            $animate.enter(newTitleEl, $element, insert, function() {
-              hb.align();
-            });
 
-            //Cleanup any old titles leftover (besides the one we already did replaceWith on)
-            angular.forEach(currentTitles, function(el) {
-              if (el && el.parentNode) {
-                //Use .remove() to cleanup things like .data()
-                angular.element(el).remove();
-              }
-            });
+})(window.angular, window.ionic);
 
-            //$apply so bindings fire
-            $scope.$digest();
+(function() {
+'use strict';
 
-            //Stop flicker of new title on ios7
-            ionic.requestAnimationFrame(function() {
-              newTitleEl[0].classList.remove('invisible');
-            });
-          });
-        }
-      };
-    }
-  };
-}])
+angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
 
 /**
  * @ngdoc directive
  * @name ionView
  * @module ionic
  * @restrict E
- * @parent ionNavBar
+ * @parent ionNavView
  *
  * @description
  * A container for content, used to tell a parent {@link ionic.directive:ionNavBar}
@@ -4653,7 +5048,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  *
  * ```html
  * <ion-nav-bar></ion-nav-bar>
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <ion-view title="My Page">
  *     <ion-content>
  *       Hello!
@@ -4662,58 +5057,46 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * </ion-nav-view>
  * ```
  *
- * @param {expression=} left-buttons The leftButtons to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {expression=} right-buttons The rightButtons to display on the parent {@link ionic.directive:ionNavBar}.
  * @param {string=} title The title to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideBackButton Whether to hide the back button on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideNavBar Whether to hide the parent {@link ionic.directive:ionNavBar}.
+ * @param {boolean=} hideBackButton Whether to hide the back button on the parent
+ * {@link ionic.directive:ionNavBar} by default.
+ * @param {boolean=} hideNavBar Whether to hide the parent
+ * {@link ionic.directive:ionNavBar} by default.
  */
 .directive('ionView', ['$ionicViewService', '$rootScope', '$animate',
            function( $ionicViewService,   $rootScope,   $animate) {
   return {
     restrict: 'EA',
     priority: 1000,
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      hideBackButton: '@',
-      hideNavBar: '@',
-    },
-
+    require: '^?ionNavBar',
     compile: function(tElement, tAttrs, transclude) {
       tElement.addClass('pane');
       tElement[0].removeAttribute('title');
 
-      return function link($scope, $element, $attr) {
-
-        $rootScope.$broadcast('viewState.viewEnter', {
-          title: $scope.title,
-          navDirection: $scope.$navDirection || $scope.$parent.$navDirection
-        });
-
-        // Should we hide a back button when this tab is shown
-        $scope.hideBackButton = $scope.$eval($scope.hideBackButton);
-        if($scope.hideBackButton) {
-          $rootScope.$broadcast('viewState.showBackButton', false);
+      return function link($scope, $element, $attr, navBarCtrl) {
+        if (!navBarCtrl) {
+          return;
         }
+        var initialTitle = $attr.title;
+        navBarCtrl.changeTitle(initialTitle, $scope.$navDirection);
 
-        // Should the nav bar be hidden for this view or not?
-        $rootScope.$broadcast('viewState.showNavBar', ($scope.hideNavBar !== 'true') );
-
-        // watch for changes in the left buttons
-        $scope.$watch('leftButtons', function(value) {
-          $scope.$emit('viewState.leftButtonsChanged', $scope.leftButtons);
+        // watch for changes in the title, don't set initial value as changeTitle does that
+        $attr.$observe('title', function(val, oldVal) {
+          if (val !== initialTitle) {
+            navBarCtrl.setTitle(val);
+          }
         });
 
-        $scope.$watch('rightButtons', function(val) {
-          $scope.$emit('viewState.rightButtonsChanged', $scope.rightButtons);
+        $scope.$watch($attr.hideBackButton, function(value) {
+          // Should we hide a back button when this tab is shown
+          navBarCtrl.showBackButton(!value);
         });
 
-        // watch for changes in the title
-        $scope.$watch('title', function(val) {
-          $scope.$emit('viewState.titleUpdated', $scope);
+        $scope.$watch($attr.hideNavBar, function(value) {
+          // Should the nav bar be hidden for this view or not?
+          navBarCtrl.showBar(!value);
         });
+
       };
     }
   };
@@ -4721,39 +5104,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
 
 
 /**
-* @private
-*/
-.directive('ionNavBackButton', ['$ionicViewService', '$rootScope',
-                     function($ionicViewService,   $rootScope) {
-
-  function goBack(e) {
-    var backView = $ionicViewService.getBackView();
-    backView && backView.go();
-    e.alreadyHandled = true;
-    return false;
-  }
-
-  return {
-    restrict: 'E',
-    scope: {
-      type: '=',
-      label: '=',
-      icon: '='
-    },
-    replace: true,
-    template:
-    '<button ng-click="goBack($event)" class="button back-button {{type}} ' +
-      '{{(icon && !label) ? \'icon \' + icon : \'\'}}">' +
-      '<i ng-if="icon && label" class="icon {{icon}}"></i> ' +
-      '{{label}}' +
-    '</button>',
-    link: function($scope) {
-      $scope.goBack = goBack;
-    }
-  };
-}])
-
-/**
  * @ngdoc directive
  * @name ionNavView
  * @module ionic
@@ -4787,8 +5137,11 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * {@link ionic.directive:ionNavBar} directive which will render a header bar that updates as we
  * navigate through the navigation stack.
  *
+ * You can any [animation class](/docs/components#animation) on the navView to have its pages slide.
+ * Recommended for page transitions: 'slide-left-right', 'slide-left-right-ios7', 'slide-in-up'.
+ *
  * ```html
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <!-- Center content -->
  *   <ion-nav-bar>
  *   </ion-nav-bar>
@@ -4843,8 +5196,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * @param {string=} name A view name. The name should be unique amongst the other views in the
  * same state. You can have views of the same name that live in different states. For more
  * information, see ui-router's [ui-view documentation](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view).
- * @param {string=} animation The animation to use for views underneath this ionNavView.
- * Defaults to 'slide-left-right'.
  */
 .directive('ionNavView', ['$ionicViewService', '$state', '$compile', '$controller', '$animate',
               function( $ionicViewService,   $state,   $compile,   $controller,   $animate) {
@@ -4857,10 +5208,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     terminal: true,
     priority: 2000,
     transclude: true,
-    controller: ['$scope', function($scope) {
-      this.setNextAnimation = function(anim) {
-        $scope.$nextAnimation = anim;
-      };
+    controller: [function(){
     }],
     compile: function (element, attr, transclude) {
       return function(scope, element, attr, navViewCtrl) {
@@ -4953,10 +5301,45 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     }
   };
   return directive;
+}])
+
+
+/**
+ * @ngdoc directive
+ * @name navClear
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Disables any transition animations between views, along with removing the back
+ * button which would normally show on the next view. This directive is useful for
+ * links within a sideMenu.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would disable
+ * any animations which would normally occur between views.
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('navClear', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    link: function($scope, $element, $attr) {
+      $element.bind('click', function(){
+        $ionicViewService.nextViewOptions({
+          disableAnimate: true,
+          disableBack: true
+        });
+      });
+    }
+  };
 }]);
 
 })();
 
+/*
 (function() {
 'use strict';
 
@@ -4979,8 +5362,9 @@ angular.module('ionic.ui.virtRepeat', [])
   };
 });
 })(ionic);
+*/
 
-
+/*
 (function() {
 'use strict';
 
@@ -5015,7 +5399,6 @@ function isTagNameInList(element, list){
 
 // Utility to find the viewport/content elements given the start element:
 function findViewportAndContent(startElement){
-  /*jshint eqeqeq:false, curly:false */
   var root = $rootElement[0];
   var e, n;
   // Somewhere between the grandparent and the root node
@@ -5105,13 +5488,13 @@ function computeRowHeight(element){
 
 angular.module('ionic.ui.virtualRepeat', [])
 
-/**
- * A replacement for ng-repeat that supports virtual lists.
- * This is not a 1 to 1 replacement for ng-repeat. However, in situations
- * where you have huge lists, this repeater will work with our virtual
- * scrolling to only render items that are showing or will be showing
- * if a scroll is made.
- */
+//
+// A replacement for ng-repeat that supports virtual lists.
+// This is not a 1 to 1 replacement for ng-repeat. However, in situations
+// where you have huge lists, this repeater will work with our virtual
+// scrolling to only render items that are showing or will be showing
+// if a scroll is made.
+//
 .directive('ionVirtualRepeat', ['$log', function($log) {
     return {
       require: ['?ngModel, ^virtualList'],
@@ -5308,46 +5691,335 @@ angular.module('ionic.ui.virtualRepeat', [])
   }]);
 
 })(ionic);
-
-(function() {
-'use strict';
+*/
 
 angular.module('ionic.ui.scroll')
 
 /**
+ * @ngdoc service
+ * @name $ionicScrollDelegate
+ * @module ionic
+ * @description
+ * Delegate for controlling scrollViews (created by
+ * {@link ionic.directive:ionContent} and
+ * {@link ionic.directive:ionScroll} directives).
+ *
+ * Methods called directly on the $ionicScrollDelegate service will control all scroll
+ * views.  Use the {@link ionic.service:$ionicScrollDelegate#$getByHandle $getByHandle}
+ * method to control specific scrollViews.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content>
+ *     <button ng-click="scrollTop()">Scroll to Top!</button>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollTop = function() {
+ *     $ionicScrollDelegate.scrollTop();
+ *   };
+ * }
+ * ```
+ *
+ * Example of advanced usage, with two scroll areas using `delegate-handle`
+ * for fine control.
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content delegate-handle="mainScroll">
+ *     <button ng-click="scrollMainToTop()">
+ *       Scroll content to top!
+ *     </button>
+ *     <ion-scroll delegate-handle="small" style="height: 100px;">
+ *       <button ng-click="scrollSmallToTop()">
+ *         Scroll small area to top!
+ *       </button>
+ *     </ion-scroll>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollMainToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
+ *   };
+ *   $scope.scrollSmallToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('small').scrollTop();
+ *   };
+ * }
+ * ```
+ */
+
+.service('$ionicScrollDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#resize
+   * @description Tell the scrollView to recalculate the size of its container.
+   */
+  'resize',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTop
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTop',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollBottom
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollBottom',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTo
+   * @param {number} left The x-value to scroll to.
+   * @param {number} top The y-value to scroll to.
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTo',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#anchorScroll
+   * @description Tell the scrollView to scroll to the element with an id
+   * matching window.location.hash.
+   *
+   * If no matching element is found, it will scroll to top.
+   *
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'anchorScroll',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#rememberScrollPosition
+   * @description
+   * Will make it so, when this scrollView is destroyed (user leaves the page),
+   * the last scroll position the page was on will be saved, indexed by the
+   * given id.
+   *
+   * Note: for pages associated with a view under an ion-nav-view,
+   * rememberScrollPosition automatically saves their scroll.
+   *
+   * Related methods: scrollToRememberedPosition, forgetScrollPosition (below).
+   *
+   * In the following example, the scroll position of the ion-scroll element
+   * will persist, even when the user changes the toggle switch.
+   *
+   * ```html
+   * <ion-toggle ng-model="shouldShowScrollView"></ion-toggle>
+   * <ion-scroll delegate-handle="myScroll" ng-if="shouldShowScrollView">
+   *   <div ng-controller="ScrollCtrl">
+   *     <ion-list>
+   *       <ion-item ng-repeat="i in items">{{i}}</ion-item>
+   *     </ion-list>
+   *   </div>
+   * </ion-scroll>
+   * ```
+   * ```js
+   * function ScrollCtrl($scope, $ionicScrollDelegate) {
+   *   var delegate = $ionicScrollDelegate.$getByHandle('myScroll');
+   *
+   *   // Put any unique ID here.  The point of this is: every time the controller is recreated
+   *   // we want to load the correct remembered scroll values.
+   *   delegate.rememberScrollPosition('my-scroll-id');
+   *   delegate.scrollToRememberedPosition();
+   *   $scope.items = [];
+   *   for (var i=0; i<100; i++) {
+   *     $scope.items.push(i);
+   *   }
+   * }
+   * ```
+   *
+   * @param {string} id The id to remember the scroll position of this
+   * scrollView by.
+   */
+  'rememberScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#forgetScrollPosition
+   * @description
+   * Stop remembering the scroll position for this scrollView.
+   */
+  'forgetScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollToRememberedPosition
+   * @description
+   * If this scrollView has an id associated with its scroll position,
+   * (through calling rememberScrollPosition), and that position is remembered,
+   * load the position and scroll to it.
+   * @param {boolean=} shouldAnimate Whether to animate the scroll.
+   */
+  'scrollToRememberedPosition'
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * scrollViews with `delegate-handle` matching the given handle.
+   *
+   * Example: `$ionicScrollDelegate.$getByHandle('my-handle').scrollTop();`
+   */
+]))
+
+/**
  * @private
  */
-.controller('$ionicScroll', ['$scope', 'scrollViewOptions', '$timeout', '$ionicScrollDelegate', '$window', function($scope, scrollViewOptions, $timeout, $ionicScrollDelegate, $window) {
+.factory('$$scrollValueCache', function() {
+  return {};
+})
+
+.controller('$ionicScroll', [
+  '$scope',
+  'scrollViewOptions',
+  '$timeout',
+  '$window',
+  '$$scrollValueCache',
+  '$location',
+  '$rootScope',
+  '$document',
+  '$ionicScrollDelegate',
+function($scope, scrollViewOptions, $timeout, $window, $$scrollValueCache, $location, $rootScope, $document, $ionicScrollDelegate) {
 
   var self = this;
 
+  this._scrollViewOptions = scrollViewOptions; //for testing
+
   var element = this.element = scrollViewOptions.el;
+  var $element = this.$element = angular.element(element);
   var scrollView = this.scrollView = new ionic.views.Scroll(scrollViewOptions);
 
+  //Attach self to element as a controller so other directives can require this controller
+  //through `require: '$ionicScroll'
+  //Also attach to parent so that sibling elements can require this
+  ($element.parent().length ? $element.parent() : $element)
+    .data('$$ionicScrollController', this);
+
+  var deregisterInstance = $ionicScrollDelegate._registerInstance(
+    this, scrollViewOptions.delegateHandle
+  );
+
   if (!angular.isDefined(scrollViewOptions.bouncing)) {
     ionic.Platform.ready(function() {
       scrollView.options.bouncing = !ionic.Platform.isAndroid();
     });
   }
 
-  var $element = this.$element = angular.element(element);
-
-  //Attach self to element as a controller so other directives can require this controller
-  //through `require: '$ionicScroll'
-  $element.data('$$ionicScrollController', this);
+  var resize = angular.bind(scrollView, scrollView.resize);
+  ionic.on('resize', resize, $window);
 
-  //Register delegate for event handling
-  $ionicScrollDelegate.register($scope, $element, scrollView);
+  // set by rootScope listener if needed
+  var backListenDone = angular.noop;
 
-  $window.addEventListener('resize', resize);
   $scope.$on('$destroy', function() {
+    deregisterInstance();
+    ionic.off('resize', resize, $window);
     $window.removeEventListener('resize', resize);
+    backListenDone();
+    if (self._rememberScrollId) {
+      $$scrollValueCache[self._rememberScrollId] = scrollView.getValues();
+    }
   });
-  function resize() {
-    scrollView.resize();
-  }
 
-  this.setRefresher = function(refresherScope, refresherElement) {
+  $element.on('scroll', function(e) {
+    var detail = (e.originalEvent || e).detail || {};
+    $scope.$onScroll && $scope.$onScroll({
+      event: e,
+      scrollTop: detail.scrollTop || 0,
+      scrollLeft: detail.scrollLeft || 0
+    });
+  });
+
+  $scope.$on('$viewContentLoaded', function(e, historyData) {
+    //only the top-most scroll area under a view should remember that view's
+    //scroll position
+    if (e.defaultPrevented) { return; }
+    e.preventDefault();
+
+    var viewId = historyData && historyData.viewId;
+    if (viewId) {
+      self.rememberScrollPosition(viewId);
+      self.scrollToRememberedPosition();
+
+      backListenDone = $rootScope.$on('$viewHistory.viewBack', function(e, fromViewId, toViewId) {
+        //When going back from this view, forget its saved scroll position
+        if (viewId === fromViewId) {
+          self.forgetScrollPosition();
+        }
+      });
+    }
+  });
+
+  $timeout(function() {
+    scrollView.run();
+  });
+
+  this._rememberScrollId = null;
+
+  this.resize = function() {
+    return $timeout(resize);
+  };
+
+  this.scrollTop = function(shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(0, 0, !!shouldAnimate);
+    });
+  };
+
+  this.scrollBottom = function(shouldAnimate) {
+    this.resize().then(function() {
+      var max = scrollView.getScrollMax();
+      scrollView.scrollTo(max.left, max.top, !!shouldAnimate);
+    });
+  };
+
+  this.scrollTo = function(left, top, shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(left, top, !!shouldAnimate);
+    });
+  };
+
+  this.anchorScroll = function(shouldAnimate) {
+    this.resize().then(function() {
+      var hash = $location.hash();
+      var elm = hash && $document[0].getElementById(hash);
+      if (hash && elm) {
+        var scroll = ionic.DomUtil.getPositionInParent(elm, self.$element);
+        scrollView.scrollTo(scroll.left, scroll.top, !!shouldAnimate);
+      } else {
+        scrollView.scrollTo(0,0, !!shouldAnimate);
+      }
+    });
+  };
+
+  this.rememberScrollPosition = function(id) {
+    if (!id) {
+      throw new Error("Must supply an id to remember the scroll by!");
+    }
+    this._rememberScrollId = id;
+  };
+  this.forgetScrollPosition = function() {
+    delete $$scrollValueCache[this._rememberScrollId];
+    this._rememberScrollId = null;
+  };
+  this.scrollToRememberedPosition = function(shouldAnimate) {
+    var values = $$scrollValueCache[this._rememberScrollId];
+    if (values) {
+      this.resize().then(function() {
+        scrollView.scrollTo(+values.left, +values.top, shouldAnimate);
+      });
+    }
+  };
+
+
+
+  /**
+   * @private
+   */
+  this._setRefresher = function(refresherScope, refresherElement) {
     var refresher = this.refresher = refresherElement;
     var refresherHeight = self.refresher.clientHeight || 0;
     scrollView.activatePullToRefresh(refresherHeight, function() {
@@ -5361,10 +6033,7 @@ angular.module('ionic.ui.scroll')
       refresherScope.$onRefresh();
     });
   };
-
-  $timeout(function() {
-    scrollView.run();
-  });
 }]);
 
-})();
+
+})();
\ No newline at end of file
diff --git a/phonegap/platforms/android/assets/www/scripts/ionic.js b/phonegap/platforms/android/assets/www/scripts/ionic.js
index 1105ae1..664e471 100644
--- a/phonegap/platforms/android/assets/www/scripts/ionic.js
+++ b/phonegap/platforms/android/assets/www/scripts/ionic.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,13 +12,14 @@
  *
  */
 
+(function() {
 
 // Create namespaces
 //
 window.ionic = {
   controllers: {},
   views: {},
-  version: '{{ VERSION }}'
+  version: '1.0.0-beta.1'
 };
 
 (function(ionic) {
@@ -135,16 +136,19 @@ window.ionic = {
   };
 })(ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
+
+  var readyCallbacks = [];
+  var isDomReady = false;
 
-  var readyCallbacks = [],
-  domReady = function() {
+  function domReady() {
+    isDomReady = true;
     for(var x=0; x<readyCallbacks.length; x++) {
       ionic.requestAnimationFrame(readyCallbacks[x]);
     }
     readyCallbacks = [];
     document.removeEventListener('DOMContentLoaded', domReady);
-  };
+  }
   document.addEventListener('DOMContentLoaded', domReady);
 
   // From the man himself, Mr. Paul Irish.
@@ -164,7 +168,6 @@ window.ionic = {
   * @ngdoc utility
   * @name ionic.DomUtil
   * @module ionic
-  * @group utilities
   */
   ionic.DomUtil = {
     //Call with proper context
@@ -231,12 +234,12 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.DomUtil#ready
      * @description
-     * Call a function when the dom is ready, or if it is already ready
+     * Call a function when the DOM is ready, or if it is already ready
      * call the function immediately.
      * @param {function} callback The function to be called.
      */
     ready: function(cb) {
-      if(document.readyState === "complete") {
+      if(isDomReady || document.readyState === "complete") {
         ionic.requestAnimationFrame(cb);
       } else {
         readyCallbacks.push(cb);
@@ -322,8 +325,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent of element matching the
      * className, or null.
      */
-    getParentWithClass: function(e, className) {
-      while(e.parentNode) {
+    getParentWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e.parentNode && depth--) {
         if(e.parentNode.classList && e.parentNode.classList.contains(className)) {
           return e.parentNode;
         }
@@ -339,8 +343,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent or self matching the
      * className, or null.
      */
-    getParentOrSelfWithClass: function(e, className) {
-      while(e) {
+    getParentOrSelfWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e && depth--) {
         if(e.classList && e.classList.contains(className)) {
           return e;
         }
@@ -371,7 +376,7 @@ window.ionic = {
   //Shortcuts
   ionic.requestAnimationFrame = ionic.DomUtil.requestAnimationFrame;
   ionic.animationFrameThrottle = ionic.DomUtil.animationFrameThrottle;
-})(window.ionic);
+})(this, document, ionic);
 
 /**
  * ion-events.js
@@ -424,7 +429,6 @@ window.ionic = {
    * @ngdoc utility
    * @name ionic.EventController
    * @module ionic
-   * @group utilities
    */
   ionic.EventController = {
     VIRTUALIZED_EVENTS: ['tap', 'swipe', 'swiperight', 'swipeleft', 'drag', 'hold', 'release'],
@@ -494,7 +498,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#onGesture
      * @alias ionic.onGesture
-     * @description Add an event listener for a gesture on an element. 
+     * @description Add an event listener for a gesture on an element.
      * @param {string} eventType The gesture event to listen for.
      * @param {function(e)} callback The function to call when the gesture
      * happens.
@@ -510,7 +514,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#offGesture
      * @alias ionic.offGesture
-     * @description Remove an event listener for a gesture on an element. 
+     * @description Remove an event listener for a gesture on an element.
      * @param {string} eventType The gesture event.
      * @param {function(e)} callback The listener that was added earlier.
      * @param {DOMElement} element The element the listener was added on.
@@ -1930,13 +1934,12 @@ window.ionic = {
   };
 })(window.ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
 
   /**
    * @ngdoc utility
    * @name ionic.Platform
    * @module ionic
-   * @group utilities
    */
   ionic.Platform = {
 
@@ -1989,18 +1992,15 @@ window.ionic = {
      * @private
      */
     detect: function() {
-      var i, bodyClass = document.body.className;
-
       ionic.Platform._checkPlatforms();
 
-      // only change the body class if we got platform info
-      for(i = 0; i < this.platforms.length; i++) {
-        bodyClass += ' platform-' + this.platforms[i];
-      }
-
-      bodyClass += ' grade-' + this.grade;
-
-      document.body.className = bodyClass.trim();
+      ionic.requestAnimationFrame(function(){
+        // only add to the body class if we got platform info
+        for(var i = 0; i < ionic.Platform.platforms.length; i++) {
+          document.body.classList.add('platform-' + ionic.Platform.platforms[i]);
+        }
+        document.body.classList.add('grade-' + ionic.Platform.grade);
+      });
     },
 
     /**
@@ -2054,7 +2054,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiPad
+     * @name ionic.Platform#isIPad
      * @returns {boolean} Whether we are running on iPad.
      */
     isIPad: function() {
@@ -2062,7 +2062,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiOS
+     * @name ionic.Platform#isIOS
      * @returns {boolean} Whether we are running on iOS.
      */
     isIOS: function() {
@@ -2184,15 +2184,17 @@ window.ionic = {
       this._showStatusBar = val;
       this.ready(function(){
         // run this only when or if the platform (cordova) is ready
-        if(ionic.Platform._showStatusBar) {
-          // they do not want it to be full screen
-          StatusBar.show();
-          document.body.classList.remove('status-bar-hide');
-        } else {
-          // it should be full screen
-          StatusBar.hide();
-          document.body.classList.add('status-bar-hide');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform._showStatusBar) {
+            // they do not want it to be full screen
+            window.StatusBar && window.StatusBar.show();
+            document.body.classList.remove('status-bar-hide');
+          } else {
+            // it should be full screen
+            window.StatusBar && window.StatusBar.hide();
+            document.body.classList.add('status-bar-hide');
+          }
+        });
       });
     },
 
@@ -2201,25 +2203,26 @@ window.ionic = {
      * @name ionic.Platform#fullScreen
      * @description
      * Sets whether the app is fullscreen or not (in Cordova).
-     * @param {boolean} showFullScreen Whether or not to set the app to fullscreen.
+     * @param {boolean=} showFullScreen Whether or not to set the app to fullscreen. Defaults to true.
+     * @param {boolean=} showStatusBar Whether or not to show the device's status bar. Defaults to false.
      */
     fullScreen: function(showFullScreen, showStatusBar) {
-      // fullScreen( [showFullScreen[, showStatusBar] ] )
       // showFullScreen: default is true if no param provided
       this.isFullScreen = (showFullScreen !== false);
 
       // add/remove the fullscreen classname to the body
       ionic.DomUtil.ready(function(){
         // run this only when or if the DOM is ready
-        if(ionic.Platform.isFullScreen) {
-          document.body.classList.add('fullscreen');
-        } else {
-          document.body.classList.remove('fullscreen');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform.isFullScreen) {
+            document.body.classList.add('fullscreen');
+          } else {
+            document.body.classList.remove('fullscreen');
+          }
+        });
+        // showStatusBar: default is false if no param provided
+        ionic.Platform.showStatusBar( (showStatusBar === true) );
       });
-
-      // showStatusBar: default is false if no param provided
-      this.showStatusBar( (showStatusBar === true) );
     }
 
   };
@@ -2253,10 +2256,13 @@ window.ionic = {
     }
     readyCallbacks = [];
     ionic.trigger('platformready', { target: document });
-    document.removeEventListener("deviceready", onPlatformReady, false);
+
+    ionic.requestAnimationFrame(function(){
+      document.body.classList.add('platform-ready');
+    });
   }
 
-})(window.ionic);
+})(this, document, ionic);
 
 (function(document, ionic) {
   'use strict';
@@ -2343,7 +2349,7 @@ window.ionic = {
 
     var ele = target.control || target;
 
-    if(ele.disabled || ele.type === 'file') return;
+    if(ele.disabled || ele.type === 'file' || ele.type === 'range') return;
 
     void 0;
 
@@ -2357,7 +2363,7 @@ window.ionic = {
 
     ele.dispatchEvent(clickEvent);
 
-    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA' || ele.tagName === 'SELECT') {
+    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA') {
       ele.focus();
       e.preventDefault();
     } else {
@@ -2398,8 +2404,7 @@ window.ionic = {
           ele.tagName === "A" ||
           ele.tagName === "BUTTON" ||
           ele.tagName === "LABEL" ||
-          ele.tagName === "TEXTAREA" ||
-          ele.tagName === "SELECT" ) {
+          ele.tagName === "TEXTAREA" ) {
 
         return ionic.tapElement(ele, e);
       }
@@ -2448,10 +2453,15 @@ window.ionic = {
     // check if this click's coordinates are different than its touchstart/mousedown
     var c = getCoordinates(event);
 
-    return (c.x > startCoordinates.x + HIT_RADIUS ||
-            c.x < startCoordinates.x - HIT_RADIUS ||
-            c.y > startCoordinates.y + HIT_RADIUS ||
-            c.y < startCoordinates.y - HIT_RADIUS);
+    // Quick check for 0,0 which could be simulated mouse click for form submission
+    if(c.x === 0 && c.y === 0) {
+      return false;
+    }
+
+    return (c.x > startCoordinates.x + 2 ||
+            c.x < startCoordinates.x - 2 ||
+            c.y > startCoordinates.y + 2 ||
+            c.y < startCoordinates.y - 2);
   }
 
   function recordCoordinates(event) {
@@ -2482,23 +2492,19 @@ window.ionic = {
               gesture.originalEvent.changedTouches[0]) ||
           touches[0].originalEvent || touches[0];
 
-      if(e) return { x: e.clientX, y: e.clientY };
+      if(e) return { x: e.clientX || e.pageX, y: e.clientY || e.pageY };
     }
     return { x:0, y:0 };
   }
 
+  var clickPreventTimerId;
   function removeClickPrevent(e) {
-    setTimeout(function(){
+    clearTimeout(clickPreventTimerId);
+    clickPreventTimerId = setTimeout(function(){
       var tap = isRecentTap(e);
       if(tap) delete tapCoordinates[tap.id];
+      startCoordinates = {};
     }, REMOVE_PREVENT_DELAY);
-
-    setTimeout(function(){
-      for(var hitKey in hitElements) {
-        hitElements[hitKey] && hitElements[hitKey].classList.remove('active');
-        delete hitElements[hitKey];
-      }
-    }, 150);
   }
 
   function stopEvent(e){
@@ -2510,8 +2516,7 @@ window.ionic = {
   function blurActive() {
     var ele = document.activeElement;
     if(ele && (ele.tagName === "INPUT" ||
-               ele.tagName === "TEXTAREA" ||
-               ele.tagName === "SELECT")) {
+               ele.tagName === "TEXTAREA")) {
       // using a timeout to prevent funky scrolling while a keyboard hides
       setTimeout(function(){
         ele.blur();
@@ -2521,46 +2526,143 @@ window.ionic = {
 
   function recordStartCoordinates(e) {
     startCoordinates = getCoordinates(e);
-
-    var x, ele = e.target;
-    for(x=0; x<5; x++) {
-      if(!ele || ele.tagName === 'LABEL') break;
-      if( ele.classList.contains('item') || ele.classList.contains('button') ) {
-        hitElements[hitCounts] = ele;
-        hitCounts = (hitCounts > 24 ? 0 : hitCounts + 1);
-        ionic.requestAnimationFrame(function(){
-          ele.classList.add('active');
-        });
-        break;
-      }
-      ele = ele.parentElement;
-    }
   }
 
   var tapCoordinates = {}; // used to remember coordinates to ignore if they happen again quickly
   var startCoordinates = {}; // used to remember where the coordinates of the start of the tap
   var CLICK_PREVENT_DURATION = 1500; // max milliseconds ghostclicks in the same area should be prevented
-  var REMOVE_PREVENT_DELAY = 375; // delay after a touchend/mouseup before removing the ghostclick prevent
+  var REMOVE_PREVENT_DELAY = 380; // delay after a touchend/mouseup before removing the ghostclick prevent
   var HIT_RADIUS = 15;
-  var hitElements = {};
-  var hitCounts = 0;
 
-  // set global click handler and check if the event should stop or not
-  document.addEventListener('click', preventGhostClick, true);
+  ionic.Platform.ready(function(){
+
+    if(ionic.Platform.grade === 'c') {
+      // low performing phones should have a longer ghostclick prevent
+      REMOVE_PREVENT_DELAY = 800;
+    }
+
+    // set global click handler and check if the event should stop or not
+    document.addEventListener('click', preventGhostClick, true);
 
-  // global tap event listener polyfill for HTML elements that were "tapped" by the user
-  ionic.on("tap", tapPolyfill, document);
+    // global release event listener polyfill for HTML elements that were tapped or held
+    ionic.on("release", tapPolyfill, document);
 
-  // listeners used to remove ghostclick prevention
-  document.addEventListener('touchend', removeClickPrevent, false);
-  document.addEventListener('mouseup', removeClickPrevent, false);
+    // listeners used to remove ghostclick prevention
+    document.addEventListener('touchend', removeClickPrevent, false);
+    document.addEventListener('mouseup', removeClickPrevent, false);
 
-  // in the case the user touched the screen, then scrolled, it shouldn't fire the click
-  document.addEventListener('touchstart', recordStartCoordinates, false);
-  document.addEventListener('mousedown', recordStartCoordinates, false);
+    // in the case the user touched the screen, then scrolled, it shouldn't fire the click
+    document.addEventListener('touchstart', recordStartCoordinates, false);
+    document.addEventListener('mousedown', recordStartCoordinates, false);
+  });
 
 })(this, document, ionic);
 
+(function(document, ionic) {
+  'use strict';
+
+  var queueElements = {};   // elements that should get an active state in XX milliseconds
+  var activeElements = {};  // elements that are currently active
+  var keyId = 0;            // a counter for unique keys for the above ojects
+
+  ionic.activator = {
+
+    start: function(e) {
+      // when an element is touched/clicked, it climbs up a few
+      // parents to see if it is an .item or .button element
+      ionic.requestAnimationFrame(function(){
+        var ele = e.target;
+        var eleToActivate;
+
+        for(var x=0; x<4; x++) {
+          if(!ele) break;
+          if(eleToActivate && ele.classList.contains('item')) {
+            eleToActivate = ele;
+            break;
+          }
+          if( ele.tagName == 'A' || ele.tagName == 'BUTTON' || ele.getAttribute('ng-click') ) {
+            eleToActivate = ele;
+          }
+          if( ele.classList.contains('button') ) {
+            eleToActivate = ele;
+            break;
+          }
+          ele = ele.parentElement;
+        }
+
+        if(eleToActivate) {
+          // queue that this element should be set to active
+          queueElements[keyId] = eleToActivate;
+
+          // in XX milliseconds, set the queued elements to active
+          // add listeners to clear all queued/active elements onMove
+          if(e.type === 'touchstart') {
+            document.body.removeEventListener('mousedown', ionic.activator.start);
+            document.body.addEventListener('touchmove', clear, false);
+            setTimeout(activateElements, 85);
+          } else {
+            document.body.addEventListener('mousemove', clear, false);
+            ionic.requestAnimationFrame(activateElements);
+          }
+
+          keyId = (keyId > 19 ? 0 : keyId + 1);
+        }
+
+      });
+    }
+  };
+
+  function activateElements() {
+    // activate all elements in the queue
+    for(var key in queueElements) {
+      if(queueElements[key]) {
+        queueElements[key].classList.add('active');
+        activeElements[key] = queueElements[key];
+      }
+    }
+    queueElements = {};
+  }
+
+  function deactivateElements() {
+    for(var key in activeElements) {
+      if(activeElements[key]) {
+        activeElements[key].classList.remove('active');
+        delete activeElements[key];
+      }
+    }
+  }
+
+  function onEnd(e) {
+    // clear out any active/queued elements after XX milliseconds
+    setTimeout(clear, 200);
+  }
+
+  function clear() {
+    // clear out any elements that are queued to be set to active
+    queueElements = {};
+
+    // in the next frame, remove the active class from all active elements
+    ionic.requestAnimationFrame(deactivateElements);
+
+    // remove onMove listeners that clear out active elements
+    document.body.removeEventListener('mousemove', clear);
+    document.body.removeEventListener('touchmove', clear);
+  }
+
+  // use window.onload because this doesn't need to run immediately
+  window.addEventListener('load', function(){
+    // start an active element
+    document.body.addEventListener('touchstart', ionic.activator.start, false);
+    document.body.addEventListener('mousedown', ionic.activator.start, false);
+
+    // clear all active elements after XX milliseconds
+    document.body.addEventListener('touchend', onEnd, false);
+    document.body.addEventListener('mouseup', onEnd, false);
+    document.body.addEventListener('touchcancel', onEnd, false);
+  }, false);
+
+})(document, ionic);
+
 (function(ionic) {
 
   /* for nextUid() function below */
@@ -2773,12 +2875,12 @@ function androidKeyboardFix() {
     //If the height changes, and it's less than before, we have a keyboard open
     } else if (rememberedDeviceHeight !== window.innerHeight &&
                window.innerHeight < rememberedDeviceHeight) {
-      document.body.classList.add('hide-footer');
+      document.body.classList.add('footer-hide');
       //Wait for next frame so document.activeElement is set
       ionic.requestAnimationFrame(handleKeyboardChange);
     } else {
       //Otherwise we have a keyboard close or a *really* weird resize
-      document.body.classList.remove('hide-footer');
+      document.body.classList.remove('footer-hide');
     }
 
     function handleKeyboardChange() {
@@ -2850,7 +2952,7 @@ var IS_EMBEDDED_OBJECT_REGEX = /object|embed/i;
 
 	// Create namespaces
 	if (!global.core) {
-		global.core = { effect : {} };
+		var core = global.core = { effect : {} };
 
 	} else if (!core.effect) {
 		core.effect = {};
@@ -3436,8 +3538,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     function shouldIgnorePress(e) {
       // Don't react if initial down happens on a form element
       return e.target.tagName.match(IS_INPUT_LIKE_REGEX) ||
-        e.target.isContentEditable ||
-        e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX);
+             e.target.isContentEditable ||
+             e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX) ||
+             e.target.dataset.preventScroll;
     }
 
 
@@ -3502,8 +3605,18 @@ ionic.views.Scroll = ionic.views.View.inherit({
         mousedown = false;
       }, false);
 
+      var wheelShowBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('in');
+      }, 500, true);
+
+      var wheelHideBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('out');
+      }, 100, false);
+
       document.addEventListener("mousewheel", function(e) {
+        wheelShowBarFn();
         self.scrollBy(e.wheelDeltaX/self.options.wheelDampen, -e.wheelDeltaY/self.options.wheelDampen);
+        wheelHideBarFn();
       });
     }
   },
@@ -3558,9 +3671,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
   __resizeScrollbars: function() {
     var self = this;
 
-    // Bring the scrollbars in to show the content change
-    self.__fadeScrollbars('in');
-
     // Update horiz bar
     if(self.__indicatorX) {
       var width = Math.max(Math.round(self.__clientWidth * self.__clientWidth / (self.__contentWidth)), 20);
@@ -4175,8 +4285,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     var self = this;
 
-    self.__fadeScrollbars('in');
-
     // Reset interruptedAnimation flag
     self.__interruptedAnimation = true;
 
@@ -4419,6 +4527,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
       self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
       if (self.__isDragging) {
         self.__interruptedAnimation = false;
+        self.__fadeScrollbars('in');
       }
 
     }
@@ -4921,15 +5030,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 (function(ionic) {
 'use strict';
 
-  /**
-   * @ngdoc controller
-   * @name ionicBar
-   * @module ionic
-   * @group page layout
-   * @description
-   * Controller for the {@link ionic.directive:ionHeaderBar} and
-   * {@link ionic.directive:ionFooterBar} directives.
-   */
   ionic.views.HeaderBar = ionic.views.View.inherit({
     initialize: function(opts) {
       this.el = opts.el;
@@ -4941,16 +5041,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.align();
     },
 
-    /**
-     * @ngdoc method
-     * @name ionicBar#align
-     * @description
-     * Aligns the title text with the buttons in the bar
-     * so that the title size is maximized and aligned correctly
-     * as much as possible.
-     * @param {string=} direction Which direction to align the title towards.
-     * Available: 'left', 'right', 'center'. Default: 'center'.
-     */
     align: function(align) {
 
       align || (align = this.alignTitle);
@@ -5034,7 +5124,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   var ITEM_OPTIONS_CLASS = 'item-options';
   var ITEM_PLACEHOLDER_CLASS = 'item-placeholder';
   var ITEM_REORDERING_CLASS = 'item-reordering';
-  var ITEM_DRAG_CLASS = 'item-drag';
+  var ITEM_REORDER_BTN_CLASS = 'item-reorder';
 
   var DragOp = function() {};
   DragOp.prototype = {
@@ -5043,6 +5133,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     drag: function(e) {
     },
     end: function(e) {
+    },
+    isSameItem: function(item) {
+      return false;
     }
   };
 
@@ -5054,6 +5147,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   };
 
   SlideDrag.prototype = new DragOp();
+
   SlideDrag.prototype.start = function(e) {
     var content, buttons, offsetX, buttonsWidth;
 
@@ -5091,6 +5185,27 @@ ionic.views.Scroll = ionic.views.View.inherit({
     };
   };
 
+  /**
+   * Check if this is the same item that was previously dragged.
+   */
+  SlideDrag.prototype.isSameItem = function(op) {
+    if(op._lastDrag && this._currentDrag) {
+      return this._currentDrag.content == op._lastDrag.content;
+    }
+    return false;
+  };
+
+  SlideDrag.prototype.clean = function(e) {
+    var lastDrag = this._lastDrag;
+
+    if(!lastDrag) return;
+
+    ionic.requestAnimationFrame(function() {
+      lastDrag.content.style[ionic.CSS.TRANSITION] = '';
+      lastDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(0, 0, 0)';
+    });
+  };
+
   SlideDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
     var buttonsWidth;
 
@@ -5151,21 +5266,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     }
 
-    // var content = this._currentDrag.content;
-
-    // var onRestingAnimationEnd = function(e) {
-    //   if(e.propertyName == '-webkit-transform') {
-    //     if(content) content.classList.remove(ITEM_SLIDING_CLASS);
-    //   }
-    //   e.target.removeEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-    // };
-
     ionic.requestAnimationFrame(function() {
-      // var currentX = parseFloat(_this._currentDrag.content.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]) || 0;
-      // if(currentX !== restingPoint) {
-      //   _this._currentDrag.content.classList.add(ITEM_SLIDING_CLASS);
-      //   _this._currentDrag.content.addEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-      // }
       if(restingPoint === 0) {
         _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = '';
       } else {
@@ -5175,9 +5276,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
 
       // Kill the current drag
+      _this._lastDrag = _this._currentDrag;
       _this._currentDrag = null;
 
-
       // We are done, notify caller
       doneCallback && doneCallback();
     });
@@ -5331,7 +5432,8 @@ ionic.views.Scroll = ionic.views.View.inherit({
       opts = ionic.extend({
         onReorder: function(el, oldIndex, newIndex) {},
         virtualRemoveThreshold: -200,
-        virtualAddThreshold: 200
+        virtualAddThreshold: 200,
+        canSwipe: false
       }, opts);
 
       ionic.extend(this, opts);
@@ -5346,10 +5448,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.onRefreshOpening = opts.onRefreshOpening || function() {};
       this.onRefreshHolding = opts.onRefreshHolding || function() {};
 
-      window.ionic.onGesture('touch', function(e) {
-        _this._handleTouch(e);
-      }, this.el);
-
       window.ionic.onGesture('release', function(e) {
         _this._handleEndDrag(e);
       }, this.el);
@@ -5427,10 +5525,22 @@ ionic.views.Scroll = ionic.views.View.inherit({
       }
     },
 
+    /**
+     * Clear any active drag effects on the list.
+     */
+    clearDragEffects: function() {
+      if(this._lastDragOp) {
+        this._lastDragOp.clean && this._lastDragOp.clean();
+        this._lastDragOp = null;
+      }
+    },
+
     _initDrag: function() {
       //ionic.views.ListView.__super__._initDrag.call(this);
 
-      //this._isDragging = false;
+      // Store the last one
+      this._lastDragOp = this._dragOp;
+
       this._dragOp = null;
     },
 
@@ -5449,10 +5559,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _startDrag: function(e) {
       var _this = this;
 
+      var didStart = false;
+
       this._isDragging = false;
 
+      var lastDragOp = this._lastDragOp;
+
       // Check if this is a reorder drag
-      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_DRAG_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
+      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
         var item = this._getItem(e.target);
 
         if(item) {
@@ -5466,20 +5580,25 @@ ionic.views.Scroll = ionic.views.View.inherit({
           });
           this._dragOp.start(e);
           e.preventDefault();
-          return;
         }
       }
 
       // Or check if this is a swipe to the side drag
       else if(!this._didDragUpOrDown && (e.gesture.direction == 'left' || e.gesture.direction == 'right') && Math.abs(e.gesture.deltaX) > 5) {
-        this._dragOp = new SlideDrag({ el: this.el });
-        this._dragOp.start(e);
-        e.preventDefault();
-        return;
+
+        // Make sure this is an item with buttons
+        var item = this._getItem(e.target);
+        if(item && item.querySelector('.item-options')) {
+          this._dragOp = new SlideDrag({ el: this.el });
+          this._dragOp.start(e);
+          e.preventDefault();
+        }
       }
 
-      // We aren't handling it, so pass it up the chain
-      //ionic.views.ListView.__super__._startDrag.call(this, e);
+      // If we had a last drag operation and this is a new one on a different item, clean that last one
+      if(lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
+        lastDragOp.clean && lastDragOp.clean();
+      }
     },
 
 
@@ -5493,13 +5612,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
         return;
       }
 
-      // Cancel touch timeout
-      clearTimeout(this._touchTimeout);
-      var items = _this.el.querySelectorAll('.item');
-      for(var i = 0, l = items.length; i < l; i++) {
-        items[i].classList.remove('active');
-      }
-
       this._dragOp.end(e, function() {
         _this._initDrag();
       });
@@ -5511,17 +5623,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _handleDrag: function(e) {
       var _this = this, content, buttons;
 
-      if(Math.abs(e.gesture.deltaY) > 5) {
-        this._didDragUpOrDown = true;
+      if (!this.canSwipe) {
+        return;
       }
 
-      // If the user has a touch timeout to highlight an element, clear it if we
-      // get sufficient draggage
-      if(Math.abs(e.gesture.deltaX) > 10 || Math.abs(e.gesture.deltaY) > 10) {
-        clearTimeout(this._touchTimeout);
+      if(Math.abs(e.gesture.deltaY) > 5) {
+        this._didDragUpOrDown = true;
       }
 
-      clearTimeout(this._touchTimeout);
       // If we get a drag event, make sure we aren't in another drag, then check if we should
       // start one
       if(!this.isDragging && !this._dragOp) {
@@ -5536,25 +5645,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       e.gesture.srcEvent.preventDefault();
       this._dragOp.drag(e);
-    },
-
-    /**
-     * Handle the touch event to show the active state on an item if necessary.
-     */
-    _handleTouch: function(e) {
-      var _this = this;
-
-      var item = ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_CLASS);
-      if(!item) { return; }
-
-      this._touchTimeout = setTimeout(function() {
-        var items = _this.el.querySelectorAll('.item');
-        for(var i = 0, l = items.length; i < l; i++) {
-          items[i].classList.remove('active');
-        }
-        item.classList.add('active');
-      }, 250);
-    },
+    }
 
   });
 
@@ -5578,7 +5669,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       this.showDelay = opts.showDelay || 0;
 
-      this._loadingBox = this.el.querySelector('.loading');
+      this._loadingBox = this.el.querySelector('.loading') || this.el;
     },
     show: function() {
       var _this = this;
@@ -5607,6 +5698,11 @@ ionic.views.Scroll = ionic.views.View.inherit({
       window.clearTimeout(this._showDelayTimeout);
 
       this.el.classList.remove('active');
+    },
+    setContent: function(html) {
+      if (this._loadingBox) {
+        this._loadingBox.innerHTML = html || '';
+      }
     }
   });
 
@@ -5788,14 +5884,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
  *
 */
 
-/**
- * @ngdoc controller
- * @name ionicSlideBox
- * @module ionic
- * @description
- * Controller for the {@link ionic.directive:ionSlideBox} directive.
- */
-
 (function(ionic) {
 'use strict';
 
@@ -6251,16 +6339,13 @@ ionic.views.Slider = ionic.views.View.inherit({
     }
 
     // Public API
+    this.update = function() {
+      setTimeout(setup);
+    };
     this.setup = function() {
       setup();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slide
-     * @param {number} to The index to slide to.
-     * @param {number=} speed The number of milliseconds for the change to take.
-     */
     this.slide = function(to, speed) {
       // cancel slideshow
       stop();
@@ -6268,23 +6353,13 @@ ionic.views.Slider = ionic.views.View.inherit({
       slide(to, speed);
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#prev
-     * @description Go to the previous slide. Wraps around if at the beginning.
-     */
-    this.prev = function() {
+    this.prev = this.previous = function() {
       // cancel slideshow
       stop();
 
       prev();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#next
-     * @description Go to the next slide. Wraps around if at the end.
-     */
     this.next = function() {
       // cancel slideshow
       stop();
@@ -6292,32 +6367,16 @@ ionic.views.Slider = ionic.views.View.inherit({
       next();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#stop
-     * @description Stop sliding. The slideBox will not move again until
-     * explicitly told to do so.
-     */
     this.stop = function() {
       // cancel slideshow
       stop();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#currentIndex
-     * @returns number The index of the current slide.
-     */
     this.currentIndex = function() {
       // return current index position
       return index;
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slidesCount
-     * @returns number The number of slides there are currently.
-     */
     this.slidesCount = function() {
       // return total number of slides
       return length;
@@ -6996,13 +7055,24 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
       };
     },
 
+    isOpenLeft: function() {
+      return this.getOpenAmount() > 0;
+    },
+
+    isOpenRight: function() {
+      return this.getOpenAmount() < 0;
+    },
+
     /**
      * Toggle the left menu to open 100%
      */
-    toggleLeft: function() {
-      this.content.enableAnimation();
+    toggleLeft: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount > 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount <= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(100);
@@ -7012,10 +7082,13 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
     /**
      * Toggle the right menu to open 100%
      */
-    toggleRight: function() {
-      this.content.enableAnimation();
+    toggleRight: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount < 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount >= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(-100);
@@ -7381,3 +7454,5 @@ ionic.controllers.TabBarController = ionic.controllers.ViewController.inherit({
 });
 
 })(window.ionic);
+
+})();
\ No newline at end of file
diff --git a/phonegap/platforms/android/assets/www/styles/ionic.css b/phonegap/platforms/android/assets/www/styles/ionic.css
index c34f04f..24f78d8 100644
--- a/phonegap/platforms/android/assets/www/styles/ionic.css
+++ b/phonegap/platforms/android/assets/www/styles/ionic.css
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -16,7 +16,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -26,7 +26,7 @@
  *
  */
 /*!
-  Ionicons, v#{$ionicons-version}
+  Ionicons, v1.4.1
   Created by Ben Sperry for the Ionic Framework, http://ionicons.com/
   https://twitter.com/benjsperry  https://twitter.com/ionicframework
   MIT License: https://github.com/driftyco/ionicons
@@ -1686,11 +1686,11 @@
  * --------------------------------------------------
  * Adapted from normalize.css and some reset.css. We don't care even one
  * bit about old IE, so we don't need any hacks for that in here.
- * 
+ *
  * There are probably other things we could remove here, as well.
  *
  * normalize.css v2.1.2 | MIT License | git.io/normalize
- 
+
  * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)
  * http://cssreset.com
  */
@@ -2116,6 +2116,9 @@ body.grade-b, body.grade-c {
   text-align: center;
   font-size: 30px; }
   .ionic-refresher-content .icon-pulling {
+    -webkit-animation-name: refresh-spin-back;
+    -moz-animation-name: refresh-spin-back;
+    animation-name: refresh-spin-back;
     -webkit-animation-duration: 200ms;
     -moz-animation-duration: 200ms;
     animation-duration: 200ms;
@@ -2140,6 +2143,20 @@ body.grade-b, body.grade-c {
   100% {
     -webkit-transform: rotate(-180deg); } }
 
+@keyframes refresh-spin-back {
+  0% {
+    transform: rotate(-180deg); }
+
+  100% {
+    transform: rotate(0); } }
+
+@-webkit-keyframes refresh-spin-back {
+  0% {
+    -webkit-transform: rotate(-180deg); }
+
+  100% {
+    -webkit-transform: rotate(0); } }
+
 .scroll-refresher.active .icon-pulling {
   display: block; }
 .scroll-refresher.active .icon-refreshing {
@@ -2193,6 +2210,12 @@ ion-infinite-scroll.active .scroll-infinite {
 .has-subheader {
   top: 88px; }
 
+.has-tabs-top {
+  top: 93px; }
+
+.has-header.has-subheader.has-tabs-top {
+  top: 137px; }
+
 .has-footer {
   bottom: 44px; }
 
@@ -2466,64 +2489,64 @@ a.subdued {
       padding-left: 8px;
       height: 28px; }
   .bar.bar-light {
-    background-color: white;
     border-color: #ddd;
+    background-color: white;
     background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
     color: #444; }
     .bar.bar-light .title {
       color: #444; }
   .bar.bar-stable {
-    background-color: #f8f8f8;
     border-color: #b2b2b2;
+    background-color: #f8f8f8;
     background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
     color: #444; }
     .bar.bar-stable .title {
       color: #444; }
   .bar.bar-positive {
-    background-color: #4a87ee;
     border-color: #145fd7;
+    background-color: #4a87ee;
     background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
     color: #fff; }
     .bar.bar-positive .title {
       color: #fff; }
   .bar.bar-calm {
-    background-color: #43cee6;
     border-color: #1aacc3;
+    background-color: #43cee6;
     background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
     color: #fff; }
     .bar.bar-calm .title {
       color: #fff; }
   .bar.bar-assertive {
-    background-color: #ef4e3a;
     border-color: #cc2311;
+    background-color: #ef4e3a;
     background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
     color: #fff; }
     .bar.bar-assertive .title {
       color: #fff; }
   .bar.bar-balanced {
-    background-color: #66cc33;
     border-color: #498f24;
+    background-color: #66cc33;
     background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
     color: #fff; }
     .bar.bar-balanced .title {
       color: #fff; }
   .bar.bar-energized {
-    background-color: #f0b840;
     border-color: #d39211;
+    background-color: #f0b840;
     background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
     color: #fff; }
     .bar.bar-energized .title {
       color: #fff; }
   .bar.bar-royal {
-    background-color: #8a6de9;
     border-color: #552bdf;
+    background-color: #8a6de9;
     background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
     color: #fff; }
     .bar.bar-royal .title {
       color: #fff; }
   .bar.bar-dark {
-    background-color: #444444;
     border-color: #111;
+    background-color: #444444;
     background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
     color: #fff; }
     .bar.bar-dark .title {
@@ -2580,200 +2603,200 @@ a.subdued {
     line-height: 32px; }
   .bar .button-bar + .button, .bar .button + .button-bar {
     margin-left: 5px; }
-  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .title + .buttons {
+  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .buttons.pull-right, .bar .title + .buttons {
     position: absolute;
     top: 5px;
     right: 5px;
     bottom: 5px; }
 
 .bar-light .button {
-  color: #444;
+  border-color: #ddd;
   background-color: white;
-  border-color: #ddd; }
+  color: #444; }
   .bar-light .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-light .button.active {
+    border-color: #ccc;
     background-color: #fafafa;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #ccc; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-light .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-light .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-stable .button {
-  color: #444;
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
-  border-color: #b2b2b2; }
+  color: #444; }
   .bar-stable .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-stable .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-stable .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-stable .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-positive .button {
-  color: #fff;
+  border-color: #145fd7;
   background-color: #4a87ee;
-  border-color: #145fd7; }
+  color: #fff; }
   .bar-positive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-positive .button.active {
+    border-color: #145fd7;
     background-color: #145fd7;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #145fd7; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-positive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-positive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-calm .button {
-  color: #fff;
+  border-color: #1aacc3;
   background-color: #43cee6;
-  border-color: #1aacc3; }
+  color: #fff; }
   .bar-calm .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-calm .button.active {
+    border-color: #1aacc3;
     background-color: #1aacc3;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #1aacc3; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-calm .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-calm .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-assertive .button {
-  color: #fff;
+  border-color: #cc2311;
   background-color: #ef4e3a;
-  border-color: #cc2311; }
+  color: #fff; }
   .bar-assertive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-assertive .button.active {
+    border-color: #cc2311;
     background-color: #cc2311;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #cc2311; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-assertive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-assertive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-balanced .button {
-  color: #fff;
+  border-color: #498f24;
   background-color: #66cc33;
-  border-color: #498f24; }
+  color: #fff; }
   .bar-balanced .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-balanced .button.active {
+    border-color: #498f24;
     background-color: #498f24;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #498f24; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-balanced .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-balanced .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-energized .button {
-  color: #fff;
+  border-color: #d39211;
   background-color: #f0b840;
-  border-color: #d39211; }
+  color: #fff; }
   .bar-energized .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-energized .button.active {
+    border-color: #d39211;
     background-color: #d39211;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #d39211; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-energized .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-energized .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-royal .button {
-  color: #fff;
+  border-color: #552bdf;
   background-color: #8a6de9;
-  border-color: #552bdf; }
+  color: #fff; }
   .bar-royal .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-royal .button.active {
+    border-color: #552bdf;
     background-color: #552bdf;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #552bdf; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-royal .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-royal .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-dark .button {
-  color: #fff;
+  border-color: #111;
   background-color: #444444;
-  border-color: #111; }
+  color: #fff; }
   .bar-dark .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-dark .button.active {
+    border-color: #000;
     background-color: #262626;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #000; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-dark .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-dark .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-header {
   top: 0;
@@ -2823,9 +2846,9 @@ a.subdued {
   -webkit-transform: translate3d(0, 0, 0);
   -moz-transform: translate3d(0, 0, 0);
   transform: translate3d(0, 0, 0);
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
   background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-  border-color: #b2b2b2;
   color: #444;
   position: absolute;
   bottom: 0;
@@ -2839,78 +2862,6 @@ a.subdued {
   .tabs .tab-item .badge {
     background-color: #444;
     color: #f8f8f8; }
-  .tabs.tabs-light {
-    background-color: #fff;
-    background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
-    border-color: #ddd;
-    color: #444; }
-    .tabs.tabs-light .tab-item .badge {
-      background-color: #444;
-      color: #fff; }
-  .tabs.tabs-stable {
-    background-color: #f8f8f8;
-    background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-    border-color: #b2b2b2;
-    color: #444; }
-    .tabs.tabs-stable .tab-item .badge {
-      background-color: #444;
-      color: #f8f8f8; }
-  .tabs.tabs-positive {
-    background-color: #4a87ee;
-    background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
-    border-color: #145fd7;
-    color: #fff; }
-    .tabs.tabs-positive .tab-item .badge {
-      background-color: #fff;
-      color: #4a87ee; }
-  .tabs.tabs-calm {
-    background-color: #43cee6;
-    background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
-    border-color: #1aacc3;
-    color: #fff; }
-    .tabs.tabs-calm .tab-item .badge {
-      background-color: #fff;
-      color: #43cee6; }
-  .tabs.tabs-assertive {
-    background-color: #ef4e3a;
-    background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
-    border-color: #cc2311;
-    color: #fff; }
-    .tabs.tabs-assertive .tab-item .badge {
-      background-color: #fff;
-      color: #ef4e3a; }
-  .tabs.tabs-balanced {
-    background-color: #66cc33;
-    background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
-    border-color: #498f24;
-    color: #fff; }
-    .tabs.tabs-balanced .tab-item .badge {
-      background-color: #fff;
-      color: #66cc33; }
-  .tabs.tabs-energized {
-    background-color: #f0b840;
-    background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
-    border-color: #d39211;
-    color: #fff; }
-    .tabs.tabs-energized .tab-item .badge {
-      background-color: #fff;
-      color: #f0b840; }
-  .tabs.tabs-royal {
-    background-color: #8a6de9;
-    background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
-    border-color: #552bdf;
-    color: #fff; }
-    .tabs.tabs-royal .tab-item .badge {
-      background-color: #fff;
-      color: #8a6de9; }
-  .tabs.tabs-dark {
-    background-color: #444;
-    background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
-    border-color: #111;
-    color: #fff; }
-    .tabs.tabs-dark .tab-item .badge {
-      background-color: #fff;
-      color: #444; }
   @media (min--moz-device-pixel-ratio: 1.5), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
     .tabs {
       padding-top: 2px;
@@ -2920,7 +2871,90 @@ a.subdued {
       background-size: 100% 1px;
       background-repeat: no-repeat; } }
 
-.tabs-top {
+/* Allow parent element of tabs to define color, or just the tab itself */
+.tabs-light > .tabs, .tabs.tabs-light {
+  border-color: #ddd;
+  background-color: #fff;
+  background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
+  color: #444; }
+  .tabs-light > .tabs .tab-item .badge, .tabs.tabs-light .tab-item .badge {
+    background-color: #444;
+    color: #fff; }
+
+.tabs-stable > .tabs, .tabs.tabs-stable {
+  border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
+  color: #444; }
+  .tabs-stable > .tabs .tab-item .badge, .tabs.tabs-stable .tab-item .badge {
+    background-color: #444;
+    color: #f8f8f8; }
+
+.tabs-positive > .tabs, .tabs.tabs-positive {
+  border-color: #145fd7;
+  background-color: #4a87ee;
+  background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
+  color: #fff; }
+  .tabs-positive > .tabs .tab-item .badge, .tabs.tabs-positive .tab-item .badge {
+    background-color: #fff;
+    color: #4a87ee; }
+
+.tabs-calm > .tabs, .tabs.tabs-calm {
+  border-color: #1aacc3;
+  background-color: #43cee6;
+  background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
+  color: #fff; }
+  .tabs-calm > .tabs .tab-item .badge, .tabs.tabs-calm .tab-item .badge {
+    background-color: #fff;
+    color: #43cee6; }
+
+.tabs-assertive > .tabs, .tabs.tabs-assertive {
+  border-color: #cc2311;
+  background-color: #ef4e3a;
+  background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
+  color: #fff; }
+  .tabs-assertive > .tabs .tab-item .badge, .tabs.tabs-assertive .tab-item .badge {
+    background-color: #fff;
+    color: #ef4e3a; }
+
+.tabs-balanced > .tabs, .tabs.tabs-balanced {
+  border-color: #498f24;
+  background-color: #66cc33;
+  background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
+  color: #fff; }
+  .tabs-balanced > .tabs .tab-item .badge, .tabs.tabs-balanced .tab-item .badge {
+    background-color: #fff;
+    color: #66cc33; }
+
+.tabs-energized > .tabs, .tabs.tabs-energized {
+  border-color: #d39211;
+  background-color: #f0b840;
+  background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
+  color: #fff; }
+  .tabs-energized > .tabs .tab-item .badge, .tabs.tabs-energized .tab-item .badge {
+    background-color: #fff;
+    color: #f0b840; }
+
+.tabs-royal > .tabs, .tabs.tabs-royal {
+  border-color: #552bdf;
+  background-color: #8a6de9;
+  background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
+  color: #fff; }
+  .tabs-royal > .tabs .tab-item .badge, .tabs.tabs-royal .tab-item .badge {
+    background-color: #fff;
+    color: #8a6de9; }
+
+.tabs-dark > .tabs, .tabs.tabs-dark {
+  border-color: #111;
+  background-color: #444;
+  background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
+  color: #fff; }
+  .tabs-dark > .tabs .tab-item .badge, .tabs.tabs-dark .tab-item .badge {
+    background-color: #fff;
+    color: #444; }
+
+/* Allow parent element to have tabs-top */
+.tabs-top > .tabs, .tabs.tabs-top {
   top: 44px;
   padding-top: 0;
   padding-bottom: 2px;
@@ -2949,6 +2983,9 @@ a.subdued {
   .tab-item:hover {
     cursor: pointer; }
 
+.tabs-item-hide, .tabs-item-hide > .tabs {
+  display: none; }
+
 .tabs-icon-top .tab-item, .tabs-icon-bottom .tab-item {
   font-size: 12px;
   line-height: 14px; }
@@ -2992,25 +3029,25 @@ a.subdued {
 
 /* Navigational tab */
 /* Active state for tab */
-.tab-item.active {
+.tab-item.tab-item-active {
   opacity: 1; }
-  .tab-item.active.tab-item-light {
+  .tab-item.tab-item-active.tab-item-light {
     color: #fff; }
-  .tab-item.active.tab-item-stable {
+  .tab-item.tab-item-active.tab-item-stable {
     color: #f8f8f8; }
-  .tab-item.active.tab-item-positive {
+  .tab-item.tab-item-active.tab-item-positive {
     color: #4a87ee; }
-  .tab-item.active.tab-item-calm {
+  .tab-item.tab-item-active.tab-item-calm {
     color: #43cee6; }
-  .tab-item.active.tab-item-assertive {
+  .tab-item.tab-item-active.tab-item-assertive {
     color: #ef4e3a; }
-  .tab-item.active.tab-item-balanced {
+  .tab-item.tab-item-active.tab-item-balanced {
     color: #66cc33; }
-  .tab-item.active.tab-item-energized {
+  .tab-item.tab-item-active.tab-item-energized {
     color: #f0b840; }
-  .tab-item.active.tab-item-royal {
+  .tab-item.tab-item-active.tab-item-royal {
     color: #8a6de9; }
-  .tab-item.active.tab-item-dark {
+  .tab-item.tab-item-active.tab-item-dark {
     color: #444; }
 
 .item.tabs {
@@ -3103,7 +3140,6 @@ a.subdued {
     left: 20%;
     overflow: visible;
     min-height: 240px;
-    max-width: 768px;
     width: 60%; }
   .modal.ng-leave-active {
     bottom: 0; } }
@@ -3186,6 +3222,13 @@ a.subdued {
   .popup-buttons .button:last-child {
     margin-right: 0px; }
 
+.popup-open {
+  pointer-events: none; }
+  .popup-open.modal-open .modal {
+    pointer-events: none; }
+  .popup-open .popup-backdrop, .popup-open .popup {
+    pointer-events: auto; }
+
 .popup-backdrop {
   -webkit-animation-name: fadeIn;
   -moz-animation-name: fadeIn;
@@ -3208,6 +3251,9 @@ a.subdued {
   background-color: rgba(0, 0, 0, 0.4); }
 
 .loading-backdrop {
+  -webkit-transition: visibility 0s linear 0.3s;
+  -moz-transition: visibility 0s linear 0.3s;
+  transition: visibility 0s linear 0.3s;
   position: fixed;
   top: 0;
   left: 0;
@@ -3220,13 +3266,8 @@ a.subdued {
     -moz-transition-delay: 0s;
     transition-delay: 0s;
     visibility: visible; }
-
-.loading-backdrop {
-  -webkit-transition: visibility 0s linear 0.3s;
-  -moz-transition: visibility 0s linear 0.3s;
-  transition: visibility 0s linear 0.3s; }
-  .loading-backdrop.active {
-    background-color: rgba(0, 0, 0, 0.7); }
+    .loading-backdrop.active.show-backdrop {
+      background-color: rgba(0, 0, 0, 0.7); }
 
 .loading {
   position: fixed;
@@ -3247,12 +3288,9 @@ a.subdued {
  * --------------------------------------------------
  */
 .item {
-  color: #444;
-  background-color: #fff;
   border-color: #ddd;
-  -webkit-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  -moz-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
+  background-color: #fff;
+  color: #444;
   position: relative;
   z-index: 2;
   display: block;
@@ -3288,77 +3326,81 @@ a.subdued {
     position: absolute;
     top: 15px;
     right: 35px; }
+  .item.item-button-right .badge {
+    right: 65px; }
   .item.item-divider .badge {
     top: 7.5px; }
   .item .badge + .badge {
     margin-right: 5px; }
   .item.item-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
   .item.item-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
   .item.item-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
   .item.item-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
   .item.item-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
   .item.item-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
   .item.item-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
   .item.item-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
   .item.item-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
+  .item[ng-click]:hover {
+    cursor: pointer; }
 
 .item.active:not(.item-divider):not(.item-input):not(.item-input-inset), .item-complex.active .item-content {
-  background-color: #D9D9D9;
-  border-color: #ccc; }
+  border-color: #ccc;
+  background-color: #D9D9D9; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-light, .item-complex.active .item-content.item-light {
-    background-color: #fafafa;
-    border-color: #ccc; }
+    border-color: #ccc;
+    background-color: #fafafa; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-stable, .item-complex.active .item-content.item-stable {
-    background-color: #e5e5e5;
-    border-color: #a2a2a2; }
+    border-color: #a2a2a2;
+    background-color: #e5e5e5; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-positive, .item-complex.active .item-content.item-positive {
-    background-color: #145fd7;
-    border-color: #145fd7; }
+    border-color: #145fd7;
+    background-color: #145fd7; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-calm, .item-complex.active .item-content.item-calm {
-    background-color: #1aacc3;
-    border-color: #1aacc3; }
+    border-color: #1aacc3;
+    background-color: #1aacc3; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-assertive, .item-complex.active .item-content.item-assertive {
-    background-color: #cc2311;
-    border-color: #cc2311; }
+    border-color: #cc2311;
+    background-color: #cc2311; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-balanced, .item-complex.active .item-content.item-balanced {
-    background-color: #498f24;
-    border-color: #498f24; }
+    border-color: #498f24;
+    background-color: #498f24; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-energized, .item-complex.active .item-content.item-energized {
-    background-color: #d39211;
-    border-color: #d39211; }
+    border-color: #d39211;
+    background-color: #d39211; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-royal, .item-complex.active .item-content.item-royal {
-    background-color: #552bdf;
-    border-color: #552bdf; }
+    border-color: #552bdf;
+    background-color: #552bdf; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-dark, .item-complex.active .item-content.item-dark {
-    background-color: #262626;
-    border-color: #000; }
+    border-color: #000;
+    background-color: #262626; }
 
 .item, .item h1, .item h2, .item h3, .item h4, .item h5, .item h6, .item p, .item-content, .item-content h1, .item-content h2, .item-content h3, .item-content h4, .item-content h5, .item-content h6, .item-content p {
   overflow: hidden;
@@ -3384,14 +3426,6 @@ a.item {
   padding: 0; }
 
 .item-complex .item-content, .item-radio .item-content {
-  /**
-   * The content area of a complex list item. This area can
-   * Slide left and right and be dragged to support different
-   * UI interactions.
-   */
-  -webkit-transition: all 0.1s ease-in-out;
-  -moz-transition: all 0.1s ease-in-out;
-  transition: all 0.1s ease-in-out;
   position: relative;
   z-index: 2;
   padding: 15px 40px 15px 15px;
@@ -3545,40 +3579,38 @@ a.item-content {
  * By default, if an .item is created out of an <a> or <button>
  * then a arrow will be added to the right side of the item.
  */
-a.item, button.item, .item a[href].item-content, .item[ng-click] a.item-content {
+a.item, button.item, .item[href] .item-content, .item[ng-click] .item-content {
   padding-right: 40px; }
+  a.item:after, button.item:after, .item[href] .item-content:after, .item[ng-click] .item-content:after {
+    display: -webkit-box;
+    display: -webkit-flex;
+    display: -moz-box;
+    display: -moz-flex;
+    display: -ms-flexbox;
+    display: flex;
+    -webkit-box-align: center;
+    -ms-flex-align: center;
+    -webkit-align-items: center;
+    -moz-align-items: center;
+    align-items: center;
+    -webkit-font-smoothing: antialiased;
+    font-smoothing: antialiased;
+    position: absolute;
+    top: 0;
+    right: 11px;
+    height: 100%;
+    color: #ccc;
+    content: "\f125";
+    text-transform: none;
+    font-weight: normal;
+    font-style: normal;
+    font-variant: normal;
+    font-size: 16px;
+    font-family: 'Ionicons';
+    line-height: 1;
+    speak: none; }
 
-a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-click] a.item-content:after {
-  /* By default, both <a> and <button> have right side arrow icons */
-  display: -webkit-box;
-  display: -webkit-flex;
-  display: -moz-box;
-  display: -moz-flex;
-  display: -ms-flexbox;
-  display: flex;
-  -webkit-box-align: center;
-  -ms-flex-align: center;
-  -webkit-align-items: center;
-  -moz-align-items: center;
-  align-items: center;
-  -webkit-font-smoothing: antialiased;
-  font-smoothing: antialiased;
-  position: absolute;
-  top: 0;
-  right: 11px;
-  height: 100%;
-  color: #ccc;
-  content: "\f125";
-  text-transform: none;
-  font-weight: normal;
-  font-style: normal;
-  font-variant: normal;
-  font-size: 16px;
-  font-family: 'Ionicons';
-  line-height: 1;
-  speak: none; }
-
-.grade-b a.item:after, .grade-b button.item:after, .grade-b .item a[href].item-content:after, .grade-b .item[ng-click] a.item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item a[href].item-content:after, .grade-c .item[ng-click] a.item-content:after {
+.grade-b a.item:after, .grade-b button.item:after, .grade-b .item[href] .item-content:after, .grade-b .item[ng-click] .item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item[href] .item-content:after, .grade-c .item[ng-click] .item-content:after {
   -webkit-font-smoothing: none;
   font-smoothing: none;
   content: '>';
@@ -3587,10 +3619,10 @@ a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-clic
 a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after, button.item-button-right:after, .item a.item-content:after {
   display: none; }
 
-.item-avatar {
+.item-avatar, .item-avatar .item-content {
   padding-left: 70px;
   min-height: 70px; }
-  .item-avatar img:first-child, .item-avatar .item-img {
+  .item-avatar > img:first-child, .item-avatar .item-image, .item-avatar .item-content > img:first-child, .item-avatar .item-content .item-image {
     position: absolute;
     top: 15px;
     left: 15px;
@@ -3602,7 +3634,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .item-thumbnail-left, .item-thumbnail-left .item-content {
   padding-left: 105px;
   min-height: 100px; }
-  .item-thumbnail-left > img:first-child, .item-thumbnail-left > .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content > .item-image {
+  .item-thumbnail-left > img:first-child, .item-thumbnail-left .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content .item-image {
     position: absolute;
     top: 10px;
     left: 10px;
@@ -3610,13 +3642,13 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-avatar.item-complex, .item-thumbnail-left.item-complex {
   padding-left: 0; }
 
 .item-thumbnail-right, .item-thumbnail-right .item-content {
   padding-right: 105px;
   min-height: 100px; }
-  .item-thumbnail-right > img:first-child, .item-thumbnail-right > .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content > .item-image {
+  .item-thumbnail-right > img:first-child, .item-thumbnail-right .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content .item-image {
     position: absolute;
     top: 10px;
     right: 10px;
@@ -3624,7 +3656,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-thumbnail-right.item-complex {
   padding-right: 0; }
 
 .item-image {
@@ -3656,32 +3688,58 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   color: #aaa;
   font-size: 14px; }
 
-.item-reordering {
-  position: absolute;
-  z-index: 9;
-  width: 100%; }
+.item-left-editable .item-content, .item-right-editable .item-content {
+  -webkit-transition-duration: 250ms;
+  -moz-transition-duration: 250ms;
+  transition-duration: 250ms;
+  -webkit-transition-timing-function: ease-in-out;
+  -moz-transition-timing-function: ease-in-out;
+  transition-timing-function: ease-in-out;
+  -webkit-transition-property: none;
+  -moz-transition-property: none;
+  transition-property: none; }
+
+.item-left-editable .item-content {
+  -webkit-transition-property: -webkit-transform;
+  -moz-transition-property: -moz-transform;
+  transition-property: transform; }
+
+.item-right-editable .item-content {
+  -webkit-transition-property: margin-right;
+  -moz-transition-property: margin-right;
+  transition-property: margin-right; }
+
+.item-left-editable.item-right-editable .item-content {
+  -webkit-transition-property: -webkit-transform, margin-right;
+  -moz-transition-property: -moz-transform, margin-right;
+  transition-property: transform, margin-right; }
+
+.list-left-editing .item-left-editable .item-content, .item-left-editing.item-left-editable .item-content {
+  -webkit-transform: translate3d(50px, 0, 0);
+  -moz-transform: translate3d(50px, 0, 0);
+  transform: translate3d(50px, 0, 0); }
 
-.item-placeholder {
-  opacity: 0.7; }
+.list-right-editing .item-right-editable .item-content, .item-right-editing.item-right-editable .item-content {
+  margin-right: 50px; }
 
-/**
- * The left-side edit area of a complex list item. This area shows
- * whe the list item is in edit mode.
- */
-.item-edit {
-  -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
+.item-left-edit {
+  -webkit-transition: all ease-in-out 250ms;
+  -moz-transition: all ease-in-out 250ms;
+  transition: all ease-in-out 250ms;
+  -webkit-transform: translate3d(-42px, 0, 0);
+  -moz-transform: translate3d(-42px, 0, 0);
+  transform: translate3d(-42px, 0, 0);
   position: absolute;
   top: 0;
-  left: 8px;
+  left: 0;
   z-index: 0;
-  width: 48px;
+  width: 50px;
   height: 100%;
-  line-height: 100%; }
-  .item-edit .button {
+  line-height: 100%;
+  opacity: 0; }
+  .item-left-edit .button {
     height: 100%; }
-    .item-edit .button.icon {
+    .item-left-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3695,30 +3753,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       align-items: center;
       position: absolute;
       top: 0;
-      left: 0;
-      height: 100%;
-      color: #ef4e3a;
-      font-size: 24px; }
-  .item-edit.ng-enter {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: -48px;
-    opacity: 0; }
-  .item-edit.ng-enter-active {
-    left: 8px;
-    opacity: 1; }
-  .item-edit.ng-leave {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: 0px;
-    opacity: 1; }
-  .item-edit.ng-leave-active {
-    left: -48px;
-    opacity: 0; }
+      height: 100%; }
+
+.list-left-editing .item-left-edit, .item-left-editing .item-left-edit {
+  -webkit-transform: translate3d(8px, 0, 0);
+  -moz-transform: translate3d(8px, 0, 0);
+  transform: translate3d(8px, 0, 0);
+  opacity: 1; }
+
+.item-delete .button.icon {
+  color: #ef4e3a;
+  font-size: 24px; }
+  .item-delete .button.icon:hover {
+    opacity: 0.7; }
 
-.item-drag {
+.item-right-edit {
   position: absolute;
   top: 0;
   right: 0;
@@ -3726,10 +3775,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   width: 50px;
   height: 100%;
   background: inherit; }
-  .item-drag .button {
-    min-width: 42px;
+  .item-right-edit .button {
+    min-width: 50px;
     height: 100%; }
-    .item-drag .button.icon:before {
+    .item-right-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3746,6 +3795,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       height: 100%;
       font-size: 32px; }
 
+.item-reorder .button.icon {
+  color: #444;
+  font-size: 32px; }
+
+.item-reordering {
+  position: absolute;
+  z-index: 9;
+  width: 100%;
+  box-shadow: 0px 0px 10px 0px #aaa; }
+  .item-reordering .item-reorder {
+    z-index: 1; }
+
+.item-placeholder {
+  opacity: 0.7; }
+
 /**
  * The hidden right-side buttons that can be exposed under a list item
  * with dragging.
@@ -3775,25 +3839,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   padding-left: 0;
   margin-bottom: 20px; }
 
-/* If a list is the last item in a container, don't add margin-bottom */
 .list:last-child {
   margin-bottom: 0px; }
 
 /**
- * List editing styles. These trigger when the entire list goes into
- * "edit mode" or reordering list items
- */
-.list-editing .item-content {
-  -webkit-transform: translate3d(50px, 0, 0);
-  -moz-transform: translate3d(50px, 0, 0);
-  transform: translate3d(50px, 0, 0); }
-
-.list-reordering .item-content {
-  margin-right: 50px; }
-.list-reordering .item-drag {
-  z-index: 1; }
-
-/**
  * List Header
  * --------------------------------------------------
  */
@@ -3857,6 +3906,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .badge {
   background-color: transparent;
   color: #AAAAAA;
+  z-index: 1;
   display: inline-block;
   padding: 3px 8px;
   min-width: 10px;
@@ -3908,19 +3958,19 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
  */
 .slider {
   position: relative;
-  overflow: hidden;
-  visibility: hidden; }
+  visibility: hidden;
+  overflow: hidden; }
 
 .slider-slides {
   position: relative;
   height: 100%; }
 
 .slider-slide {
-  display: block;
   position: relative;
+  display: block;
+  float: left;
   width: 100%;
   height: 100%;
-  float: left;
   vertical-align: top; }
 
 .slider-slide-image > img {
@@ -3929,9 +3979,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .slider-pager {
   position: absolute;
   bottom: 20px;
+  z-index: 1;
   width: 100%;
-  text-align: center;
-  z-index: 1; }
+  height: 15px;
+  text-align: center; }
   .slider-pager .slider-pager-page {
     display: inline-block;
     margin: 0px 3px;
@@ -3940,10 +3991,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     text-decoration: none;
     opacity: 0.3; }
     .slider-pager .slider-pager-page.active {
-      opacity: 1;
       -webkit-transition: opacity 0.4s ease-in;
       -moz-transition: opacity 0.4s ease-in;
-      transition: opacity 0.4s ease-in; }
+      transition: opacity 0.4s ease-in;
+      opacity: 1; }
 
 /**
  * Split Pane
@@ -4008,8 +4059,8 @@ legend {
     font-size: 1.07143; }
 
 label, input, button, select, textarea {
-  font-size: 14px;
   font-weight: normal;
+  font-size: 14px;
   line-height: 1.42857; }
 
 input, button, select, textarea {
@@ -4029,7 +4080,7 @@ input, button, select, textarea {
   align-items: center;
   position: relative;
   overflow: hidden;
-  padding: 6px 8px 5px; }
+  padding: 6px 0 5px 8px; }
   .item-input input {
     -webkit-border-radius: 0;
     -moz-border-radius: 0;
@@ -4044,6 +4095,7 @@ input, button, select, textarea {
     -moz-appearance: none;
     appearance: none;
     margin: 0;
+    padding-right: 24px;
     background-color: transparent; }
   .item-input .button .icon {
     -webkit-box-flex: 0;
@@ -4619,13 +4671,22 @@ input[type="range"] {
   padding-left: 0; }
 
 /**
+ * Progress
+ * --------------------------------------------------
+ */
+progress {
+  display: block;
+  margin: 15px auto;
+  width: 100%; }
+
+/**
  * Buttons
  * --------------------------------------------------
  */
 .button {
-  color: #444;
-  background-color: #f8f8f8;
   border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  color: #444;
   position: relative;
   display: inline-block;
   margin: 0;
@@ -4645,9 +4706,9 @@ input[type="range"] {
     color: #444;
     text-decoration: none; }
   .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .button:after {
     position: absolute;
     top: -6px;
@@ -4675,248 +4736,248 @@ input[type="range"] {
     margin-top: 10px;
     margin-bottom: 10px; }
   .button.button-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
     .button.button-light:hover {
       color: #444;
       text-decoration: none; }
     .button.button-light.active {
+      border-color: #ccc;
       background-color: #fafafa;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #ccc; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-light.button-clear {
-      color: #ddd;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-light.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ddd; }
+    .button.button-light.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-light.button-outline {
-      background: transparent;
       border-color: #ddd;
+      background: transparent;
       color: #ddd; }
       .button.button-light.button-outline.active {
         background-color: #ddd;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
     .button.button-stable:hover {
       color: #444;
       text-decoration: none; }
     .button.button-stable.active {
+      border-color: #a2a2a2;
       background-color: #e5e5e5;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #a2a2a2; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-stable.button-clear {
-      color: #b2b2b2;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-stable.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #b2b2b2; }
+    .button.button-stable.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-stable.button-outline {
-      background: transparent;
       border-color: #b2b2b2;
+      background: transparent;
       color: #b2b2b2; }
       .button.button-stable.button-outline.active {
         background-color: #b2b2b2;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
     .button.button-positive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-positive.active {
+      border-color: #145fd7;
       background-color: #145fd7;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #145fd7; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-positive.button-clear {
-      color: #4a87ee;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-positive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #4a87ee; }
+    .button.button-positive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-positive.button-outline {
-      background: transparent;
       border-color: #4a87ee;
+      background: transparent;
       color: #4a87ee; }
       .button.button-positive.button-outline.active {
         background-color: #4a87ee;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
     .button.button-calm:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-calm.active {
+      border-color: #1aacc3;
       background-color: #1aacc3;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #1aacc3; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-calm.button-clear {
-      color: #43cee6;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-calm.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #43cee6; }
+    .button.button-calm.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-calm.button-outline {
-      background: transparent;
       border-color: #43cee6;
+      background: transparent;
       color: #43cee6; }
       .button.button-calm.button-outline.active {
         background-color: #43cee6;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
     .button.button-assertive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-assertive.active {
+      border-color: #cc2311;
       background-color: #cc2311;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #cc2311; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-assertive.button-clear {
-      color: #ef4e3a;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-assertive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ef4e3a; }
+    .button.button-assertive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-assertive.button-outline {
-      background: transparent;
       border-color: #ef4e3a;
+      background: transparent;
       color: #ef4e3a; }
       .button.button-assertive.button-outline.active {
         background-color: #ef4e3a;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
     .button.button-balanced:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-balanced.active {
+      border-color: #498f24;
       background-color: #498f24;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #498f24; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-balanced.button-clear {
-      color: #66cc33;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-balanced.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #66cc33; }
+    .button.button-balanced.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-balanced.button-outline {
-      background: transparent;
       border-color: #66cc33;
+      background: transparent;
       color: #66cc33; }
       .button.button-balanced.button-outline.active {
         background-color: #66cc33;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
     .button.button-energized:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-energized.active {
+      border-color: #d39211;
       background-color: #d39211;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #d39211; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-energized.button-clear {
-      color: #f0b840;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-energized.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #f0b840; }
+    .button.button-energized.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-energized.button-outline {
-      background: transparent;
       border-color: #f0b840;
+      background: transparent;
       color: #f0b840; }
       .button.button-energized.button-outline.active {
         background-color: #f0b840;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
     .button.button-royal:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-royal.active {
+      border-color: #552bdf;
       background-color: #552bdf;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #552bdf; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-royal.button-clear {
-      color: #8a6de9;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-royal.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #8a6de9; }
+    .button.button-royal.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-royal.button-outline {
-      background: transparent;
       border-color: #8a6de9;
+      background: transparent;
       color: #8a6de9; }
       .button.button-royal.button-outline.active {
         background-color: #8a6de9;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
     .button.button-dark:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-dark.active {
+      border-color: #000;
       background-color: #262626;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #000; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-dark.button-clear {
-      color: #444;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-dark.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #444; }
+    .button.button-dark.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-dark.button-outline {
-      background: transparent;
       border-color: #444;
+      background: transparent;
       color: #444; }
       .button.button-dark.button-outline.active {
         background-color: #444;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
 
 .button-small {
   padding: 0 4px;
@@ -4965,13 +5026,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-clear.button-clear {
-    color: #b2b2b2;
-    background: none;
     border-color: transparent;
-    box-shadow: none; }
-  .button-clear.button-icon {
     background: none;
-    border-color: transparent; }
+    box-shadow: none;
+    color: #b2b2b2; }
+  .button-clear.button-icon {
+    border-color: transparent;
+    background: none; }
   .button-clear.active {
     opacity: 0.3; }
 
@@ -4982,13 +5043,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-outline.button-outline {
-    background: transparent;
     border-color: #b2b2b2;
+    background: transparent;
     color: #b2b2b2; }
     .button-outline.button-outline.active {
       background-color: #b2b2b2;
-      color: #fff;
-      box-shadow: none; }
+      box-shadow: none;
+      color: #fff; }
 
 .padding > .button.button-block:first-child {
   margin-top: 0; }
@@ -6009,9 +6070,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-sm .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-sm .col, .responsive-sm .col-10, .responsive-sm .col-20, .responsive-sm .col-25, .responsive-sm .col-33, .responsive-sm .col-34, .responsive-sm .col-50, .responsive-sm .col-66, .responsive-sm .col-67, .responsive-sm .col-75, .responsive-sm .col-80, .responsive-sm .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 767px) {
   .responsive-md {
@@ -6022,9 +6091,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-md .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-md .col, .responsive-md .col-10, .responsive-md .col-20, .responsive-md .col-25, .responsive-md .col-33, .responsive-md .col-34, .responsive-md .col-50, .responsive-md .col-66, .responsive-md .col-67, .responsive-md .col-75, .responsive-md .col-80, .responsive-md .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 1023px) {
   .responsive-lg {
@@ -6035,9 +6112,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-lg .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-lg .col, .responsive-lg .col-10, .responsive-lg .col-20, .responsive-lg .col-25, .responsive-lg .col-33, .responsive-lg .col-34, .responsive-lg .col-50, .responsive-lg .col-66, .responsive-lg .col-67, .responsive-lg .col-75, .responsive-lg .col-80, .responsive-lg .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 /**
  * Utility Classes
@@ -6062,9 +6147,9 @@ a.button {
 .invisible {
   visibility: hidden; }
 
-.hide-footer .bar-footer, .hide-footer .tabs {
+.footer-hide .bar-footer, .footer-hide .tabs {
   display: none; }
-.hide-footer .has-footer, .hide-footer .has-tabs {
+.footer-hide .has-footer, .footer-hide .has-tabs {
   bottom: 0; }
 
 .inline {
diff --git a/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic-angular.js b/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic-angular.js
index 0aba146..c8cdf25 100644
--- a/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic-angular.js
+++ b/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic-angular.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,6 +12,7 @@
  *
  */
 
+(function() {
 /**
  * Create a wrapping module to ease having to include too many
  * modules.
@@ -37,33 +38,25 @@ angular.module('ionic.service', [
   'ionic.decorator.location'
 ]);
 
-// UI specific services and delegates
-angular.module('ionic.ui.service', [
-  'ionic.ui.service.scrollDelegate',
-  'ionic.ui.service.slideBoxDelegate',
-  'ionic.ui.service.sideMenuDelegate',
-]);
-
 angular.module('ionic.ui', [
-                            'ionic.ui.content',
-                            'ionic.ui.scroll',
-                            'ionic.ui.tabs',
-                            'ionic.ui.viewState',
-                            'ionic.ui.header',
-                            'ionic.ui.sideMenu',
-                            'ionic.ui.slideBox',
-                            'ionic.ui.list',
-                            'ionic.ui.checkbox',
-                            'ionic.ui.toggle',
-                            'ionic.ui.radio',
-                            'ionic.ui.touch',
-                            'ionic.ui.popup'
-                           ]);
-
+    'ionic.ui.checkbox',
+    'ionic.ui.content',
+    'ionic.ui.header',
+    'ionic.ui.list',
+    'ionic.ui.navBar',
+    'ionic.ui.popup',
+    'ionic.ui.radio',
+    'ionic.ui.scroll',
+    'ionic.ui.sideMenu',
+    'ionic.ui.slideBox',
+    'ionic.ui.tabs',
+    'ionic.ui.toggle',
+    'ionic.ui.touch',
+    'ionic.ui.viewState'
+]);
 
 angular.module('ionic', [
     'ionic.service',
-    'ionic.ui.service',
     'ionic.ui',
 
     // Angular deps
@@ -127,6 +120,86 @@ angular.element.prototype.removeClass = function(cssClasses) {
   return this;
 };
 
+
+function delegateService(methodNames) {
+  return ['$log', function($log) {
+    var delegate = this;
+
+    var instances = this._instances = [];
+    this._registerInstance = function(instance, handle) {
+      handle || (handle = ionic.Utils.nextUid());
+
+      instance.$$delegateHandle = handle;
+      instances.push(instance);
+
+      return function deregister() {
+        var index = instances.indexOf(instance);
+        if (index !== -1) {
+          instances.splice(index, 1);
+        }
+      };
+    };
+
+    this.$getByHandle = function(handle) {
+      if (!handle) {
+        return delegate;
+      }
+      return new InstanceForHandle(handle);
+    };
+
+    /*
+     * Creates a new object that will have all the methodNames given,
+     * and call them on the given the controller instance matching given
+     * handle.
+     * The reason we don't just let $getByHandle return the controller instance
+     * itself is that the controller instance might not exist yet.
+     *
+     * We want people to be able to do
+     * `var instance = $ionicScrollDelegate.$getByHandle('foo')` on controller
+     * instantiation, but on controller instantiation a child directive
+     * may not have been compiled yet!
+     *
+     * So this is our way of solving this problem: we create an object
+     * that will only try to fetch the controller with given handle
+     * once the methods are actually called.
+     */
+    function InstanceForHandle(handle) {
+      this.handle = handle;
+    }
+    methodNames.forEach(function(methodName) {
+      InstanceForHandle.prototype[methodName] = function() {
+        var handle = this.handle;
+        var instancesToUse = instances.filter(function(instance) {
+          return instance.$$delegateHandle === handle;
+        });
+        if (!instancesToUse.length) {
+          return $log.warn(
+            'Delegate for handle "'+this.handle+'" could not find a',
+            'corresponding element with delegate-handle="'+this.handle+'"!',
+            methodName, 'was not called!');
+        }
+        return callMethod(instancesToUse, methodName, arguments);
+      };
+      delegate[methodName] = function() {
+        return callMethod(instances, methodName, arguments);
+      };
+
+      function callMethod(instancesToUse, methodName, args) {
+        var finalResult;
+        var result;
+        instancesToUse.forEach(function(instance, index) {
+          result = instance[methodName].apply(instance, args);
+          //Make it so the first result is the one returned
+          if (index === 0) {
+            finalResult = result;
+          }
+        });
+        return finalResult;
+      }
+    });
+  }];
+}
+
 angular.module('ionic.service.actionSheet', ['ionic.service.templateLoad', 'ionic.service.platform', 'ionic.ui.actionSheet', 'ngAnimate'])
 
 /**
@@ -405,6 +478,7 @@ angular.module('ionic.service.loading', ['ionic.ui.loading'])
      * @returns {object} A shown loader with the following methods:
      *  - `hide()` - Hides the loader.
      *  - `show()` - Shows the loader.
+     *  - `setContent(string)` - Sets the html content of the loader.
      */
     show: function(opts) {
       var defaults = {
@@ -452,7 +526,6 @@ angular.module('ionic.service.modal', ['ionic.service.templateLoad', 'ionic.serv
  * @ngdoc service
  * @name $ionicModal
  * @module ionic
- * @controller ionicModal
  * @description
  * The Modal is a content pane that can go over the user's main view
  * temporarily.  Usually used for making a choice or editing an item.
@@ -683,7 +756,6 @@ angular.module('ionic.service.platform', [])
  * @ngdoc service
  * @name $ionicPlatform
  * @module ionic
- * @group utilities
  * @description
  * An angular abstraction of {@link ionic.utility:ionic.Platform}.
  *
@@ -869,8 +941,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         console.log('Tapped!', res);
       }, function(err) {
         console.log('Err:', err);
-      }, function(msg) {
-        console.log('message:', msg);
+      }, function(popup) {
+        // If you need to access the popup directly, do it in the notify method
+        // This is also where you can programatically close the popup:
+        // popup.close();
       });
 
       // A confirm dialog
@@ -922,7 +996,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   });
   ```
 
- 
+
  */
 .factory('$ionicPopup', ['$rootScope', '$q', '$document', '$compile', '$timeout', '$ionicTemplateLoader',
   function($rootScope, $q, $document, $compile, $timeout, $ionicTemplateLoader) {
@@ -947,6 +1021,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     }
   };
 
+  var focusLastButton = function(popup) {
+    var buttons, lastButton;
+    buttons = popup.el.querySelectorAll('button');
+    lastButton = buttons[buttons.length-1];
+    if(lastButton) {
+      lastButton.focus();
+    }
+  }
+
   // Show a single popup
   var showSinglePopup = function(popup, opts) {
     var _this = this;
@@ -957,6 +1040,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+
+      focusLastButton(popup);
     });
   };
 
@@ -966,6 +1051,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+      focusLastButton(popup);
     });
   };
 
@@ -1003,11 +1089,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     var el = $compile('<ion-popup-backdrop></ion-popup-backdrop>')($rootScope.$new(true));
     $document[0].body.appendChild(el[0]);
     backdropEl = el;
+    $document[0].body.classList.add('popup-open');
   };
 
   // Remove the backdrop element
   var removeBackdrop = function() {
     backdropEl.remove();
+    $timeout(function(){
+      $document[0].body.classList.remove('popup-open');
+    }, 300);
   };
 
   // Push the new popup onto the stack with the given data and scope.
@@ -1054,7 +1144,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   var constructPopupOnScope = function(element, scope) {
     var popup = {
       el: element[0],
-      scope: scope
+      scope: scope,
+      close: function() {
+        popAndRemove(this);
+      }
     };
 
     scope.popup = popup;
@@ -1063,8 +1156,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   }
 
   var buildPopupTemplate = function(opts, content) {
-    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">' 
-        + (content || '') + 
+    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">'
+        + (content || '') +
       '</ion-popup>';
   };
 
@@ -1120,18 +1213,25 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   };
 
 
+
   // Public API
   return {
+    /**
+     * @private
+     */
     showPopup: function(data) {
       var q = $q.defer();
 
       createPopup(data, q).then(function(popup, scope) {
 
+        // Send the popup back
+        q.notify(popup);
+
         // We constructed the popup, push it on the stack and show it
         pushAndShow(popup, data);
 
       }, function(err) {
-        console.error('Unable to load popup:', err);
+        void 0;
       });
 
       return q.promise;
@@ -1142,7 +1242,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @name $ionicPopup#show
      * @description show a complex popup. This is the master show function for all popups
      * @param {data} object The options for showing a popup, of the form:
-     *
+     * @returns {Promise} an Angular promise which resolves when the user enters the correct data, and also
+     * sends the constructed popup in the notify function (for programatic closing, as shown in the example above).
      * ```
      * {
      *   content: '', // String. The content of the popup
@@ -1150,7 +1251,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *   subTitle: '', // String (optional). The sub-title of the popup
      *   templateUrl: '', // URL String (optional). The URL of a template to load as the content (instead of the `content` field)
      *   scope: null, // Scope (optional). A scope to apply to the popup content (for using ng-model in a template, for example)
-     *   buttons: 
+     *   buttons:
      *     [
      *       {
      *         text: 'Cancel',
@@ -1173,7 +1274,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *         }
      *       }
      *     ]
-     * 
+     *
      * }
      * ```
     */
@@ -1190,7 +1291,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *
      * ```javascript
      *  $ionicPopup.alert({
-     *    title: 'Hey!;,
+     *    title: 'Hey!',
      *    content: 'Don\'t do that!'
      *  }).then(function(res) {
      *    // Accepted
@@ -1283,7 +1384,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @ngdoc method
      * @name $ionicPopup#prompt
      * @description show a simple prompt dialog.
-     * 
+     *
      * ```javascript
      *  $ionicPopup.prompt({
      *    title: 'Password Check',
@@ -1336,7 +1437,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         ]
       });
     }
-    
+
   };
 }]);
 
@@ -1484,6 +1585,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           currentView = viewHistory.currentView,
           backView = viewHistory.backView,
           forwardView = viewHistory.forwardView,
+          nextViewOptions = this.nextViewOptions(),
           rsp = {
             viewId: null,
             navAction: null,
@@ -1517,7 +1619,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
         // they went back one, set the old current view as a forward view
         rsp.viewId = backView.viewId;
         rsp.navAction = 'moveBack';
-        currentView.scrollValues = {}; //when going back, erase scrollValues
+        rsp.viewId = backView.viewId;
         if(backView.historyId === currentView.historyId) {
           // went back in the same history
           rsp.navDirection = 'back';
@@ -1591,13 +1693,23 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           stateName: this.getCurrentStateName(),
           stateParams: this.getCurrentStateParams(),
           url: $location.url(),
-          scrollValues: null
         });
 
+        if (rsp.navAction == 'moveBack') {
+          //moveBack(from, to);
+          $rootScope.$emit('$viewHistory.viewBack', currentView.viewId, rsp.viewId);
+        }
+
         // add the new view to this history's stack
         hist.stack.push(viewHistory.views[rsp.viewId]);
       }
 
+      if(nextViewOptions) {
+        if(nextViewOptions.disableAnimate) rsp.navDirection = null;
+        if(nextViewOptions.disableBack) viewHistory.views[rsp.viewId].backViewId = null;
+        this.nextViewOptions(null);
+      }
+
       this.setNavViews(rsp.viewId);
 
       hist.cursor = viewHistory.currentView.index;
@@ -1747,6 +1859,14 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
       return { historyId: 'root', scope: $rootScope };
     },
 
+    nextViewOptions: function(opts) {
+      if(arguments.length) {
+        this._nextOpts = opts;
+      } else {
+        return this._nextOpts;
+      }
+    },
+
     getRenderer: function(navViewElement, navViewAttrs, navViewScope) {
       var service = this;
       var registerData;
@@ -1902,293 +2022,29 @@ angular.module('ionic.decorator.location', [])
  * @private
  */
 .config(['$provide', function($provide) {
-  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
-}]);
-
-function $LocationDecorator($location, $timeout) {
-
-  $location.__hash = $location.hash;
-  //Fix: when window.location.hash is set, the scrollable area
-  //found nearest to body's scrollTop is set to scroll to an element
-  //with that ID.
-  $location.hash = function(value) {
-    if (angular.isDefined(value)) {
-      $timeout(function() {
-        var scroll = document.querySelector('.scroll-content');
-        if (scroll)
-          scroll.scrollTop = 0;
-      }, 0, false);
-    }
-    return $location.__hash(value);
-  };
-
-  return $location;
-}
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.scrollDelegate', [])
-
-/**
- * @ngdoc service
- * @name $ionicScrollDelegate
- * @module ionic
- * @group page layout
- * @description
- * Allows you to have some control over a scrollable area (created by an
- * {@link ionic.directive:ionContent} or {@link ionic.directive:ionScroll}
- * directive).
- *
- * Inject it into a controller, and its methods will send messages to the nearest scrollView and all of its children.
- *
- * @usage
- * ```html
- * <ion-content ng-controller="MyController">
- *   <button class="button" ng-click="scrollToTop()">
- *     Scroll To Top
- *   </button>
- * </ion-content>
- * ```
- * ```js
- * function MyController($scope, $ionicScrollDelegate) {
- *   $scope.scrollToTop = function() {
- *     $ionicScrollDelegate.scrollTop();
- *   };
- * }
- * ```
- */
-.factory('$ionicScrollDelegate', ['$rootScope', '$timeout', '$q', '$anchorScroll', '$location', '$document', function($rootScope, $timeout, $q, $anchorScroll, $location, $document) {
-  return {
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollTop
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTop: function(animate) {
-      $rootScope.$broadcast('scroll.scrollTop', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollBottom
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollBottom: function(animate) {
-      $rootScope.$broadcast('scroll.scrollBottom', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scroll
-     * @param {number} left The x-value to scroll to.
-     * @param {number} top The y-value to scroll to.
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTo: function(left, top, animate) {
-      $rootScope.$broadcast('scroll.scrollTo', left, top, animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#anchorScroll
-     * @description Tell the scrollView to scroll to the element with an id
-     * matching window.location.hash.
-     *
-     * If no matching element is found, it will scroll to top.
-     *
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    anchorScroll: function(animate) {
-      $rootScope.$broadcast('scroll.anchorScroll', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#resize
-     * @description Tell the scrollView to recalculate the size of its container.
-     */
-    resize: function() {
-      $rootScope.$broadcast('scroll.resize');
-    },
-    /**
-     * @private
-     */
-    tapScrollToTop: function(element, animate) {
-      var _this = this;
-      if (!angular.isDefined(animate)) {
-        animate = true;
-      }
-
-      ionic.on('tap', function(e) {
-        var target = e.target;
-        //Don't scroll to top for a button click
-        if (ionic.DomUtil.getParentOrSelfWithClass(target, 'button')) {
-          return;
-        }
-
-        var el = element[0];
-        var bounds = el.getBoundingClientRect();
-
-        if(ionic.DomUtil.rectContains(e.gesture.touches[0].pageX, e.gesture.touches[0].pageY, bounds.left, bounds.top, bounds.left + bounds.width, bounds.top + 20)) {
-          _this.scrollTop(animate);
-        }
-      }, element[0]);
-    },
-
-    finishRefreshing: function($scope) {
-      $scope.$broadcast('scroll.refreshComplete');
-    },
-
-    /**
-     * @private
-     * Attempt to get the current scroll view in scope (if any)
-     *
-     * Note: will not work in an isolated scope context.
-     */
-    getScrollView: function($scope) {
-      return $scope.scrollView;
-    },
-
-    /**
-     * @private
-     * Register a scope and scroll view for scroll event handling.
-     * $scope {Scope} the scope to register and listen for events
-     */
-    register: function($scope, $element, scrollView) {
-
-      var scrollEl = $element[0];
-
-      function scrollViewResize() {
-        // Run the resize after this digest
-        return $timeout(function() {
-          scrollView.resize();
-        });
-      }
-
-      $element.on('scroll', function(e) {
-        var detail = (e.originalEvent || e).detail || {};
-
-        $scope.$onScroll && $scope.$onScroll({
-          event: e,
-          scrollTop: detail.scrollTop || 0,
-          scrollLeft: detail.scrollLeft || 0
-        });
-
-      });
-
-      $scope.$parent.$on('scroll.resize', scrollViewResize);
-
-      // Called to stop refreshing on the scroll view
-      $scope.$parent.$on('scroll.refreshComplete', function(e) {
-        scrollView.finishPullToRefresh();
-      });
-
-      $scope.$parent.$on('scroll.anchorScroll', function(e, animate) {
-        scrollViewResize().then(function() {
-          var hash = $location.hash();
-          var elm;
-          if (hash && (elm = document.getElementById(hash)) ) {
-            var scroll = ionic.DomUtil.getPositionInParent(elm, scrollEl);
-            scrollView.scrollTo(scroll.left, scroll.top, !!animate);
-          } else {
-            scrollView.scrollTo(0,0, !!animate);
-          }
-        });
-      });
-
-      $scope.$parent.$on('scroll.scrollTo', function(e, left, top, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(left, top, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollTop', function(e, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(0, 0, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollBottom', function(e, animate) {
-        scrollViewResize().then(function() {
-          var sv = scrollView;
-          if (sv) {
-            var max = sv.getScrollMax();
-            sv.scrollTo(max.left, max.top, !!animate);
-          }
-        });
-      });
-    }
-  };
-}]);
-
-})(ionic);
-
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.sideMenuDelegate', [])
-
-.factory('$ionicSideMenuDelegate', ['$rootScope', '$timeout', '$q', function($rootScope, $timeout, $q) {
-  return {
-    getSideMenuController: function($scope) {
-      return $scope.sideMenuController;
-    },
-    close: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.close();
-      }
-    },
-    toggleLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleLeft();
-      }
-    },
-    toggleRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleRight();
-      }
-    },
-    openLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(100);
-      }
-    },
-    openRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(-100);
+  function $LocationDecorator($location, $timeout) {
+
+    $location.__hash = $location.hash;
+    //Fix: when window.location.hash is set, the scrollable area
+    //found nearest to body's scrollTop is set to scroll to an element
+    //with that ID.
+    $location.hash = function(value) {
+      if (angular.isDefined(value)) {
+        $timeout(function() {
+          var scroll = document.querySelector('.scroll-content');
+          if (scroll)
+            scroll.scrollTop = 0;
+        }, 0, false);
       }
-    }
-  };
-}]);
-
-})();
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.slideBoxDelegate', [])
-
-.factory('$ionicSlideBoxDelegate', ['$rootScope', '$timeout', function($rootScope, $timeout) {
-  return {
-    /**
-     * Trigger a slidebox to update and resize itself
-     */
-    update: function(animate) {
-      $rootScope.$broadcast('slideBox.update');
-    },
+      return $location.__hash(value);
+    };
 
-    register: function($scope, $element) {
-      $scope.$parent.$on('slideBox.update', function(e) {
-        if(e.defaultPrevented) {
-          return;
-        }
-        $timeout(function() {
-          $scope.$parent.slideBoxController.setup();
-        });
-        e.preventDefault();
-      });
-    }
-  };
+    return $location;
+  }
+  
+  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
 }]);
 
-})(ionic);
-
 (function() {
 'use strict';
 
@@ -2251,124 +2107,144 @@ angular.module('ionic.ui.actionSheet', [])
 
 angular.module('ionic.ui.header', ['ngAnimate', 'ngSanitize'])
 
-.directive('barHeader', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'C',
-    link: function($scope, $element, $attr) {
-      // We want to scroll to top when the top of this element is clicked
-      $ionicScrollDelegate.tapScrollToTop($element);
-    }
-  };
-}])
+.directive('ionNavBar', tapScrollToTopDirective())
+.directive('ionHeaderBar', tapScrollToTopDirective())
 
 /**
  * @ngdoc directive
  * @name ionHeaderBar
  * @module ionic
  * @restrict E
+ *
  * @description
- * While Ionic provides simple Header and Footer bars that can be created through
- * HTML and CSS alone, Header bars specifically can be extended in order to
- * provide dynamic layout features such as auto-title centering and animation.
- * They are also used by the Views and Navigation Controller to animate a title
- * on navigation and toggle a back button.
- *
- * The main header bar feature provided is auto title centering.
- * In this situation, the title text will center itself until either the
- * left or right button content is too wide for the label to center.
- * In that case, it will slide left or right until it can fit.
- * You can also align the title left for a more Android-friendly header.
- *
- * Using two-way data binding, the header bar will automatically
- * readjust the heading title alignment when the title or buttons change.
- *
- * @param {string} title The title use on the headerBar.
- * @param {expression=} leftButtons Point to an array of buttons to put on the left of the bar.
- * @param {expression=} rightButtons Point to an array of buttons to put on the right of the bar.
- * @param {string=} type The type of the bar, for example 'bar-positive'.
- * @param {string=} align Where to align the title. 'left', 'right', or 'center'.  Defaults to 'center'.
+ * Adds a fixed header bar above some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
  *
  * @usage
  * ```html
- * <ion-header-bar
- *  title="{{myTitle}}"
- *  left-buttons="leftButtons"
- *  right-buttons="rightButtons"
- *  type="bar-positive"
- *  align-title="center">
+ * <ion-header-bar align-title="left" class="bar-positive">
+ *   <div class="buttons">
+ *     <button class="button" ng-click="doSomething()">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons">
+ *     <button class="button">Right Button</button>
+ *   </div>
  * </ion-header-bar>
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
  * ```
- *
  */
-.directive('ionHeaderBar', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<header class="bar bar-header">\
-                <div class="buttons">\
-                  <button ng-repeat="button in leftButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-                <h1 class="title" ng-bind-html="title"></h1>\
-                <div class="buttons">\
-                  <button ng-repeat="button in rightButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-              </header>',
+.directive('ionHeaderBar', barDirective(true))
 
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      type: '@',
-      alignTitle: '@'
-    },
-    link: function($scope, $element, $attr) {
-      var hb = new ionic.views.HeaderBar({
-        el: $element[0],
-        alignTitle: $scope.alignTitle || 'center'
-      });
+/**
+ * @ngdoc directive
+ * @name ionFooterBar
+ * @module ionic
+ * @restrict E
+ *
+ * @description
+ * Adds a fixed footer bar below some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
+ *
+ * @usage
+ * ```html
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
+ * <ion-footer-bar align-title="left" class="bar-assertive">
+ *   <div class="buttons">
+ *     <button class="button">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons" ng-click="doSomething()">
+ *     <button class="button">Right Button</button>
+ *   </div>
+ * </ion-footer-bar>
+ * ```
+ */
+.directive('ionFooterBar', barDirective(false));
 
-      $element.addClass($scope.type);
+function tapScrollToTopDirective() {
+  return ['$ionicScrollDelegate', function($ionicScrollDelegate) {
+    return {
+      restrict: 'E',
+      link: function($scope, $element, $attr) {
+        ionic.on('tap', onTap, $element[0]);
+        $scope.$on('$destroy', function() {
+          ionic.off('tap', onTap, $element[0]);
+        });
 
-      $scope.headerBarView = hb;
+        function onTap(e) {
+          if (ionic.DomUtil.getParentOrSelfWithClass(e.target, 'button', 4)) {
+            return;
+          }
+          var touch = e.gesture && e.gesture.touches[0] || e.detail.touches[0];
+          var bounds = $element[0].getBoundingClientRect();
+          if (ionic.DomUtil.rectContains(
+            touch.pageX, touch.pageY,
+            bounds.left, bounds.top - 20,
+            bounds.left + bounds.width, bounds.top + bounds.height
+          )) {
+            $ionicScrollDelegate.scrollTop(true);
+          }
+        }
+      }
+    };
+  }];
+}
 
-      $scope.$watchCollection('leftButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
 
-      $scope.$watchCollection('rightButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
-
-      $scope.$watch('title', function(val) {
-        // Resize the title since the title has changed
-        hb.align();
-      });
-    }
-  };
-}])
-
-.directive('ionFooterBar', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<footer class="bar bar-footer" ng-transclude>\
-              </footer>',
+function barDirective(isHeader) {
+  return [function() {
+    return {
+      restrict: 'E',
+      compile: function($element, $attr) {
+        $element.addClass(isHeader ? 'bar bar-header' : 'bar bar-footer');
+
+        return { pre: prelink };
+        function prelink($scope, $element, $attr) {
+          var hb = new ionic.views.HeaderBar({
+            el: $element[0],
+            alignTitle: $attr.alignTitle || 'center'
+          });
 
-    scope: {
-      type: '@',
-    },
+          var el = $element[0];
+          //just incase header is on rootscope
+          var parentScope = $scope.$parent || $scope;
 
-    link: function($scope, $element, $attr) {
-      $element.addClass($scope.type);
-    }
-  };
-});
+          if (isHeader) {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubheader = value.indexOf('bar-subheader') !== -1;
+              parentScope.$hasHeader = !isSubheader;
+              parentScope.$hasSubheader = isSubheader;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasHeader = parentScope.$hasSubheader = null;
+            });
+          } else {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubfooter = value.indexOf('bar-subfooter') !== -1;
+              parentScope.$hasFooter = !isSubfooter;
+              parentScope.$hasSubfooter = isSubfooter;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasFooter = parentScope.$hasSubfooter = null;
+            });
+            $scope.$watch('$hasTabs', function(val) {
+              $element.toggleClass('has-tabs', !!val);
+            });
+          }
+        }
+      }
+    };
+  }];
+}
 
 })(ionic);
 
@@ -2428,7 +2304,7 @@ angular.module('ionic.ui.checkbox', [])
 (function() {
 'use strict';
 
-angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
+angular.module('ionic.ui.content', ['ionic.ui.scroll'])
 
 /**
  * Panel is a simple 100% width and height, fixed panel. It's meant for content to be
@@ -2438,7 +2314,6 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionPane
  * @module ionic
- * @group page layout
  * @restrict E
  *
  * @description A simple container that fits content, with no side effects.  Adds the 'pane' class to the element.
@@ -2456,12 +2331,12 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionContent
  * @module ionic
- * @group page layout
- * @groupMainItem
+ * @delegate ionic.service:$ionicScrollDelegate
+ * @restrict E
  *
  * @description
  * The ionContent directive provides an easy to use content area that can be configured
- * to use Ionic's custom Scroll View, or the built in overflow scorlling of the browser.
+ * to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
  *
  * While we recommend using the custom Scroll features in Ionic in most cases, sometimes
  * (for performance reasons) only the browser's native overflow scrolling will suffice,
@@ -2472,52 +2347,48 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * directive, and infinite scrolling with the {@link ionic.directive:ionInfiniteScroll}
  * directive.
  *
- * @restrict E
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
+ * @param {boolean=} padding Whether to add padding to the content.
+ * of the content.  Defaults to true on iOS, false on Android.
  * @param {boolean=} scroll Whether to allow scrolling of content.  Defaults to true.
  * @param {boolean=} overflow-scroll Whether to use overflow-scrolling instead of
  * Ionic scroll.
- * @param {boolean=} padding Whether to add padding to the content.
- * @param {boolean=} has-header Whether to offset the content for a header bar.
- * @param {boolean=} has-subheader Whether to offset the content for a subheader bar.
- * @param {boolean=} has-footer Whether to offset the content for a footer bar.
  * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
  * of the content.  Defaults to true on iOS, false on Android.
  * @param {expression=} on-scroll Expression to evaluate when the content is scrolled.
  * @param {expression=} on-scroll-complete Expression to evaluate when a scroll action completes.
  */
 .directive('ionContent', [
-  '$parse',
   '$timeout',
-  '$ionicScrollDelegate',
   '$controller',
   '$ionicBind',
-function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    transclude: true,
     require: '^?ionNavView',
     scope: true,
-    template:
-    '<div class="scroll-content">' +
-      '<div class="scroll"></div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(attr.hasHeader == "true") { element.addClass('has-header'); }
-      if(attr.hasSubheader == "true") { element.addClass('has-subheader'); }
-      if(attr.hasFooter == "true") { element.addClass('has-footer'); }
-      if(attr.hasTabs == "true") { element.addClass('has-tabs'); }
-      if(attr.padding == "true") { element.find('div').addClass('padding'); }
+    compile: function(element, attr) {
+      element.addClass('scroll-content');
 
-      return {
-        //Prelink <ion-content> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr, navViewCtrl) {
-        var clone, sc, scrollView, scrollCtrl,
-          scrollContent = angular.element($element[0].querySelector('.scroll'));
+        $scope.$watch(function() {
+          return ($scope.$hasHeader ? ' has-header' : '')  +
+            ($scope.$hasSubheader ? ' has-subheader' : '') +
+            ($scope.$hasFooter ? ' has-footer' : '') +
+            ($scope.$hasSubfooter ? ' has-subfooter' : '') +
+            ($scope.$hasTabs ? ' has-tabs' : '') +
+            ($scope.$hasTabsTop ? ' has-tabs-top' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
 
         $ionicBind($scope, $attr, {
           $onScroll: '&onScroll',
@@ -2534,16 +2405,22 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           scrollEventInterval: '@'
         });
 
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
+        }
+
         if ($scope.scroll === "false") {
           //do nothing
         } else if(attr.overflowScroll === "true") {
           $element.addClass('overflow-scroll');
         } else {
-
-          scrollCtrl = $controller('$ionicScroll', {
+          $controller('$ionicScroll', {
             $scope: $scope,
             scrollViewOptions: {
               el: $element[0],
+              delegateHandle: attr.delegateHandle,
               bouncing: $scope.$eval($scope.hasBouncing),
               startX: $scope.$eval($scope.startX) || 0,
               startY: $scope.$eval($scope.startY) || 0,
@@ -2560,33 +2437,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
               }
             }
           });
-          //Publish scrollView to parent so children can access it
-          scrollView = $scope.$parent.scrollView = scrollCtrl.scrollView;
-
-          $scope.$on('$viewContentLoaded', function(e, viewHistoryData) {
-            viewHistoryData || (viewHistoryData = {});
-            var scroll = viewHistoryData.scrollValues;
-            if (scroll) {
-              $timeout(function() {
-                scrollView.scrollTo(+scroll.left || null, +scroll.top || null);
-              }, 0);
-            }
-
-            //Save scroll onto viewHistoryData when scope is destroyed
-            $scope.$on('$destroy', function() {
-              viewHistoryData.scrollValues = scrollView.getValues();
-            });
-          });
-
         }
 
-        transclude($scope, function(clone) {
-          if (scrollCtrl) {
-            clone.data('$$ionicScrollController', scrollCtrl);
-          }
-          scrollContent.append(clone);
-        });
-
       }
     }
   };
@@ -2597,7 +2449,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @name ionRefresher
  * @module ionic
  * @restrict E
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @description
  * Allows you to add pull-to-refresh to a scrollView.
@@ -2608,19 +2459,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * When refreshing is complete, $broadcast the 'scroll.refreshComplete' event
  * from your controller.
  *
- * @param {expression=} on-refresh Called when the user pulls down enough and lets go
- * of the refresher.
- * @param {expression=} on-pulling Called when the user starts to pull down
- * on the refresher.
- * @param {string=} pulling-icon The icon to display while the user is pulling down.
- * Default: 'ion-arrow-down-c'.
- * @param {string=} pulling-text The text to display while the user is pulling down.
- * @param {string=} refreshing-icon The icon to display after user lets go of the
- * refresher.
- * @param {string=} refreshing-text The text to display after the user lets go of
- * the refresher.
- *
  * @usage
+ *
  * ```html
  * <ion-content ng-controller="MyController">
  *   <ion-refresher
@@ -2645,6 +2485,19 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  *   };
  * });
  * ```
+ *
+ * @param {expression=} on-refresh Called when the user pulls down enough and lets go
+ * of the refresher.
+ * @param {expression=} on-pulling Called when the user starts to pull down
+ * on the refresher.
+ * @param {string=} pulling-icon The icon to display while the user is pulling down.
+ * Default: 'ion-arrow-down-c'.
+ * @param {string=} pulling-text The text to display while the user is pulling down.
+ * @param {string=} refreshing-icon The icon to display after user lets go of the
+ * refresher.
+ * @param {string=} refreshing-text The text to display after the user lets go of
+ * the refresher.
+ *
  */
 .directive('ionRefresher', ['$ionicBind', function($ionicBind) {
   return {
@@ -2677,7 +2530,7 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           $onPulling: '&onPulling'
         });
 
-        scrollCtrl.setRefresher($scope, $element[0]);
+        scrollCtrl._setRefresher($scope, $element[0]);
         $scope.$on('scroll.refreshComplete', function() {
           $element[0].classList.remove('active');
           scrollCtrl.scrollView.finishPullToRefresh();
@@ -2691,7 +2544,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @ngdoc directive
  * @name ionInfiniteScroll
  * @module ionic
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @restrict E
  *
@@ -2857,12 +2709,12 @@ angular.module('ionic.ui.list', ['ngAnimate'])
     },
 
     template: '<div class="item item-complex">\
-            <div class="item-edit" ng-if="deleteClick !== undefined">\
+            <div class="item-left-edit item-delete" ng-if="deleteClick !== undefined">\
               <button class="button button-icon icon" ng-class="deleteIconClass" ng-click="deleteClick()" ion-stop-event="click"></button>\
             </div>\
             <a class="item-content" ng-href="{{ href }}" ng-transclude></a>\
-            <div class="item-drag" ng-if="reorderIconClass !== undefined">\
-              <button data-ionic-action="reorder" class="button button-icon icon" ng-class="reorderIconClass"></button>\
+            <div class="item-right-edit item-reorder" ng-if="reorderIconClass !== undefined">\
+              <button data-ionic-action="reorder" data-prevent-scroll="true" class="button button-icon icon" ng-class="reorderIconClass"></button>\
             </div>\
             <div class="item-options" ng-if="itemOptionButtons">\
              <button ng-click="b.onTap(item, b)" ion-stop-event="click" class="button" ng-class="b.type" ng-repeat="b in itemOptionButtons" ng-bind="b.text"></button>\
@@ -2898,22 +2750,24 @@ angular.module('ionic.ui.list', ['ngAnimate'])
           $scope.deleteClick = function() {
             if($attr.onDelete) {
               // this item has an on-delete attribute
-              $scope.onDelete({ item: $scope.item });
+              $scope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             } else if($parentAttrs.onDelete) {
               // run the parent list's onDelete method
               // if it doesn't exist nothing will happen
-              $parentScope.onDelete({ item: $scope.item });
+              $parentScope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             }
           };
 
           // Set which icons to use for deleting
           $scope.deleteIconClass = $scope.deleteIcon || $parentScope.deleteIcon || 'ion-minus-circled';
+          $element.addClass('item-left-editable');
         }
       }
 
       // set the reorder Icon Class only if the item or list set can-reorder="true"
       if(($attr.canReorder ? $scope.canReorder : $parentScope.canReorder) === "true") {
         $scope.reorderIconClass = $scope.reorderIcon || $parentScope.reorderIcon || 'ion-navicon';
+        $element.addClass('item-right-editable');
       }
 
       // Set the option buttons which can be revealed by swiping to the left
@@ -2923,6 +2777,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
         if(typeof $scope.itemOptionButtons === "undefined") {
           $scope.itemOptionButtons = $parentScope.optionButtons();
         }
+        $element.addClass('item-swipeable');
       }
 
     }
@@ -2996,7 +2851,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       reorderIcon: '@'
     },
 
-    template: '<div class="list" ng-class="{\'list-editing\': showDelete, \'list-reordering\': showReorder}" ng-transclude></div>',
+    template: '<div class="list" ng-class="{\'list-left-editing\': showDelete, \'list-right-editing\': showReorder}" ng-transclude></div>',
 
     controller: ['$scope', '$attrs', function($scope, $attrs) {
       this.scope = $scope;
@@ -3005,6 +2860,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
 
     link: function($scope, $element, $attr, ionicScrollCtrl) {
       $scope.listView = new ionic.views.ListView({
+        canSwipe: $scope.canSwipe !== "false" && !!$scope.optionButtons(),
         el: $element[0],
         listEl: $element[0].children[0],
         scrollEl: ionicScrollCtrl && ionicScrollCtrl.element,
@@ -3023,6 +2879,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       var destroyShowReorderWatch = $scope.$watch('showReorder', function(val) {
         if(val) {
           $element[0].classList.add('item-options-hide');
+          $scope.listView && $scope.listView.clearDragEffects();
         } else if(val === false) {
           // false checking is because it could be undefined
           // if its undefined then we don't care to do anything
@@ -3059,7 +2916,7 @@ angular.module('ionic.ui.loading', [])
     link: function($scope, $element){
       $element.addClass($scope.animation || '');
     },
-    template: '<div class="loading-backdrop" ng-class="{enabled: showBackdrop}">' +
+    template: '<div class="loading-backdrop" ng-class="{\'show-backdrop\': showBackdrop}">' +
                 '<div class="loading" ng-transclude>' +
                 '</div>' +
               '</div>'
@@ -3090,146 +2947,582 @@ angular.module('ionic.ui.modal', [])
 
 })();
 
-(function() {
-angular.module('ionic.ui.navAnimation', [])
+
+angular.module('ionic.ui.navBar', ['ionic.service.view', 'ngSanitize'])
+
 /**
- * @ngdoc directive
- * @name ionNavAnimation
+ * @ngdoc service
+ * @name $ionicNavBarDelegate
  * @module ionic
- * @restrict A
- * @parent ionic.directive:ionNavView
- *
  * @description
- * When used under an {@link ionic.directive:ionNavView} and on an `<a>` element,
- * allows you to set the animation all clicks on that link within the navView use.
+ * Delegate for controlling the {@link ionic.directive:ionNavBar} directive.
  *
  * @usage
+ *
  * ```html
- * <ion-nav-view>
- *   <ion-view>
- *     <ion-content>
- *       <a href="#/some-page" ion-nav-animation="slide-in-up">
- *         Click me and #/some-page will transition in with the slide-in-up animation!
- *       </a>
- *     </ion-content>
- *   </ion-view>
- * </ion-nav-view>
+ * <body ng-controller="MyCtrl">
+ *   <ion-nav-bar>
+ *     <button ng-click="setNavTitle('banana')">
+ *       Set title to banana!
+ *     </button>
+ *   </ion-nav-bar>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.setNavTitle = function(title) {
+ *     $ionicNavBarDelegate.setTitle(title);
+ *   }
+ * }
  * ```
- *
- * @param {string} ion-nav-animation The animation to make the parent ionNavView change pages with when clicking this element.
  */
-.directive('ionNavAnimation', function() {
-  return {
-    restrict: 'A',
-    require: '^?ionNavView',
-    link: function($scope, $element, $attrs, navViewCtrl) {
-      if (!navViewCtrl) {
-        return;
-      }
-      ionic.on('tap', function() {
-        navViewCtrl.setNextAnimation($attrs.ionNavAnimation);
-      }, $element[0]);
-    }
+.service('$ionicNavBarDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#back
+   * @description Goes back in the view history.
+   * @param {DOMEvent=} event The event object (eg from a tap event)
+   */
+  'back',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#align
+   * @description Aligns the title with the buttons in a given direction.
+   * @param {string=} direction The direction to the align the title text towards.
+   * Available: 'left', 'right', 'center'. Default: 'center'.
+   */
+  'align',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBackButton
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBackButton} should be shown
+   * (if it exists).
+   * @param {boolean} show Whether to show the back button.
+   */
+  'showBackButton',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBar
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBar} should be shown.
+   * @param {boolean} show Whether to show the bar.
+   */
+  'showBar',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#setTitle
+   * @description
+   * Set the title for the {@link ionic.directive:ionNavBar}.
+   * @param {string} title The new title to show.
+   */
+  'setTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#changeTitle
+   * @description
+   * Change the title, transitioning the new title in and the old one out in a given direction.
+   * @param {string} title The new title to show.
+   * @param {string} direction The direction to transition the new title in.
+   * Available: 'forward', 'back'.
+   */
+  'changeTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getTitle
+   * @returns {string} The current title of the navbar.
+   */
+  'getTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getPreviousTitle
+   * @returns {string} The previous title of the navbar.
+   */
+  'getPreviousTitle'
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * navBars with delegate-handle matching the given handle.
+   *
+   * Example: `$ionicNavBarDelegate.$getByHandle('myHandle').setTitle('newTitle')`
+   */
+]))
+
+.controller('$ionicNavBar', [
+  '$scope',
+  '$element',
+  '$attrs',
+  '$ionicViewService',
+  '$animate',
+  '$compile',
+  '$ionicNavBarDelegate',
+function($scope, $element, $attrs, $ionicViewService, $animate, $compile, $ionicNavBarDelegate) {
+  //Let the parent know about our controller too so that children of
+  //sibling content elements can know about us
+  $element.parent().data('$ionNavBarController', this);
+
+  var deregisterInstance = $ionicNavBarDelegate._registerInstance(this, $attrs.delegateHandle);
+
+  $scope.$on('$destroy', deregisterInstance);
+
+  var self = this;
+
+  this.leftButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.left-buttons')
+  );
+  this.rightButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.right-buttons')
+  );
+
+  this.back = function(e) {
+    var backView = $ionicViewService.getBackView();
+    backView && backView.go();
+    e && (e.alreadyHandled = true);
+    return false;
   };
-});
-})();
 
+  this.align = function(direction) {
+    this._headerBarView.align(direction);
+  };
 
-(function() {
-'use strict';
+  this.showBackButton = function(show) {
+    $scope.backButtonShown = !!show;
+  };
 
-angular.module('ionic.ui.popup', [])
+  this.showBar = function(show) {
+    $scope.isInvisible = !show;
+  };
 
-/**
- * @private
- */
-.directive('ionPopupBackdrop', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    template: '<div class="popup-backdrop"></div>'
-  }
-})
+  this.setTitle = function(title) {
+    $scope.oldTitle = $scope.title;
+    $scope.title = title || '';
+  };
 
-/**
- * @private
- */
-.directive('ionPopup', ['$ionicBind', function($ionicBind) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    scope: true,
-    link: function($scope, $element, $attr) {
-      $ionicBind($scope, $attr, {
-        title: '@',
-        buttons: '=',
-        $onButtonTap: '&onButtonTap',
-        $onClose: '&onClose'
-      });
+  this.changeTitle = function(title, direction) {
+    if ($scope.title === title) {
+      return false;
+    }
+    this.setTitle(title);
+    $scope.isReverse = direction == 'back';
+    $scope.shouldAnimate = !!direction;
 
-      $scope._buttonTapped = function(button, event) {
-        var result = button.onTap && button.onTap(event);
+    if (!$scope.shouldAnimate) {
+      //We're done!
+      this._headerBarView.align();
+    } else {
+      this._animateTitles();
+    }
+    return true;
+  };
 
-        // A way to return false
-        if(event.defaultPrevented) {
-          return $scope.$onClose({button: button, result: false, event: event });
-        }
+  this.getTitle = function() {
+    return $scope.title || '';
+  };
 
-        // Truthy test to see if we should close the window
-        if(result) {
-          return $scope.$onClose({button: button, result: result, event: event });
-        }
-        $scope.$onButtonTap({button: button, event: event});
-      }
-    },
-    template:   '<div class="popup">' +
-                  '<div class="popup-head">' +
-                    '<h3 class="popup-title" ng-bind-html="title"></h3>' +
-                    '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
-                  '</div>' +
-                  '<div class="popup-body" ng-transclude>' +
-                  '</div>' +
-                  '<div class="popup-buttons row">' +
-                    '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
-                  '</div>' +
-                '</div>'
+  this.getPreviousTitle = function() {
+    return $scope.oldTitle || '';
   };
-}]);
 
-})();
+  /**
+   * Exposed for testing
+   */
+  this._animateTitles = function() {
+    var oldTitleEl, newTitleEl, currentTitles;
+
+    //If we have any title right now
+    //(or more than one, they could be transitioning on switch),
+    //replace the first one with an oldTitle element
+    currentTitles = $element[0].querySelectorAll('.title');
+    if (currentTitles.length) {
+      oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
+      angular.element(currentTitles[0]).replaceWith(oldTitleEl);
+    }
+    //Compile new title
+    newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
 
-(function(ionic) {
-'use strict';
+    //Animate in on next frame
+    ionic.requestAnimationFrame(function() {
 
-angular.module('ionic.ui.radio', [])
+      oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+
+      var insert = oldTitleEl && angular.element(oldTitleEl) || null;
+      $animate.enter(newTitleEl, $element, insert, function() {
+        self._headerBarView.align();
+      });
+
+      //Cleanup any old titles leftover (besides the one we already did replaceWith on)
+      angular.forEach(currentTitles, function(el) {
+        if (el && el.parentNode) {
+          //Use .remove() to cleanup things like .data()
+          angular.element(el).remove();
+        }
+      });
+
+      //$apply so bindings fire
+      $scope.$digest();
+
+      //Stop flicker of new title on ios7
+      ionic.requestAnimationFrame(function() {
+        newTitleEl[0].classList.remove('invisible');
+      });
+    });
+  };
+}])
 
 /**
  * @ngdoc directive
- * @name ionRadio
+ * @name ionNavBar
  * @module ionic
+ * @delegate ionic.service:$ionicNavBarDelegate
  * @restrict E
+ *
  * @description
- * No different than the HTML radio input, except it's styled differently.
+ * If we have an {@link ionic.directive:ionNavView} directive, we can also create an
+ * `<ion-nav-bar>`, which will create a topbar that updates as the application state changes.
  *
- * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ * We can add a back button by putting an {@link ionic.directive:ionNavBackButton} inside.
+ *
+ * We can add buttons depending on the currently visible view using
+ * {@link ionic.directive:ionNavButtons}.
+ *
+ * Assign an [animation class](/docs/components#animations) to the element to
+ * enable animated changing of titles (recommended: 'slide-left-right' or 'nav-title-slide-ios7')
  *
  * @usage
+ *
  * ```html
- * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
- * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
- * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * <body ng-app="starter">
+ *   <!-- The nav bar that will be updated as we navigate -->
+ *   <ion-nav-bar class="bar-positive nav-title-slide-ios7">
+ *   </ion-nav-bar>
+ *
+ *   <!-- where the initial view template will be rendered -->
+ *   <ion-nav-view></ion-nav-view>
+ * </body>
  * ```
+ *
+ * @param {string=} delegate-handle The handle used to identify this navBar
+ * with {@link ionic.service:$ionicNavBarDelegate}.
+ * @param align-title {string=} Where to align the title of the navbar.
+ * Available: 'left', 'right', 'center'. Defaults to 'center'.
  */
-.directive('ionRadio', function() {
+.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
+function($ionicViewService, $rootScope, $animate, $compile) {
+
   return {
     restrict: 'E',
-    replace: true,
-    require: '?ngModel',
-    scope: {
-      ngModel: '=?',
-      ngValue: '=?',
-      ngChange: '&',
+    controller: '$ionicNavBar',
+    scope: true,
+    compile: function(tElement, tAttrs) {
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      tElement
+        .addClass('bar bar-header nav-bar')
+        .append(
+          '<div class="buttons left-buttons"> ' +
+          '</div>' +
+          '<h1 ng-bind-html="title" class="title"></h1>' +
+          '<div class="buttons right-buttons"> ' +
+          '</div>'
+        );
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, navBarCtrl) {
+        navBarCtrl._headerBarView = new ionic.views.HeaderBar({
+          el: $element[0],
+          alignTitle: $attr.alignTitle || 'center'
+        });
+
+        //defaults
+        $scope.backButtonShown = false;
+        $scope.shouldAnimate = true;
+        $scope.isReverse = false;
+        $scope.isInvisible = true;
+        $scope.$parent.$hasHeader = true;
+
+        $scope.$on('$destroy', function() {
+          $scope.$parent.$hasHeader = false;
+        });
+
+        $scope.$watch(function() {
+          return ($scope.isReverse ? ' reverse' : '') +
+            ($scope.isInvisible ? ' invisible' : '') +
+            (!$scope.shouldAnimate ? ' no-animation' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
+
+      }
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavBackButton
+ * @module ionic
+ * @restrict E
+ * @parent ionNavBar
+ * @description
+ * Creates a back button inside an {@link ionic.directive:ionNavBar}.
+ *
+ * Will show up when the user is able to go back in the current navigation stack.
+ *
+ * By default, will go back when clicked.  If you wish for more advanced behavior, see the
+ * examples below.
+ *
+ * @usage
+ *
+ * With default click action:
+ *
+ * ```html
+ * <ion-nav-bar>
+ *   <ion-nav-back-button class="button-icon">
+ *     <i class="ion-arrow-left-c"></i> Back!
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ *
+ * With custom click action, using {@link ionic.service:$ionicNavBarDelegate}:
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button-icon"
+ *     ng-click="canGoBack && goBack()">
+ *     <i class="ion-arrow-left-c"></i> Back
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.goBack = function() {
+ *     $ionicNavBarDelegate.back();
+ *   };
+ * }
+ * ```
+ *
+ * Displaying the previous title on the back button, again using
+ * {@link ionic.service:$ionicNavBarDelegate}.
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button button-icon ion-arrow-left-c">
+ *     {% raw %}{{getPreviousTitle() || 'Back'}}{% endraw %}
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.getPreviousTitle = function() {
+ *     return $ionicNavBarDelegate.getPreviousTitle();
+ *   };
+ * }
+ * ```
+ */
+.directive('ionNavBackButton', ['$ionicNgClick', function($ionicNgClick) {
+  return {
+    restrict: 'E',
+    require: '^ionNavBar',
+    compile: function(tElement, tAttrs) {
+      tElement.addClass('button back-button');
+      return function($scope, $element, $attr, navBarCtrl) {
+        if (!$attr.ngClick) {
+          $scope.$navBack = navBarCtrl.back;
+          $ionicNgClick($scope, $element, '$navBack($event)');
+        }
+
+        //If the current viewstate does not allow a back button,
+        //always hide it.
+        var deregisterListener = $scope.$parent.$on(
+          '$viewHistory.historyChange',
+          function(e, data) {
+            $scope.hasBackButton = !!data.showBack;
+          }
+        );
+        $scope.$on('$destroy', deregisterListener);
+
+        //Make sure both that a backButton is allowed in the first place,
+        //and that it is shown by the current view.
+        $scope.$watch('!!(backButtonShown && hasBackButton)', function(show) {
+          $element.toggleClass('hide', !show);
+        });
+      };
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavButtons
+ * @module ionic
+ * @restrict E
+ * @parent ionNavView
+ *
+ * @description
+ * Use ionNavButtons to set the buttons on your {@link ionic.directive:ionNavBar}
+ * from within an {@link ionic.directive:ionView}.
+ *
+ * Any buttons you declare will be placed onto the navbar's corresponding side,
+ * and then destroyed when the user leaves their parent view.
+ *
+ * @usage
+ * ```html
+ * <ion-nav-bar>
+ * </ion-nav-bar>
+ * <ion-nav-view>
+ *   <ion-view>
+ *     <ion-nav-buttons side="left">
+ *       <button class="button" ng-click="doSomething()">
+ *         I'm a button on the left of the navbar!
+ *       </button>
+ *     </ion-nav-buttons>
+ *     <ion-content>
+ *       Some super content here!
+ *     </ion-content>
+ *   </ion-view>
+ * </ion-nav-view>
+ * ```
+ *
+ * @param {string} side The side to place the buttons on in the parent
+ * {@link ionic.directive:ionNavBar}. Available: 'left' or 'right'.
+ */
+.directive('ionNavButtons', ['$compile', '$animate', function($compile, $animate) {
+  return {
+    require: '^ionNavBar',
+    restrict: 'E',
+    compile: function($element, $attrs) {
+      var content = $element.contents().remove();
+      return function($scope, $element, $attrs, navBarCtrl) {
+        var navElement = $attrs.side === 'right' ?
+          navBarCtrl.rightButtonsElement :
+          navBarCtrl.leftButtonsElement;
+
+        //Put all of our inside buttons into their own div,
+        //so we can remove them all when this element dies -
+        //even if the buttons have changed through an ng-repeat or the like,
+        //we just remove their div parent and they are gone.
+        var buttons = angular.element('<div>').append(content);
+
+        //Compile buttons inside content so they have access to everything
+        //something inside content does (eg parent ionicScroll)
+        $element.append(buttons);
+        $compile(buttons)($scope);
+
+        //Append buttons to navbar
+        $animate.enter(buttons, navElement);
+
+        //When our ion-nav-buttons container is destroyed,
+        //destroy everything in the navbar
+        $scope.$on('$destroy', function() {
+          $animate.leave(buttons);
+        });
+
+        // The original element is just a completely empty <ion-nav-buttons> element.
+        // make it invisible just to be sure it doesn't change any layout
+        $element.css('display', 'none');
+      };
+    }
+  };
+}]);
+
+(function() {
+'use strict';
+
+angular.module('ionic.ui.popup', [])
+
+/**
+ * @private
+ */
+.directive('ionPopupBackdrop', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    template: '<div class="popup-backdrop"></div>'
+  }
+})
+
+/**
+ * @private
+ */
+.directive('ionPopup', ['$ionicBind', function($ionicBind) {
+  return {
+    restrict: 'E',
+    replace: true,
+    transclude: true,
+    scope: true,
+    template:
+      '<div class="popup">' +
+        '<div class="popup-head">' +
+          '<h3 class="popup-title" ng-bind-html="title"></h3>' +
+          '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
+        '</div>' +
+        '<div class="popup-body" ng-transclude>' +
+        '</div>' +
+        '<div class="popup-buttons row">' +
+          '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
+        '</div>' +
+      '</div>',
+    link: function($scope, $element, $attr) {
+      $ionicBind($scope, $attr, {
+        title: '@',
+        buttons: '=',
+        $onButtonTap: '&onButtonTap',
+        $onClose: '&onClose'
+      });
+
+      $scope._buttonTapped = function(button, event) {
+        var result = button.onTap && button.onTap(event);
+
+        // A way to return false
+        if(event.defaultPrevented) {
+          return $scope.$onClose({button: button, result: false, event: event });
+        }
+
+        // Truthy test to see if we should close the window
+        if(result) {
+          return $scope.$onClose({button: button, result: result, event: event });
+        }
+        $scope.$onButtonTap({button: button, event: event});
+      }
+    }
+  };
+}]);
+
+})();
+
+(function(ionic) {
+'use strict';
+
+angular.module('ionic.ui.radio', [])
+
+/**
+ * @ngdoc directive
+ * @name ionRadio
+ * @module ionic
+ * @restrict E
+ * @description
+ * No different than the HTML radio input, except it's styled differently.
+ *
+ * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ *
+ * @usage
+ * ```html
+ * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
+ * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
+ * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * ```
+ */
+.directive('ionRadio', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    require: '?ngModel',
+    scope: {
+      ngModel: '=?',
+      ngValue: '=?',
+      ngChange: '&',
       icon: '@'
     },
     transclude: true,
@@ -3338,11 +3631,14 @@ angular.module('ionic.ui.scroll', [])
  * @ngdoc directive
  * @name ionScroll
  * @module ionic
+ * @delegate ionic.service:$ionicScrollDelegate
  * @restrict E
  *
  * @description
  * Creates a scrollable container for all content inside.
  *
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
  * @param {string=} direction Which way to scroll. 'x' or 'y'. Default 'y'.
  * @param {boolean=} paging Whether to scroll with paging.
  * @param {expression=} on-refresh Called on pull-to-refresh, triggered by an {@link ionic.directive:ionRefresher}.
@@ -3350,41 +3646,43 @@ angular.module('ionic.ui.scroll', [])
  * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default false.
  * @param {boolean=} scrollbar-x Whether to show the vertical scrollbar. Default true.
  */
-.directive('ionScroll', ['$parse', '$timeout', '$controller', function($parse, $timeout, $controller) {
+.directive('ionScroll', [
+  '$timeout',
+  '$controller',
+  '$ionicBind',
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    template: '<div class="scroll-view"><div class="scroll" ng-transclude></div></div>',
-    transclude: true,
-    scope: {
-      direction: '@',
-      paging: '@',
-      onRefresh: '&',
-      onScroll: '&',
-      scroll: '@',
-      scrollbarX: '@',
-      scrollbarY: '@',
-    },
-
+    scope: true,
     controller: function() {},
+    compile: function(element, attr) {
+      element.addClass('scroll-view');
 
-    compile: function(element, attr, transclude) {
-
-      return {
-        //Prelink <ion-scroll> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr) {
-        var scrollView, scrollCtrl,
-          sc = $element[0].children[0];
+        var scrollView, scrollCtrl;
 
-        if(attr.padding == "true") {
-          sc.classList.add('padding');
+        $ionicBind($scope, $attr, {
+          direction: '@',
+          paging: '@',
+          $onScroll: '&onScroll',
+          scroll: '@',
+          scrollbarX: '@',
+          scrollbarY: '@',
+        });
+
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
         }
         if($scope.$eval($scope.paging) === true) {
-          sc.classList.add('scroll-paging');
+          innerElement.addClass('scroll-paging');
         }
 
         if(!$scope.direction) { $scope.direction = 'y'; }
@@ -3392,6 +3690,7 @@ angular.module('ionic.ui.scroll', [])
 
         var scrollViewOptions= {
           el: $element[0],
+          delegateHandle: $attr.delegateHandle,
           paging: isPaging,
           scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
           scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
@@ -3438,33 +3737,97 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 }])
 
 /**
- * @ngdoc controller
- * @name ionicSideMenus
+ * @ngdoc service
+ * @name $ionicSideMenuDelegate
  * @module ionic
- * @group side menu
  *
  * @description
- * Controller for the {@link ionic.directive:ionSideMenus} directive.
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleLeft
- * @description Toggle the left side menu (if it exists).
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleRight
- * @description Toggle the right side menu (if it exists).
+ * Delegate for controlling the {@link ionic.directive:ionSideMenus} directive.
+ *
+ * Methods called directly on the $ionicSideMenuDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSideMenuDelegate#$getByHandle $getByHandle}
+ * method to control specific ionSideMenus instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-side-menus>
+ *     <ion-pane ion-side-menu-content>
+ *       Content!
+ *       <button ng-click="toggleLeftSideMenu()">
+ *         Toggle Left Side Menu
+ *       </button>
+ *     </ion-pane>
+ *     <ion-side-menu side="left">
+ *       Left Menu!
+ *     <ion-side-menu>
+ *   </ion-side-menus>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicSideMenuDelegate) {
+ *   $scope.toggleLeftSideMenu = function() {
+ *     $ionicSideMenuDelegate.toggleLeft();
+ *   };
+ * }
+ * ```
  */
+.service('$ionicSideMenuDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleLeft
+   * @description Toggle the left side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleRight
+   * @description Toggle the right side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenLeft
+   * @returns {boolean} Whether the left menu is currently opened.
+   */
+  'isOpenLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenRight
+   * @returns {boolean} Whether the right menu is currently opened.
+   */
+  'isOpenRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#canDragContent
+   * @param {boolean=} canDrag Set whether the content can or cannot be dragged to open
+   * side menus.
+   * @returns {boolean} Whether the content can be dragged to open side menus.
+   */
+  'canDragContent',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSideMenus} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSideMenuDelegate.$getByHandle('my-handle').toggleLeft();`
+   */
+]))
 
 /**
  * @ngdoc directive
  * @name ionSideMenus
  * @module ionic
+ * @delegate ionic.service:$ionicSideMenuDelegate
  * @restrict E
- * @group side menu
- * @groupMainItem
- * @controller ionicSideMenus
  *
  * @description
  * A container element for side menu(s) and the main content. Allows the left
@@ -3479,14 +3842,14 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  *
  * @usage
  * To use side menus, add an `<ion-side-menus>` parent element,
- * an `<ion-pane ion-side-menu-content>` for the center content,
+ * an `<ion-side-menu-content>` for the center content,
  * and one or more `<ion-side-menu>` directives.
  *
  * ```html
  * <ion-side-menus>
  *   <!-- Center content -->
- *   <ion-pane ion-side-menu-content ng-controller="ContentController">
- *   </ion-pane>
+ *   <ion-side-menu-content ng-controller="ContentController">
+ *   </io-side-menu-content>
  *
  *   <!-- Left menu -->
  *   <ion-side-menu side="left">
@@ -3498,20 +3861,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * </ion-side-menus>
  * ```
  * ```js
- * function ContentController($scope) {
+ * function ContentController($scope, $ionicSideMenuDelegate) {
  *   $scope.toggleLeft = function() {
- *     $scope.sideMenuController.toggleLeft();
+ *     $ionicSideMenuDelegate.toggleLeft();
  *   };
  * }
  * ```
  *
- * @param {expression=} model The model to assign this side menu container's {@link ionic.controller:ionicSideMenus} controller to. By default, assigns  to $scope.sideMenuController.
+ * @param {string=} delegate-handle The handle used to identify this side menu
+ * with {@link ionic.service:$ionicSideMenuDelegate}.
  *
  */
 .directive('ionSideMenus', function() {
   return {
     restrict: 'ECA',
-    controller: ['$scope', '$attrs', '$parse', function($scope, $attrs, $parse) {
+    controller: ['$scope', '$attrs', '$ionicSideMenuDelegate', function($scope, $attrs, $ionicSideMenuDelegate) {
       var _this = this;
 
       angular.extend(this, ionic.controllers.SideMenuController.prototype);
@@ -3521,9 +3885,20 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         right: { width: 275 }
       });
 
+      this.canDragContent = function(canDrag) {
+        if (arguments.length) {
+          $scope.dragContent = !!canDrag;
+        }
+        return $scope.dragContent;
+      };
+
       $scope.sideMenuContentTranslateX = 0;
 
-      $parse($attrs.model || 'sideMenuController').assign($scope, this);
+      var deregisterInstance = $ionicSideMenuDelegate._registerInstance(
+        this, $attrs.delegateHandle
+      );
+
+      $scope.$on('$destroy', deregisterInstance);
     }],
     replace: true,
     transclude: true,
@@ -3535,21 +3910,18 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @ngdoc directive
  * @name ionSideMenuContent
  * @module ionic
- * @restrict A
- * @group side menu
+ * @restrict E
  * @parent ionic.directive:ionSideMenus
  *
  * @description
  * A container for the main visible content, sibling to one or more
  * {@link ionic.directive:ionSideMenu} directives.
  *
- * An attribute directive, recommended to be used as part of an `<ion-pane>` element.
- *
  * @usage
  * ```html
- * <div ion-side-menu-content
- *   drag-content="canDragContent()">
- * </div>
+ * <ion-side-menu-content
+ *   drag-content="canDrag">
+ * </ion-side-menu-content>
  * ```
  * For a complete side menu example, see the
  * {@link ionic.directive:ionSideMenus} documentation.
@@ -3559,20 +3931,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  */
 .directive('ionSideMenuContent', ['$timeout', '$ionicGesture', function($timeout, $ionicGesture) {
   return {
-    restrict: 'AC',
+    restrict: 'EA', //DEPRECATED 'A'
     require: '^ionSideMenus',
     scope: true,
-    compile: function(element, attr, transclude) {
-      return function($scope, $element, $attr, sideMenuCtrl) {
+    compile: function(element, attr) {
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, sideMenuCtrl) {
 
-        $element.addClass('menu-content');
+        $element.addClass('menu-content pane');
 
         if (angular.isDefined(attr.dragContent)) {
           $scope.$watch(attr.dragContent, function(value) {
-            $scope.dragContent = value;
+            sideMenuCtrl.canDragContent(value);
           });
         } else {
-          $scope.dragContent = true;
+          sideMenuCtrl.canDragContent(true);
         }
 
         var defaultPrevented = false;
@@ -3653,7 +4026,7 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
           $ionicGesture.off(releaseGesture, 'release', dragReleaseFn);
           ionic.off('tap', contentTap, $element[0]);
         });
-      };
+      }
     }
   };
 }])
@@ -3663,7 +4036,6 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @name ionSideMenu
  * @module ionic
  * @restrict E
- * @group side menu
  * @parent ionic.directive:ionSideMenus
  *
  * @description
@@ -3688,14 +4060,13 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
   return {
     restrict: 'E',
     require: '^ionSideMenus',
-    replace: true,
-    transclude: true,
     scope: true,
-    template: '<div class="menu menu-{{side}}"></div>',
-    compile: function(element, attr, transclude) {
+    compile: function(element, attr) {
       angular.isUndefined(attr.isEnabled) && attr.$set('isEnabled', 'true');
       angular.isUndefined(attr.width) && attr.$set('width', '275');
 
+      element.addClass('menu menu-' + attr.side);
+
       return function($scope, $element, $attr, sideMenuCtrl) {
         $scope.side = $attr.side || 'left';
 
@@ -3714,14 +4085,79 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         $scope.$watch($attr.isEnabled, function(val) {
           sideMenu.setIsEnabled(!!val);
         });
-
-        transclude($scope, function(clone) {
-          $element.append(clone);
-        });
       };
     }
   };
-});
+})
+
+/**
+ * @ngdoc directive
+ * @name menuToggle
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Toggle a side menu on the given side
+ *
+ * @usage
+ * Below is an example of a link within a nav bar. Tapping this link would
+ * automatically open the given side menu
+ *
+ * ```html
+ * <ion-view>
+ *   <ion-nav-buttons side="left">
+ *    <button menu-toggle="left" class="button button-icon icon ion-navicon"></button>
+ *   </ion-nav-buttons>
+ *  ...
+ * </ion-view>
+ * ```
+ */
+.directive('menuToggle', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      var side = $scope.$eval($attr.menuToggle) || 'left';
+      $element.bind('click', function(){
+        if(side === 'left') {
+          sideMenuCtrl.toggleLeft();
+        } else if(side === 'right') {
+          sideMenuCtrl.toggleRight();
+        }
+      });
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name menuClose
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Closes a side menu which is currently opened.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would
+ * automatically close the currently opened menu
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('menuClose', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      $element.bind('click', function(){
+        sideMenuCtrl.close();
+      });
+    }
+  };
+}]);
+
 })();
 
 (function() {
@@ -3730,6 +4166,102 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 angular.module('ionic.ui.slideBox', [])
 
 /**
+ * @ngdoc service
+ * @name $ionicSlideBoxDelegate
+ * @module ionic
+ * @description
+ * Delegate that controls the {@link ionic.directive:ionSlideBox} directive.
+ *
+ * Methods called directly on the $ionicSlideBoxDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSlideBoxDelegate#$getByHandle $getByHandle}
+ * method to control specific slide box instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-slide-box>
+ *     <ion-slide>
+ *       <div class="box blue">
+ *         <button ng-click="nextSlide()">Next slide!</button>
+ *       </div>
+ *     </ion-slide>
+ *     <ion-slide>
+ *       <div class="box red">
+ *         Slide 2!
+ *       </div>
+ *     </ion-slide>
+ *   </ion-slide-box>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicSlideBoxDelegate) {
+ *   $scope.nextSlide = function() {
+ *     $ionicSlideBoxDelegate.next();
+ *   }
+ * }
+ * ```
+ */
+.service('$ionicSlideBoxDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#update
+   * @description
+   * Update the slidebox (for example if using Angular with ng-repeat,
+   * resize it for the elements inside).
+   */
+  'update',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slide
+   * @param {number} to The index to slide to.
+   * @param {number=} speed The number of milliseconds for the change to take.
+   */
+  'slide',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#previous
+   * @description Go to the previous slide. Wraps around if at the beginning.
+   */
+  'previous',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#next
+   * @description Go to the next slide. Wraps around if at the end.
+   */
+  'next',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#stop
+   * @description Stop sliding. The slideBox will not move again until
+   * explicitly told to do so.
+   */
+  'stop',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#currentIndex
+   * @returns number The index of the current slide.
+   */
+  'currentIndex',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slidesCount
+   * @returns number The number of slides there are currently.
+   */
+  'slidesCount'
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSlideBox} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSlideBoxDelegate.$getByHandle('my-handle').stop();`
+   */
+]))
+
+/**
  * The internal controller for the slide box controller.
  */
 
@@ -3737,8 +4269,8 @@ angular.module('ionic.ui.slideBox', [])
  * @ngdoc directive
  * @name ionSlideBox
  * @module ionic
+ * @delegate ionic.service:$ionicSlideBoxDelegate
  * @restrict E
- * @controller ionicSlideBox
  * @description
  * The Slide Box is a multi-page container where each page can be swiped or dragged between:
  *
@@ -3759,7 +4291,8 @@ angular.module('ionic.ui.slideBox', [])
  * </ion-slide-box>
  * ```
  *
- * @param {expression=} model The model to assign this slide box container's {@link ionic.controller:ionicSlideBox} controller to. By default, assigns to $scope.slideBoxController.
+ * @param {string=} delegate-handle The handle used to identify this slideBox
+ * with {@link ionic.service:$ionicSlideBoxDelegate}.
  * @param {boolean=} does-continue Whether the slide box should automatically slide.
  * @param {number=} slide-interval How many milliseconds to wait to change slides (if does-continue is true). Defaults to 4000.
  * @param {boolean=} show-pager Whether a pager should be shown for this slide box.
@@ -3767,7 +4300,11 @@ angular.module('ionic.ui.slideBox', [])
  * @param {expression=} on-slide-changed Expression called whenever the slide is changed.
  * @param {expression=} active-slide Model to bind the current slide to.
  */
-.directive('ionSlideBox', ['$timeout', '$compile', '$ionicSlideBoxDelegate', function($timeout, $compile, $ionicSlideBoxDelegate) {
+.directive('ionSlideBox', [
+  '$timeout',
+  '$compile',
+  '$ionicSlideBoxDelegate',
+function($timeout, $compile, $ionicSlideBoxDelegate) {
   return {
     restrict: 'E',
     replace: true,
@@ -3780,7 +4317,7 @@ angular.module('ionic.ui.slideBox', [])
       onSlideChanged: '&',
       activeSlide: '=?'
     },
-    controller: ['$scope', '$element', '$attrs', '$parse', function($scope, $element, $attrs, $parse) {
+    controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
       var _this = this;
 
       var continuous = $scope.$eval($scope.doesContinue) === true;
@@ -3826,9 +4363,12 @@ angular.module('ionic.ui.slideBox', [])
         slider.slide(index);
       });
 
-      $parse($attrs.model || 'slideBoxController').assign($scope.$parent, slider);
+      //Exposed for testing
+      this.__slider = slider;
 
-      $ionicSlideBoxDelegate.register($scope, $element);
+      var deregisterInstance = $ionicSlideBoxDelegate._registerInstance(slider, $attrs.delegateHandle);
+
+      $scope.$on('$destroy', deregisterInstance);
 
       this.slidesCount = function() {
         return slider.slidesCount();
@@ -3908,32 +4448,80 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
 }])
 
 /**
- * @ngdoc controller
- * @group tab bar
- * @name ionicTabs
+ * @ngdoc service
+ * @name $ionicTabsDelegate
  * @module ionic
  *
  * @description
- * Controller for the {@link ionic.directive:ionTabs} directive.
+ * Delegate for controlling the {@link ionic.directive:ionTabs} directive.
+ *
+ * Methods called directly on the $ionicTabsDelegate service will control all ionTabs
+ * directives. Use the {@link ionic.service:$ionicTabsDelegate#$getByHandle $getByHandle}
+ * method to control specific ionTabs instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-tabs>
+ *
+ *     <ion-tab title="Tab 1">
+ *       Hello tab 1!
+ *       <button ng-click="selectTabWithIndex(1)">Select tab 2!</button>
+ *     </ion-tab>
+ *     <ion-tab title="Tab 2">Hello tab 2!</ion-tab>
+ *
+ *   </ion-tabs>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicTabsDelegate) {
+ *   $scope.selectTabWithIndex = function(index) {
+ *     $ionicTabsDelegate.select(index);
+ *   }
+ * }
+ * ```
  */
-.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
-  var _selectedTab = null;
-  var self = this;
-  self.tabs = [];
-
+.service('$ionicTabsDelegate', delegateService([
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTabIndex
+   * @name $ionicTabsDelegate#select
+   * @description Select the tab matching the given index.
+   *
+   * @param {number} index Index of the tab to select.
+   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's
+   * view history (if it exists) and use it, or just load the default page.
+   * Default false.
+   * Hint: you probably want this to be true if you have an
+   * {@link ionic.directive:ionNavView} inside your tab.
+   */
+  'select',
+  /**
+   * @ngdoc method
+   * @name $ionicTabsDelegate#selectedIndex
    * @returns `number` The index of the selected tab, or -1.
    */
-  self.selectedTabIndex = function() {
-    return self.tabs.indexOf(_selectedTab);
-  };
+  'selectedIndex'
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTab
-   * @returns `ionTab` The selected tab or null if none selected.
+   * @name $ionicTabsDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionTabs} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicTabsDelegate.$getByHandle('my-handle').select(0);`
    */
+]))
+
+.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
+  var _selectedTab = null;
+  var self = this;
+  self.tabs = [];
+
+  self.selectedIndex = function() {
+    return self.tabs.indexOf(_selectedTab);
+  };
   self.selectedTab = function() {
     return _selectedTab;
   };
@@ -3974,17 +4562,6 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
     }
   };
 
-  /**
-   * @ngdoc method
-   * @name ionicTabs#select
-   * @description Select the given tab or tab index.
-   *
-   * @param {ionTab|number} tabOrIndex A tab object or index of a tab to select
-   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's view history
-   * (if it exists) and use it, or just loading the default page. Default false.
-   * Hint: you probably want this to be true if you have an
-   * {@link ionic.directive:ionNavView} inside your tab.
-   */
   self.select = function(tab, shouldEmitEvent) {
     var tabIndex;
     if (angular.isNumber(tab)) {
@@ -4033,20 +4610,24 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  * @ngdoc directive
  * @name ionTabs
  * @module ionic
+ * @delegate ionic.service:$ionicTabsDelegate
  * @restrict E
- * @group tab bar
- * @groupMainItem
- * @controller ionicTabs
  * @codepen KbrzJ
  *
  * @description
- * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed through.
+ * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed
+ * through.
  *
- * See the {@link ionic.directive:ionTab} directive's documentation for more details.
+ * Assign any [tabs class](/docs/components#tabs) or
+ * [animation class](/docs/components#animation) to the element to define
+ * its look and feel.
+ *
+ * See the {@link ionic.directive:ionTab} directive's documentation for more details on
+ * individual tabs.
  *
  * @usage
  * ```html
- * <ion-tabs tabs-type="tabs-icon-only">
+ * <ion-tabs class="tabs-positive tabs-icon-only">
  *
  *   <ion-tab title="Home" icon-on="ion-ios7-filing" icon-off="ion-ios7-filing-outline">
  *     <!-- Tab 1 content -->
@@ -4059,48 +4640,49 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  *   <ion-tab title="Settings" icon-on="ion-ios7-gear" icon-off="ion-ios7-gear-outline">
  *     <!-- Tab 3 content -->
  *   </ion-tab>
+ *
  * </ion-tabs>
  * ```
  *
- * @param {expression=} model The model to assign this tab bar's {@link ionic.controller:ionicTabs} controller to. By default, assigns  to $scope.tabsController.
- * @param {string=} animation The animation to use when changing between tab pages.
- * @param {string=} tabs-style The class to apply to the tabs. Defaults to 'tabs-positive'.
- * @param {string=} tabs-type Whether to put the tabs on the top or bottom. Defaults to 'tabs-bottom'.
+ * @param {string=} delegate-handle The handle used to identify these tabs
+ * with {@link ionic.service:$ionicTabsDelegate}.
  */
 
-.directive('ionTabs', ['$ionicViewService', '$ionicBind', '$parse', function($ionicViewService, $ionicBind, $parse) {
+.directive('ionTabs', ['$ionicViewService', '$ionicTabsDelegate', function($ionicViewService, $ionicTabsDelegate) {
   return {
     restrict: 'E',
-    replace: true,
     scope: true,
-    transclude: true,
     controller: 'ionicTabs',
-    template:
-    '<div class="view {{$animation}}">' +
-      '<div class="tabs {{$tabsStyle}} {{$tabsType}}">' +
-      '</div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(angular.isUndefined(attr.tabsType)) attr.$set('tabsType', 'tabs-positive');
-
-      return function link($scope, $element, $attr, tabsCtrl) {
-
-        $ionicBind($scope, $attr, {
-          $animation: '@animation',
-          $tabsStyle: '@tabsStyle',
-          $tabsType: '@tabsType'
-        });
+    compile: function(element, attr) {
+      element.addClass('view');
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="tabs"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, tabsCtrl) {
+        var deregisterInstance = $ionicTabsDelegate._registerInstance(
+          tabsCtrl, $attr.delegateHandle
+        );
 
-        $parse(attr.model || 'tabsController').assign($scope, tabsCtrl);
+        $scope.$on('$destroy', deregisterInstance);
 
         tabsCtrl.$scope = $scope;
         tabsCtrl.$element = $element;
         tabsCtrl.$tabsElement = angular.element($element[0].querySelector('.tabs'));
 
-        transclude($scope, function(clone) {
-          $element.append(clone);
+        var el = $element[0];
+        $scope.$watch(function() { return el.className; }, function(value) {
+          var isTabsTop = value.indexOf('tabs-top') !== -1;
+          var isHidden = value.indexOf('tabs-item-hide') !== -1;
+          $scope.$hasTabs = !isTabsTop && !isHidden;
+          $scope.$hasTabsTop = isTabsTop && !isHidden;
         });
-      };
+        $scope.$on('$destroy', function() {
+          $scope.$hasTabs = $scope.$hasTabsTop = null;
+        });
+      }
     }
   };
 }])
@@ -4112,7 +4694,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
 
 /**
  * @ngdoc directive
- * @group tab bar
  * @name ionTab
  * @module ionic
  * @restrict E
@@ -4123,8 +4704,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
  *
  * Each ionTab has its own view history.
  *
- * Whenever a tab is shown or hidden, it will broadcast a 'tab.shown' or 'tab.hidden' event.
- *
  * @usage
  * ```html
  * <ion-tab
@@ -4146,7 +4725,7 @@ function($scope, $ionicViewService, $rootScope, $element) {
  * @param {expression=} badge-style The style of badge to put on this tab (eg tabs-positive).
  * @param {expression=} on-select Called when this tab is selected.
  * @param {expression=} on-deselect Called when this tab is deselected.
- * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.controller:ionicTabs#select ionicTabBar controller's select method}.
+ * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.service:$ionicTabsDelegate#select $ionicTabsDelegate.select()}.
  */
 .directive('ionTab', ['$rootScope', '$animate', '$ionicBind', '$compile', '$ionicViewService',
 function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
@@ -4167,6 +4746,11 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         element[0].querySelector('data-ion-nav-view');
       var navViewName = navView && navView.getAttribute('name');
 
+      var tabNavItem = angular.element(
+        element[0].querySelector('ion-tab-nav') ||
+        element[0].querySelector('data-ion-tab-nav')
+      ).remove();
+
       //Remove the contents of the element so we can compile them later, if tab is selected
       var tabContent = angular.element('<div class="pane">')
         .append( element.contents().remove() );
@@ -4175,6 +4759,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
           tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $ionicBind($scope, $attr, {
           animate: '=',
           onSelect: '&',
@@ -4213,9 +4800,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         tabsCtrl.$tabsElement.append($compile(tabNavElement)($scope));
 
         $scope.$watch('$tabSelected', function(value) {
-          if (!value) {
-            $scope.$broadcast('tab.hidden', $scope);
-          }
           childScope && childScope.$destroy();
           childScope = null;
           childElement && $animate.leave(childElement);
@@ -4225,7 +4809,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
             childElement = tabContent.clone();
             $animate.enter(childElement, tabsCtrl.$element);
             $compile(childElement)(childScope);
-            $scope.$broadcast('tab.shown', $scope);
           }
         });
 
@@ -4246,7 +4829,7 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
     replace: true,
     require: ['^ionTabs', '^ionTab'],
     template:
-    '<a ng-class="{active: isTabActive(), \'has-badge\':badge}" ' +
+    '<a ng-class="{\'tab-item-active\': isTabActive(), \'has-badge\':badge}" ' +
       ' class="tab-item">' +
       '<span class="badge {{badgeStyle}}" ng-if="badge">{{badge}}</span>' +
       '<i class="icon {{getIconOn()}}" ng-if="getIconOn() && isTabActive()"></i>' +
@@ -4266,6 +4849,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         var tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $scope.selectTab = function(e) {
           e.preventDefault();
           tabsCtrl.select(tabCtrl.$scope, true);
@@ -4400,249 +4986,58 @@ angular.module('ionic.ui.touch', [])
       ionic.tapElement(e.target, e);
     }
     return function(scope, element, clickExpr) {
-      var clickHandler = $parse(clickExpr);
-
-      element.on('click', function(event) {
-        scope.$apply(function() {
-          clickHandler(scope, {$event: (event)});
-        });
-      });
-
-      ionic.on('tap', onTap, element[0]);
-
-      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
-      // something else nearby.
-      element.onclick = function(event) { };
-
-      scope.$on('$destroy', function () {
-        ionic.off('tap', onTap, element[0]);
-      });
-    };
-  }])
-
-  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
-    return function(scope, element, attr) {
-      $ionicNgClick(scope, element, attr.ngClick);
-    };
-  }])
-
-  .directive('ionStopEvent', function () {
-    function stopEvent(e) {
-      e.stopPropagation();
-    }
-    return {
-      restrict: 'A',
-      link: function (scope, element, attr) {
-        element.bind(attr.ionStopEvent, stopEvent);
-      }
-    };
-  });
-
-
-})(window.angular, window.ionic);
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
-
-/**
- * @ngdoc directive
- * @name ionNavBar
- * @module ionic
- * @restrict E
- *
- * @usage
- * If have an {@link ionic.directive:ionNavView} directive, we can also create an
- * <ion-nav-bar>, which will create a topbar that updates as the application state changes.
- * We can also add some styles and set up animations:
- *
- * ```html
- * <body ng-app="starter">
- *   <!-- The nav bar that will be updated as we navigate -->
- *   <ion-nav-bar animation="nav-title-slide-ios7"
- *            type="bar-positive"
- *            back-button-type="button-icon"
- *            back-button-icon="ion-arrow-left-c"></ion-nav-bar>
- *
- *   <!-- where the initial view template will be rendered -->
- *   <ion-nav-view animation="slide-left-right"></ion-nav-view>
- * </body>
- * ```
- *
- * @param {string=} back-button-type The type of the back button's icon. Available: 'button-icon' or just 'button'.
- * @param {string=} back-button-icon The icon to use for the back button. For example, 'ion-arrow-left-c'.
- * @param {string=} back-button-label The label to use for the back button. For example, 'Back'.
- * @param animation {string=} The animation used to transition between titles.
- * @param type {string=} The className for the navbar.  For example, 'bar-positive'.
- * @param align {string=} Where to align the title of the navbar. Available: 'left', 'right', 'center'. Defaults to 'center'.
- */
-.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
-                function( $ionicViewService,   $rootScope,   $animate,   $compile) {
-
-  return {
-    restrict: 'E',
-    replace: true,
-    scope: {
-      animation: '@',
-      type: '@',
-      backType: '@backButtonType',
-      backLabel: '@backButtonLabel',
-      backIcon: '@backButtonIcon',
-      alignTitle: '@'
-    },
-    controller: function() {},
-    template:
-    '<header class="bar bar-header nav-bar{{navBarClass()}}">' +
-      '<ion-nav-back-button ng-if="(backType || backLabel || backIcon)" ' +
-        'type="backType" label="backLabel" icon="backIcon" class="hide" ' +
-        'ng-class="{\'hide\': !backButtonEnabled}">' +
-      '</ion-nav-back-button>' +
-      '<div class="buttons left-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in leftButtons" ' +
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-
-      '<h1 ng-bind-html="title" class="title"></h1>' +
-
-      '<div class="buttons right-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in rightButtons" '+
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-    '</header>',
-    compile: function(tElement, tAttrs) {
-
-      return function link($scope, $element, $attr) {
-        //defaults
-        $scope.backButtonEnabled = false;
-        $scope.animateEnabled = true;
-        $scope.isReverse = false;
-        $scope.isInvisible = true;
-
-        $scope.navBarClass = function() {
-          return ($scope.type ? ' ' + $scope.type : '') +
-            ($scope.isReverse ? ' reverse' : '') +
-            ($scope.isInvisible ? ' invisible' : '') +
-            (!$scope.animationDisabled && $scope.animation ? ' ' + $scope.animation : '');
-        };
-
-        // Initialize our header bar view which will handle
-        // resizing and aligning our title labels
-        var hb = new ionic.views.HeaderBar({
-          el: $element[0],
-          alignTitle: $scope.alignTitle || 'center'
-        });
-        $scope.headerBarView = hb;
-
-        //Navbar events
-        $scope.$on('viewState.viewEnter', function(e, data) {
-          updateHeaderData(data);
-        });
-        $scope.$on('viewState.showNavBar', function(e, showNavBar) {
-          $scope.isInvisible = !showNavBar;
-        });
+      var clickHandler = $parse(clickExpr);
 
-        // All of these these are emitted from children of a sibling scope,
-        // so we listen on parent so we can catch them as they bubble up
-        var unregisterEventListeners = [
-          $scope.$parent.$on('$viewHistory.historyChange', function(e, data) {
-            $scope.backButtonEnabled = !!data.showBack;
-          }),
-          $scope.$parent.$on('viewState.leftButtonsChanged', function(e, data) {
-            $scope.leftButtons = data;
-          }),
-          $scope.$parent.$on('viewState.rightButtonsChanged', function(e, data) {
-            $scope.rightButtons = data;
-          }),
-          $scope.$parent.$on('viewState.showBackButton', function(e, data) {
-            $scope.backButtonEnabled = !!data;
-          }),
-          $scope.$parent.$on('viewState.titleUpdated', function(e, data) {
-            $scope.title = data && data.title || '';
-          })
-        ];
-        $scope.$on('$destroy', function() {
-          for (var i=0; i<unregisterEventListeners.length; i++)
-            unregisterEventListeners[i]();
+      element.on('click', function(event) {
+        scope.$apply(function() {
+          clickHandler(scope, {$event: (event)});
         });
+      });
 
-        function updateHeaderData(data) {
-
-          if (angular.isDefined(data.hideBackButton)) {
-            $scope.backButtonEnabled = !!data.hideBackButton;
-          }
-          $scope.isReverse = data.navDirection == 'back';
-          $scope.animateEnabled = !!(data.navDirection && data.animate !== false);
-
-          $scope.leftButtons = data.leftButtons;
-          $scope.rightButtons = data.rightButtons;
-          $scope.oldTitle = $scope.title;
-          $scope.title = data && data.title || '';
-
-          // only change if they're different
-          if($scope.oldTitle !== $scope.title) {
-            if (!$scope.animateEnabled) {
-              //If no animation, we're done!
-              hb.align();
-            } else {
-              animateTitles();
-            }
-          }
-        }
+      ionic.on("release", onTap, element[0]);
 
-        function animateTitles() {
-          var oldTitleEl, newTitleEl, currentTitles;
+      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
+      // something else nearby.
+      element.onclick = function(event) { };
 
-          //If we have any title right now (or more than one, they could be transitioning on switch),
-          //replace the first one with an oldTitle element
-          currentTitles = $element[0].querySelectorAll('.title');
-          if (currentTitles.length) {
-            oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
-            angular.element(currentTitles[0]).replaceWith(oldTitleEl);
-          }
-          //Compile new title
-          newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
+      scope.$on('$destroy', function () {
+        ionic.off("release", onTap, element[0]);
+      });
+    };
+  }])
 
-          //Animate in one frame
-          ionic.requestAnimationFrame(function() {
+  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
+    return function(scope, element, attr) {
+      $ionicNgClick(scope, element, attr.ngClick);
+    };
+  }])
 
-            oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+  .directive('ionStopEvent', function () {
+    function stopEvent(e) {
+      e.stopPropagation();
+    }
+    return {
+      restrict: 'A',
+      link: function (scope, element, attr) {
+        element.bind(attr.ionStopEvent, stopEvent);
+      }
+    };
+  });
 
-            var insert = oldTitleEl && angular.element(oldTitleEl) || null;
-            $animate.enter(newTitleEl, $element, insert, function() {
-              hb.align();
-            });
 
-            //Cleanup any old titles leftover (besides the one we already did replaceWith on)
-            angular.forEach(currentTitles, function(el) {
-              if (el && el.parentNode) {
-                //Use .remove() to cleanup things like .data()
-                angular.element(el).remove();
-              }
-            });
+})(window.angular, window.ionic);
 
-            //$apply so bindings fire
-            $scope.$digest();
+(function() {
+'use strict';
 
-            //Stop flicker of new title on ios7
-            ionic.requestAnimationFrame(function() {
-              newTitleEl[0].classList.remove('invisible');
-            });
-          });
-        }
-      };
-    }
-  };
-}])
+angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
 
 /**
  * @ngdoc directive
  * @name ionView
  * @module ionic
  * @restrict E
- * @parent ionNavBar
+ * @parent ionNavView
  *
  * @description
  * A container for content, used to tell a parent {@link ionic.directive:ionNavBar}
@@ -4653,7 +5048,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  *
  * ```html
  * <ion-nav-bar></ion-nav-bar>
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <ion-view title="My Page">
  *     <ion-content>
  *       Hello!
@@ -4662,58 +5057,46 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * </ion-nav-view>
  * ```
  *
- * @param {expression=} left-buttons The leftButtons to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {expression=} right-buttons The rightButtons to display on the parent {@link ionic.directive:ionNavBar}.
  * @param {string=} title The title to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideBackButton Whether to hide the back button on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideNavBar Whether to hide the parent {@link ionic.directive:ionNavBar}.
+ * @param {boolean=} hideBackButton Whether to hide the back button on the parent
+ * {@link ionic.directive:ionNavBar} by default.
+ * @param {boolean=} hideNavBar Whether to hide the parent
+ * {@link ionic.directive:ionNavBar} by default.
  */
 .directive('ionView', ['$ionicViewService', '$rootScope', '$animate',
            function( $ionicViewService,   $rootScope,   $animate) {
   return {
     restrict: 'EA',
     priority: 1000,
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      hideBackButton: '@',
-      hideNavBar: '@',
-    },
-
+    require: '^?ionNavBar',
     compile: function(tElement, tAttrs, transclude) {
       tElement.addClass('pane');
       tElement[0].removeAttribute('title');
 
-      return function link($scope, $element, $attr) {
-
-        $rootScope.$broadcast('viewState.viewEnter', {
-          title: $scope.title,
-          navDirection: $scope.$navDirection || $scope.$parent.$navDirection
-        });
-
-        // Should we hide a back button when this tab is shown
-        $scope.hideBackButton = $scope.$eval($scope.hideBackButton);
-        if($scope.hideBackButton) {
-          $rootScope.$broadcast('viewState.showBackButton', false);
+      return function link($scope, $element, $attr, navBarCtrl) {
+        if (!navBarCtrl) {
+          return;
         }
+        var initialTitle = $attr.title;
+        navBarCtrl.changeTitle(initialTitle, $scope.$navDirection);
 
-        // Should the nav bar be hidden for this view or not?
-        $rootScope.$broadcast('viewState.showNavBar', ($scope.hideNavBar !== 'true') );
-
-        // watch for changes in the left buttons
-        $scope.$watch('leftButtons', function(value) {
-          $scope.$emit('viewState.leftButtonsChanged', $scope.leftButtons);
+        // watch for changes in the title, don't set initial value as changeTitle does that
+        $attr.$observe('title', function(val, oldVal) {
+          if (val !== initialTitle) {
+            navBarCtrl.setTitle(val);
+          }
         });
 
-        $scope.$watch('rightButtons', function(val) {
-          $scope.$emit('viewState.rightButtonsChanged', $scope.rightButtons);
+        $scope.$watch($attr.hideBackButton, function(value) {
+          // Should we hide a back button when this tab is shown
+          navBarCtrl.showBackButton(!value);
         });
 
-        // watch for changes in the title
-        $scope.$watch('title', function(val) {
-          $scope.$emit('viewState.titleUpdated', $scope);
+        $scope.$watch($attr.hideNavBar, function(value) {
+          // Should the nav bar be hidden for this view or not?
+          navBarCtrl.showBar(!value);
         });
+
       };
     }
   };
@@ -4721,39 +5104,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
 
 
 /**
-* @private
-*/
-.directive('ionNavBackButton', ['$ionicViewService', '$rootScope',
-                     function($ionicViewService,   $rootScope) {
-
-  function goBack(e) {
-    var backView = $ionicViewService.getBackView();
-    backView && backView.go();
-    e.alreadyHandled = true;
-    return false;
-  }
-
-  return {
-    restrict: 'E',
-    scope: {
-      type: '=',
-      label: '=',
-      icon: '='
-    },
-    replace: true,
-    template:
-    '<button ng-click="goBack($event)" class="button back-button {{type}} ' +
-      '{{(icon && !label) ? \'icon \' + icon : \'\'}}">' +
-      '<i ng-if="icon && label" class="icon {{icon}}"></i> ' +
-      '{{label}}' +
-    '</button>',
-    link: function($scope) {
-      $scope.goBack = goBack;
-    }
-  };
-}])
-
-/**
  * @ngdoc directive
  * @name ionNavView
  * @module ionic
@@ -4787,8 +5137,11 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * {@link ionic.directive:ionNavBar} directive which will render a header bar that updates as we
  * navigate through the navigation stack.
  *
+ * You can any [animation class](/docs/components#animation) on the navView to have its pages slide.
+ * Recommended for page transitions: 'slide-left-right', 'slide-left-right-ios7', 'slide-in-up'.
+ *
  * ```html
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <!-- Center content -->
  *   <ion-nav-bar>
  *   </ion-nav-bar>
@@ -4843,8 +5196,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * @param {string=} name A view name. The name should be unique amongst the other views in the
  * same state. You can have views of the same name that live in different states. For more
  * information, see ui-router's [ui-view documentation](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view).
- * @param {string=} animation The animation to use for views underneath this ionNavView.
- * Defaults to 'slide-left-right'.
  */
 .directive('ionNavView', ['$ionicViewService', '$state', '$compile', '$controller', '$animate',
               function( $ionicViewService,   $state,   $compile,   $controller,   $animate) {
@@ -4857,10 +5208,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     terminal: true,
     priority: 2000,
     transclude: true,
-    controller: ['$scope', function($scope) {
-      this.setNextAnimation = function(anim) {
-        $scope.$nextAnimation = anim;
-      };
+    controller: [function(){
     }],
     compile: function (element, attr, transclude) {
       return function(scope, element, attr, navViewCtrl) {
@@ -4953,10 +5301,45 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     }
   };
   return directive;
+}])
+
+
+/**
+ * @ngdoc directive
+ * @name navClear
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Disables any transition animations between views, along with removing the back
+ * button which would normally show on the next view. This directive is useful for
+ * links within a sideMenu.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would disable
+ * any animations which would normally occur between views.
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('navClear', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    link: function($scope, $element, $attr) {
+      $element.bind('click', function(){
+        $ionicViewService.nextViewOptions({
+          disableAnimate: true,
+          disableBack: true
+        });
+      });
+    }
+  };
 }]);
 
 })();
 
+/*
 (function() {
 'use strict';
 
@@ -4979,8 +5362,9 @@ angular.module('ionic.ui.virtRepeat', [])
   };
 });
 })(ionic);
+*/
 
-
+/*
 (function() {
 'use strict';
 
@@ -5015,7 +5399,6 @@ function isTagNameInList(element, list){
 
 // Utility to find the viewport/content elements given the start element:
 function findViewportAndContent(startElement){
-  /*jshint eqeqeq:false, curly:false */
   var root = $rootElement[0];
   var e, n;
   // Somewhere between the grandparent and the root node
@@ -5105,13 +5488,13 @@ function computeRowHeight(element){
 
 angular.module('ionic.ui.virtualRepeat', [])
 
-/**
- * A replacement for ng-repeat that supports virtual lists.
- * This is not a 1 to 1 replacement for ng-repeat. However, in situations
- * where you have huge lists, this repeater will work with our virtual
- * scrolling to only render items that are showing or will be showing
- * if a scroll is made.
- */
+//
+// A replacement for ng-repeat that supports virtual lists.
+// This is not a 1 to 1 replacement for ng-repeat. However, in situations
+// where you have huge lists, this repeater will work with our virtual
+// scrolling to only render items that are showing or will be showing
+// if a scroll is made.
+//
 .directive('ionVirtualRepeat', ['$log', function($log) {
     return {
       require: ['?ngModel, ^virtualList'],
@@ -5308,46 +5691,335 @@ angular.module('ionic.ui.virtualRepeat', [])
   }]);
 
 })(ionic);
-
-(function() {
-'use strict';
+*/
 
 angular.module('ionic.ui.scroll')
 
 /**
+ * @ngdoc service
+ * @name $ionicScrollDelegate
+ * @module ionic
+ * @description
+ * Delegate for controlling scrollViews (created by
+ * {@link ionic.directive:ionContent} and
+ * {@link ionic.directive:ionScroll} directives).
+ *
+ * Methods called directly on the $ionicScrollDelegate service will control all scroll
+ * views.  Use the {@link ionic.service:$ionicScrollDelegate#$getByHandle $getByHandle}
+ * method to control specific scrollViews.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content>
+ *     <button ng-click="scrollTop()">Scroll to Top!</button>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollTop = function() {
+ *     $ionicScrollDelegate.scrollTop();
+ *   };
+ * }
+ * ```
+ *
+ * Example of advanced usage, with two scroll areas using `delegate-handle`
+ * for fine control.
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content delegate-handle="mainScroll">
+ *     <button ng-click="scrollMainToTop()">
+ *       Scroll content to top!
+ *     </button>
+ *     <ion-scroll delegate-handle="small" style="height: 100px;">
+ *       <button ng-click="scrollSmallToTop()">
+ *         Scroll small area to top!
+ *       </button>
+ *     </ion-scroll>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollMainToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
+ *   };
+ *   $scope.scrollSmallToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('small').scrollTop();
+ *   };
+ * }
+ * ```
+ */
+
+.service('$ionicScrollDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#resize
+   * @description Tell the scrollView to recalculate the size of its container.
+   */
+  'resize',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTop
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTop',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollBottom
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollBottom',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTo
+   * @param {number} left The x-value to scroll to.
+   * @param {number} top The y-value to scroll to.
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTo',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#anchorScroll
+   * @description Tell the scrollView to scroll to the element with an id
+   * matching window.location.hash.
+   *
+   * If no matching element is found, it will scroll to top.
+   *
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'anchorScroll',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#rememberScrollPosition
+   * @description
+   * Will make it so, when this scrollView is destroyed (user leaves the page),
+   * the last scroll position the page was on will be saved, indexed by the
+   * given id.
+   *
+   * Note: for pages associated with a view under an ion-nav-view,
+   * rememberScrollPosition automatically saves their scroll.
+   *
+   * Related methods: scrollToRememberedPosition, forgetScrollPosition (below).
+   *
+   * In the following example, the scroll position of the ion-scroll element
+   * will persist, even when the user changes the toggle switch.
+   *
+   * ```html
+   * <ion-toggle ng-model="shouldShowScrollView"></ion-toggle>
+   * <ion-scroll delegate-handle="myScroll" ng-if="shouldShowScrollView">
+   *   <div ng-controller="ScrollCtrl">
+   *     <ion-list>
+   *       <ion-item ng-repeat="i in items">{{i}}</ion-item>
+   *     </ion-list>
+   *   </div>
+   * </ion-scroll>
+   * ```
+   * ```js
+   * function ScrollCtrl($scope, $ionicScrollDelegate) {
+   *   var delegate = $ionicScrollDelegate.$getByHandle('myScroll');
+   *
+   *   // Put any unique ID here.  The point of this is: every time the controller is recreated
+   *   // we want to load the correct remembered scroll values.
+   *   delegate.rememberScrollPosition('my-scroll-id');
+   *   delegate.scrollToRememberedPosition();
+   *   $scope.items = [];
+   *   for (var i=0; i<100; i++) {
+   *     $scope.items.push(i);
+   *   }
+   * }
+   * ```
+   *
+   * @param {string} id The id to remember the scroll position of this
+   * scrollView by.
+   */
+  'rememberScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#forgetScrollPosition
+   * @description
+   * Stop remembering the scroll position for this scrollView.
+   */
+  'forgetScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollToRememberedPosition
+   * @description
+   * If this scrollView has an id associated with its scroll position,
+   * (through calling rememberScrollPosition), and that position is remembered,
+   * load the position and scroll to it.
+   * @param {boolean=} shouldAnimate Whether to animate the scroll.
+   */
+  'scrollToRememberedPosition'
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * scrollViews with `delegate-handle` matching the given handle.
+   *
+   * Example: `$ionicScrollDelegate.$getByHandle('my-handle').scrollTop();`
+   */
+]))
+
+/**
  * @private
  */
-.controller('$ionicScroll', ['$scope', 'scrollViewOptions', '$timeout', '$ionicScrollDelegate', '$window', function($scope, scrollViewOptions, $timeout, $ionicScrollDelegate, $window) {
+.factory('$$scrollValueCache', function() {
+  return {};
+})
+
+.controller('$ionicScroll', [
+  '$scope',
+  'scrollViewOptions',
+  '$timeout',
+  '$window',
+  '$$scrollValueCache',
+  '$location',
+  '$rootScope',
+  '$document',
+  '$ionicScrollDelegate',
+function($scope, scrollViewOptions, $timeout, $window, $$scrollValueCache, $location, $rootScope, $document, $ionicScrollDelegate) {
 
   var self = this;
 
+  this._scrollViewOptions = scrollViewOptions; //for testing
+
   var element = this.element = scrollViewOptions.el;
+  var $element = this.$element = angular.element(element);
   var scrollView = this.scrollView = new ionic.views.Scroll(scrollViewOptions);
 
+  //Attach self to element as a controller so other directives can require this controller
+  //through `require: '$ionicScroll'
+  //Also attach to parent so that sibling elements can require this
+  ($element.parent().length ? $element.parent() : $element)
+    .data('$$ionicScrollController', this);
+
+  var deregisterInstance = $ionicScrollDelegate._registerInstance(
+    this, scrollViewOptions.delegateHandle
+  );
+
   if (!angular.isDefined(scrollViewOptions.bouncing)) {
     ionic.Platform.ready(function() {
       scrollView.options.bouncing = !ionic.Platform.isAndroid();
     });
   }
 
-  var $element = this.$element = angular.element(element);
-
-  //Attach self to element as a controller so other directives can require this controller
-  //through `require: '$ionicScroll'
-  $element.data('$$ionicScrollController', this);
+  var resize = angular.bind(scrollView, scrollView.resize);
+  ionic.on('resize', resize, $window);
 
-  //Register delegate for event handling
-  $ionicScrollDelegate.register($scope, $element, scrollView);
+  // set by rootScope listener if needed
+  var backListenDone = angular.noop;
 
-  $window.addEventListener('resize', resize);
   $scope.$on('$destroy', function() {
+    deregisterInstance();
+    ionic.off('resize', resize, $window);
     $window.removeEventListener('resize', resize);
+    backListenDone();
+    if (self._rememberScrollId) {
+      $$scrollValueCache[self._rememberScrollId] = scrollView.getValues();
+    }
   });
-  function resize() {
-    scrollView.resize();
-  }
 
-  this.setRefresher = function(refresherScope, refresherElement) {
+  $element.on('scroll', function(e) {
+    var detail = (e.originalEvent || e).detail || {};
+    $scope.$onScroll && $scope.$onScroll({
+      event: e,
+      scrollTop: detail.scrollTop || 0,
+      scrollLeft: detail.scrollLeft || 0
+    });
+  });
+
+  $scope.$on('$viewContentLoaded', function(e, historyData) {
+    //only the top-most scroll area under a view should remember that view's
+    //scroll position
+    if (e.defaultPrevented) { return; }
+    e.preventDefault();
+
+    var viewId = historyData && historyData.viewId;
+    if (viewId) {
+      self.rememberScrollPosition(viewId);
+      self.scrollToRememberedPosition();
+
+      backListenDone = $rootScope.$on('$viewHistory.viewBack', function(e, fromViewId, toViewId) {
+        //When going back from this view, forget its saved scroll position
+        if (viewId === fromViewId) {
+          self.forgetScrollPosition();
+        }
+      });
+    }
+  });
+
+  $timeout(function() {
+    scrollView.run();
+  });
+
+  this._rememberScrollId = null;
+
+  this.resize = function() {
+    return $timeout(resize);
+  };
+
+  this.scrollTop = function(shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(0, 0, !!shouldAnimate);
+    });
+  };
+
+  this.scrollBottom = function(shouldAnimate) {
+    this.resize().then(function() {
+      var max = scrollView.getScrollMax();
+      scrollView.scrollTo(max.left, max.top, !!shouldAnimate);
+    });
+  };
+
+  this.scrollTo = function(left, top, shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(left, top, !!shouldAnimate);
+    });
+  };
+
+  this.anchorScroll = function(shouldAnimate) {
+    this.resize().then(function() {
+      var hash = $location.hash();
+      var elm = hash && $document[0].getElementById(hash);
+      if (hash && elm) {
+        var scroll = ionic.DomUtil.getPositionInParent(elm, self.$element);
+        scrollView.scrollTo(scroll.left, scroll.top, !!shouldAnimate);
+      } else {
+        scrollView.scrollTo(0,0, !!shouldAnimate);
+      }
+    });
+  };
+
+  this.rememberScrollPosition = function(id) {
+    if (!id) {
+      throw new Error("Must supply an id to remember the scroll by!");
+    }
+    this._rememberScrollId = id;
+  };
+  this.forgetScrollPosition = function() {
+    delete $$scrollValueCache[this._rememberScrollId];
+    this._rememberScrollId = null;
+  };
+  this.scrollToRememberedPosition = function(shouldAnimate) {
+    var values = $$scrollValueCache[this._rememberScrollId];
+    if (values) {
+      this.resize().then(function() {
+        scrollView.scrollTo(+values.left, +values.top, shouldAnimate);
+      });
+    }
+  };
+
+
+
+  /**
+   * @private
+   */
+  this._setRefresher = function(refresherScope, refresherElement) {
     var refresher = this.refresher = refresherElement;
     var refresherHeight = self.refresher.clientHeight || 0;
     scrollView.activatePullToRefresh(refresherHeight, function() {
@@ -5361,10 +6033,7 @@ angular.module('ionic.ui.scroll')
       refresherScope.$onRefresh();
     });
   };
-
-  $timeout(function() {
-    scrollView.run();
-  });
 }]);
 
-})();
+
+})();
\ No newline at end of file
diff --git a/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic.js b/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic.js
index 1105ae1..664e471 100644
--- a/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic.js
+++ b/phonegap/platforms/ios/build/emulator/Venue.app/www/scripts/ionic.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,13 +12,14 @@
  *
  */
 
+(function() {
 
 // Create namespaces
 //
 window.ionic = {
   controllers: {},
   views: {},
-  version: '{{ VERSION }}'
+  version: '1.0.0-beta.1'
 };
 
 (function(ionic) {
@@ -135,16 +136,19 @@ window.ionic = {
   };
 })(ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
+
+  var readyCallbacks = [];
+  var isDomReady = false;
 
-  var readyCallbacks = [],
-  domReady = function() {
+  function domReady() {
+    isDomReady = true;
     for(var x=0; x<readyCallbacks.length; x++) {
       ionic.requestAnimationFrame(readyCallbacks[x]);
     }
     readyCallbacks = [];
     document.removeEventListener('DOMContentLoaded', domReady);
-  };
+  }
   document.addEventListener('DOMContentLoaded', domReady);
 
   // From the man himself, Mr. Paul Irish.
@@ -164,7 +168,6 @@ window.ionic = {
   * @ngdoc utility
   * @name ionic.DomUtil
   * @module ionic
-  * @group utilities
   */
   ionic.DomUtil = {
     //Call with proper context
@@ -231,12 +234,12 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.DomUtil#ready
      * @description
-     * Call a function when the dom is ready, or if it is already ready
+     * Call a function when the DOM is ready, or if it is already ready
      * call the function immediately.
      * @param {function} callback The function to be called.
      */
     ready: function(cb) {
-      if(document.readyState === "complete") {
+      if(isDomReady || document.readyState === "complete") {
         ionic.requestAnimationFrame(cb);
       } else {
         readyCallbacks.push(cb);
@@ -322,8 +325,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent of element matching the
      * className, or null.
      */
-    getParentWithClass: function(e, className) {
-      while(e.parentNode) {
+    getParentWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e.parentNode && depth--) {
         if(e.parentNode.classList && e.parentNode.classList.contains(className)) {
           return e.parentNode;
         }
@@ -339,8 +343,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent or self matching the
      * className, or null.
      */
-    getParentOrSelfWithClass: function(e, className) {
-      while(e) {
+    getParentOrSelfWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e && depth--) {
         if(e.classList && e.classList.contains(className)) {
           return e;
         }
@@ -371,7 +376,7 @@ window.ionic = {
   //Shortcuts
   ionic.requestAnimationFrame = ionic.DomUtil.requestAnimationFrame;
   ionic.animationFrameThrottle = ionic.DomUtil.animationFrameThrottle;
-})(window.ionic);
+})(this, document, ionic);
 
 /**
  * ion-events.js
@@ -424,7 +429,6 @@ window.ionic = {
    * @ngdoc utility
    * @name ionic.EventController
    * @module ionic
-   * @group utilities
    */
   ionic.EventController = {
     VIRTUALIZED_EVENTS: ['tap', 'swipe', 'swiperight', 'swipeleft', 'drag', 'hold', 'release'],
@@ -494,7 +498,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#onGesture
      * @alias ionic.onGesture
-     * @description Add an event listener for a gesture on an element. 
+     * @description Add an event listener for a gesture on an element.
      * @param {string} eventType The gesture event to listen for.
      * @param {function(e)} callback The function to call when the gesture
      * happens.
@@ -510,7 +514,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#offGesture
      * @alias ionic.offGesture
-     * @description Remove an event listener for a gesture on an element. 
+     * @description Remove an event listener for a gesture on an element.
      * @param {string} eventType The gesture event.
      * @param {function(e)} callback The listener that was added earlier.
      * @param {DOMElement} element The element the listener was added on.
@@ -1930,13 +1934,12 @@ window.ionic = {
   };
 })(window.ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
 
   /**
    * @ngdoc utility
    * @name ionic.Platform
    * @module ionic
-   * @group utilities
    */
   ionic.Platform = {
 
@@ -1989,18 +1992,15 @@ window.ionic = {
      * @private
      */
     detect: function() {
-      var i, bodyClass = document.body.className;
-
       ionic.Platform._checkPlatforms();
 
-      // only change the body class if we got platform info
-      for(i = 0; i < this.platforms.length; i++) {
-        bodyClass += ' platform-' + this.platforms[i];
-      }
-
-      bodyClass += ' grade-' + this.grade;
-
-      document.body.className = bodyClass.trim();
+      ionic.requestAnimationFrame(function(){
+        // only add to the body class if we got platform info
+        for(var i = 0; i < ionic.Platform.platforms.length; i++) {
+          document.body.classList.add('platform-' + ionic.Platform.platforms[i]);
+        }
+        document.body.classList.add('grade-' + ionic.Platform.grade);
+      });
     },
 
     /**
@@ -2054,7 +2054,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiPad
+     * @name ionic.Platform#isIPad
      * @returns {boolean} Whether we are running on iPad.
      */
     isIPad: function() {
@@ -2062,7 +2062,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiOS
+     * @name ionic.Platform#isIOS
      * @returns {boolean} Whether we are running on iOS.
      */
     isIOS: function() {
@@ -2184,15 +2184,17 @@ window.ionic = {
       this._showStatusBar = val;
       this.ready(function(){
         // run this only when or if the platform (cordova) is ready
-        if(ionic.Platform._showStatusBar) {
-          // they do not want it to be full screen
-          StatusBar.show();
-          document.body.classList.remove('status-bar-hide');
-        } else {
-          // it should be full screen
-          StatusBar.hide();
-          document.body.classList.add('status-bar-hide');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform._showStatusBar) {
+            // they do not want it to be full screen
+            window.StatusBar && window.StatusBar.show();
+            document.body.classList.remove('status-bar-hide');
+          } else {
+            // it should be full screen
+            window.StatusBar && window.StatusBar.hide();
+            document.body.classList.add('status-bar-hide');
+          }
+        });
       });
     },
 
@@ -2201,25 +2203,26 @@ window.ionic = {
      * @name ionic.Platform#fullScreen
      * @description
      * Sets whether the app is fullscreen or not (in Cordova).
-     * @param {boolean} showFullScreen Whether or not to set the app to fullscreen.
+     * @param {boolean=} showFullScreen Whether or not to set the app to fullscreen. Defaults to true.
+     * @param {boolean=} showStatusBar Whether or not to show the device's status bar. Defaults to false.
      */
     fullScreen: function(showFullScreen, showStatusBar) {
-      // fullScreen( [showFullScreen[, showStatusBar] ] )
       // showFullScreen: default is true if no param provided
       this.isFullScreen = (showFullScreen !== false);
 
       // add/remove the fullscreen classname to the body
       ionic.DomUtil.ready(function(){
         // run this only when or if the DOM is ready
-        if(ionic.Platform.isFullScreen) {
-          document.body.classList.add('fullscreen');
-        } else {
-          document.body.classList.remove('fullscreen');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform.isFullScreen) {
+            document.body.classList.add('fullscreen');
+          } else {
+            document.body.classList.remove('fullscreen');
+          }
+        });
+        // showStatusBar: default is false if no param provided
+        ionic.Platform.showStatusBar( (showStatusBar === true) );
       });
-
-      // showStatusBar: default is false if no param provided
-      this.showStatusBar( (showStatusBar === true) );
     }
 
   };
@@ -2253,10 +2256,13 @@ window.ionic = {
     }
     readyCallbacks = [];
     ionic.trigger('platformready', { target: document });
-    document.removeEventListener("deviceready", onPlatformReady, false);
+
+    ionic.requestAnimationFrame(function(){
+      document.body.classList.add('platform-ready');
+    });
   }
 
-})(window.ionic);
+})(this, document, ionic);
 
 (function(document, ionic) {
   'use strict';
@@ -2343,7 +2349,7 @@ window.ionic = {
 
     var ele = target.control || target;
 
-    if(ele.disabled || ele.type === 'file') return;
+    if(ele.disabled || ele.type === 'file' || ele.type === 'range') return;
 
     void 0;
 
@@ -2357,7 +2363,7 @@ window.ionic = {
 
     ele.dispatchEvent(clickEvent);
 
-    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA' || ele.tagName === 'SELECT') {
+    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA') {
       ele.focus();
       e.preventDefault();
     } else {
@@ -2398,8 +2404,7 @@ window.ionic = {
           ele.tagName === "A" ||
           ele.tagName === "BUTTON" ||
           ele.tagName === "LABEL" ||
-          ele.tagName === "TEXTAREA" ||
-          ele.tagName === "SELECT" ) {
+          ele.tagName === "TEXTAREA" ) {
 
         return ionic.tapElement(ele, e);
       }
@@ -2448,10 +2453,15 @@ window.ionic = {
     // check if this click's coordinates are different than its touchstart/mousedown
     var c = getCoordinates(event);
 
-    return (c.x > startCoordinates.x + HIT_RADIUS ||
-            c.x < startCoordinates.x - HIT_RADIUS ||
-            c.y > startCoordinates.y + HIT_RADIUS ||
-            c.y < startCoordinates.y - HIT_RADIUS);
+    // Quick check for 0,0 which could be simulated mouse click for form submission
+    if(c.x === 0 && c.y === 0) {
+      return false;
+    }
+
+    return (c.x > startCoordinates.x + 2 ||
+            c.x < startCoordinates.x - 2 ||
+            c.y > startCoordinates.y + 2 ||
+            c.y < startCoordinates.y - 2);
   }
 
   function recordCoordinates(event) {
@@ -2482,23 +2492,19 @@ window.ionic = {
               gesture.originalEvent.changedTouches[0]) ||
           touches[0].originalEvent || touches[0];
 
-      if(e) return { x: e.clientX, y: e.clientY };
+      if(e) return { x: e.clientX || e.pageX, y: e.clientY || e.pageY };
     }
     return { x:0, y:0 };
   }
 
+  var clickPreventTimerId;
   function removeClickPrevent(e) {
-    setTimeout(function(){
+    clearTimeout(clickPreventTimerId);
+    clickPreventTimerId = setTimeout(function(){
       var tap = isRecentTap(e);
       if(tap) delete tapCoordinates[tap.id];
+      startCoordinates = {};
     }, REMOVE_PREVENT_DELAY);
-
-    setTimeout(function(){
-      for(var hitKey in hitElements) {
-        hitElements[hitKey] && hitElements[hitKey].classList.remove('active');
-        delete hitElements[hitKey];
-      }
-    }, 150);
   }
 
   function stopEvent(e){
@@ -2510,8 +2516,7 @@ window.ionic = {
   function blurActive() {
     var ele = document.activeElement;
     if(ele && (ele.tagName === "INPUT" ||
-               ele.tagName === "TEXTAREA" ||
-               ele.tagName === "SELECT")) {
+               ele.tagName === "TEXTAREA")) {
       // using a timeout to prevent funky scrolling while a keyboard hides
       setTimeout(function(){
         ele.blur();
@@ -2521,46 +2526,143 @@ window.ionic = {
 
   function recordStartCoordinates(e) {
     startCoordinates = getCoordinates(e);
-
-    var x, ele = e.target;
-    for(x=0; x<5; x++) {
-      if(!ele || ele.tagName === 'LABEL') break;
-      if( ele.classList.contains('item') || ele.classList.contains('button') ) {
-        hitElements[hitCounts] = ele;
-        hitCounts = (hitCounts > 24 ? 0 : hitCounts + 1);
-        ionic.requestAnimationFrame(function(){
-          ele.classList.add('active');
-        });
-        break;
-      }
-      ele = ele.parentElement;
-    }
   }
 
   var tapCoordinates = {}; // used to remember coordinates to ignore if they happen again quickly
   var startCoordinates = {}; // used to remember where the coordinates of the start of the tap
   var CLICK_PREVENT_DURATION = 1500; // max milliseconds ghostclicks in the same area should be prevented
-  var REMOVE_PREVENT_DELAY = 375; // delay after a touchend/mouseup before removing the ghostclick prevent
+  var REMOVE_PREVENT_DELAY = 380; // delay after a touchend/mouseup before removing the ghostclick prevent
   var HIT_RADIUS = 15;
-  var hitElements = {};
-  var hitCounts = 0;
 
-  // set global click handler and check if the event should stop or not
-  document.addEventListener('click', preventGhostClick, true);
+  ionic.Platform.ready(function(){
+
+    if(ionic.Platform.grade === 'c') {
+      // low performing phones should have a longer ghostclick prevent
+      REMOVE_PREVENT_DELAY = 800;
+    }
+
+    // set global click handler and check if the event should stop or not
+    document.addEventListener('click', preventGhostClick, true);
 
-  // global tap event listener polyfill for HTML elements that were "tapped" by the user
-  ionic.on("tap", tapPolyfill, document);
+    // global release event listener polyfill for HTML elements that were tapped or held
+    ionic.on("release", tapPolyfill, document);
 
-  // listeners used to remove ghostclick prevention
-  document.addEventListener('touchend', removeClickPrevent, false);
-  document.addEventListener('mouseup', removeClickPrevent, false);
+    // listeners used to remove ghostclick prevention
+    document.addEventListener('touchend', removeClickPrevent, false);
+    document.addEventListener('mouseup', removeClickPrevent, false);
 
-  // in the case the user touched the screen, then scrolled, it shouldn't fire the click
-  document.addEventListener('touchstart', recordStartCoordinates, false);
-  document.addEventListener('mousedown', recordStartCoordinates, false);
+    // in the case the user touched the screen, then scrolled, it shouldn't fire the click
+    document.addEventListener('touchstart', recordStartCoordinates, false);
+    document.addEventListener('mousedown', recordStartCoordinates, false);
+  });
 
 })(this, document, ionic);
 
+(function(document, ionic) {
+  'use strict';
+
+  var queueElements = {};   // elements that should get an active state in XX milliseconds
+  var activeElements = {};  // elements that are currently active
+  var keyId = 0;            // a counter for unique keys for the above ojects
+
+  ionic.activator = {
+
+    start: function(e) {
+      // when an element is touched/clicked, it climbs up a few
+      // parents to see if it is an .item or .button element
+      ionic.requestAnimationFrame(function(){
+        var ele = e.target;
+        var eleToActivate;
+
+        for(var x=0; x<4; x++) {
+          if(!ele) break;
+          if(eleToActivate && ele.classList.contains('item')) {
+            eleToActivate = ele;
+            break;
+          }
+          if( ele.tagName == 'A' || ele.tagName == 'BUTTON' || ele.getAttribute('ng-click') ) {
+            eleToActivate = ele;
+          }
+          if( ele.classList.contains('button') ) {
+            eleToActivate = ele;
+            break;
+          }
+          ele = ele.parentElement;
+        }
+
+        if(eleToActivate) {
+          // queue that this element should be set to active
+          queueElements[keyId] = eleToActivate;
+
+          // in XX milliseconds, set the queued elements to active
+          // add listeners to clear all queued/active elements onMove
+          if(e.type === 'touchstart') {
+            document.body.removeEventListener('mousedown', ionic.activator.start);
+            document.body.addEventListener('touchmove', clear, false);
+            setTimeout(activateElements, 85);
+          } else {
+            document.body.addEventListener('mousemove', clear, false);
+            ionic.requestAnimationFrame(activateElements);
+          }
+
+          keyId = (keyId > 19 ? 0 : keyId + 1);
+        }
+
+      });
+    }
+  };
+
+  function activateElements() {
+    // activate all elements in the queue
+    for(var key in queueElements) {
+      if(queueElements[key]) {
+        queueElements[key].classList.add('active');
+        activeElements[key] = queueElements[key];
+      }
+    }
+    queueElements = {};
+  }
+
+  function deactivateElements() {
+    for(var key in activeElements) {
+      if(activeElements[key]) {
+        activeElements[key].classList.remove('active');
+        delete activeElements[key];
+      }
+    }
+  }
+
+  function onEnd(e) {
+    // clear out any active/queued elements after XX milliseconds
+    setTimeout(clear, 200);
+  }
+
+  function clear() {
+    // clear out any elements that are queued to be set to active
+    queueElements = {};
+
+    // in the next frame, remove the active class from all active elements
+    ionic.requestAnimationFrame(deactivateElements);
+
+    // remove onMove listeners that clear out active elements
+    document.body.removeEventListener('mousemove', clear);
+    document.body.removeEventListener('touchmove', clear);
+  }
+
+  // use window.onload because this doesn't need to run immediately
+  window.addEventListener('load', function(){
+    // start an active element
+    document.body.addEventListener('touchstart', ionic.activator.start, false);
+    document.body.addEventListener('mousedown', ionic.activator.start, false);
+
+    // clear all active elements after XX milliseconds
+    document.body.addEventListener('touchend', onEnd, false);
+    document.body.addEventListener('mouseup', onEnd, false);
+    document.body.addEventListener('touchcancel', onEnd, false);
+  }, false);
+
+})(document, ionic);
+
 (function(ionic) {
 
   /* for nextUid() function below */
@@ -2773,12 +2875,12 @@ function androidKeyboardFix() {
     //If the height changes, and it's less than before, we have a keyboard open
     } else if (rememberedDeviceHeight !== window.innerHeight &&
                window.innerHeight < rememberedDeviceHeight) {
-      document.body.classList.add('hide-footer');
+      document.body.classList.add('footer-hide');
       //Wait for next frame so document.activeElement is set
       ionic.requestAnimationFrame(handleKeyboardChange);
     } else {
       //Otherwise we have a keyboard close or a *really* weird resize
-      document.body.classList.remove('hide-footer');
+      document.body.classList.remove('footer-hide');
     }
 
     function handleKeyboardChange() {
@@ -2850,7 +2952,7 @@ var IS_EMBEDDED_OBJECT_REGEX = /object|embed/i;
 
 	// Create namespaces
 	if (!global.core) {
-		global.core = { effect : {} };
+		var core = global.core = { effect : {} };
 
 	} else if (!core.effect) {
 		core.effect = {};
@@ -3436,8 +3538,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     function shouldIgnorePress(e) {
       // Don't react if initial down happens on a form element
       return e.target.tagName.match(IS_INPUT_LIKE_REGEX) ||
-        e.target.isContentEditable ||
-        e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX);
+             e.target.isContentEditable ||
+             e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX) ||
+             e.target.dataset.preventScroll;
     }
 
 
@@ -3502,8 +3605,18 @@ ionic.views.Scroll = ionic.views.View.inherit({
         mousedown = false;
       }, false);
 
+      var wheelShowBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('in');
+      }, 500, true);
+
+      var wheelHideBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('out');
+      }, 100, false);
+
       document.addEventListener("mousewheel", function(e) {
+        wheelShowBarFn();
         self.scrollBy(e.wheelDeltaX/self.options.wheelDampen, -e.wheelDeltaY/self.options.wheelDampen);
+        wheelHideBarFn();
       });
     }
   },
@@ -3558,9 +3671,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
   __resizeScrollbars: function() {
     var self = this;
 
-    // Bring the scrollbars in to show the content change
-    self.__fadeScrollbars('in');
-
     // Update horiz bar
     if(self.__indicatorX) {
       var width = Math.max(Math.round(self.__clientWidth * self.__clientWidth / (self.__contentWidth)), 20);
@@ -4175,8 +4285,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     var self = this;
 
-    self.__fadeScrollbars('in');
-
     // Reset interruptedAnimation flag
     self.__interruptedAnimation = true;
 
@@ -4419,6 +4527,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
       self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
       if (self.__isDragging) {
         self.__interruptedAnimation = false;
+        self.__fadeScrollbars('in');
       }
 
     }
@@ -4921,15 +5030,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 (function(ionic) {
 'use strict';
 
-  /**
-   * @ngdoc controller
-   * @name ionicBar
-   * @module ionic
-   * @group page layout
-   * @description
-   * Controller for the {@link ionic.directive:ionHeaderBar} and
-   * {@link ionic.directive:ionFooterBar} directives.
-   */
   ionic.views.HeaderBar = ionic.views.View.inherit({
     initialize: function(opts) {
       this.el = opts.el;
@@ -4941,16 +5041,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.align();
     },
 
-    /**
-     * @ngdoc method
-     * @name ionicBar#align
-     * @description
-     * Aligns the title text with the buttons in the bar
-     * so that the title size is maximized and aligned correctly
-     * as much as possible.
-     * @param {string=} direction Which direction to align the title towards.
-     * Available: 'left', 'right', 'center'. Default: 'center'.
-     */
     align: function(align) {
 
       align || (align = this.alignTitle);
@@ -5034,7 +5124,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   var ITEM_OPTIONS_CLASS = 'item-options';
   var ITEM_PLACEHOLDER_CLASS = 'item-placeholder';
   var ITEM_REORDERING_CLASS = 'item-reordering';
-  var ITEM_DRAG_CLASS = 'item-drag';
+  var ITEM_REORDER_BTN_CLASS = 'item-reorder';
 
   var DragOp = function() {};
   DragOp.prototype = {
@@ -5043,6 +5133,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     drag: function(e) {
     },
     end: function(e) {
+    },
+    isSameItem: function(item) {
+      return false;
     }
   };
 
@@ -5054,6 +5147,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   };
 
   SlideDrag.prototype = new DragOp();
+
   SlideDrag.prototype.start = function(e) {
     var content, buttons, offsetX, buttonsWidth;
 
@@ -5091,6 +5185,27 @@ ionic.views.Scroll = ionic.views.View.inherit({
     };
   };
 
+  /**
+   * Check if this is the same item that was previously dragged.
+   */
+  SlideDrag.prototype.isSameItem = function(op) {
+    if(op._lastDrag && this._currentDrag) {
+      return this._currentDrag.content == op._lastDrag.content;
+    }
+    return false;
+  };
+
+  SlideDrag.prototype.clean = function(e) {
+    var lastDrag = this._lastDrag;
+
+    if(!lastDrag) return;
+
+    ionic.requestAnimationFrame(function() {
+      lastDrag.content.style[ionic.CSS.TRANSITION] = '';
+      lastDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(0, 0, 0)';
+    });
+  };
+
   SlideDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
     var buttonsWidth;
 
@@ -5151,21 +5266,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     }
 
-    // var content = this._currentDrag.content;
-
-    // var onRestingAnimationEnd = function(e) {
-    //   if(e.propertyName == '-webkit-transform') {
-    //     if(content) content.classList.remove(ITEM_SLIDING_CLASS);
-    //   }
-    //   e.target.removeEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-    // };
-
     ionic.requestAnimationFrame(function() {
-      // var currentX = parseFloat(_this._currentDrag.content.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]) || 0;
-      // if(currentX !== restingPoint) {
-      //   _this._currentDrag.content.classList.add(ITEM_SLIDING_CLASS);
-      //   _this._currentDrag.content.addEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-      // }
       if(restingPoint === 0) {
         _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = '';
       } else {
@@ -5175,9 +5276,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
 
       // Kill the current drag
+      _this._lastDrag = _this._currentDrag;
       _this._currentDrag = null;
 
-
       // We are done, notify caller
       doneCallback && doneCallback();
     });
@@ -5331,7 +5432,8 @@ ionic.views.Scroll = ionic.views.View.inherit({
       opts = ionic.extend({
         onReorder: function(el, oldIndex, newIndex) {},
         virtualRemoveThreshold: -200,
-        virtualAddThreshold: 200
+        virtualAddThreshold: 200,
+        canSwipe: false
       }, opts);
 
       ionic.extend(this, opts);
@@ -5346,10 +5448,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.onRefreshOpening = opts.onRefreshOpening || function() {};
       this.onRefreshHolding = opts.onRefreshHolding || function() {};
 
-      window.ionic.onGesture('touch', function(e) {
-        _this._handleTouch(e);
-      }, this.el);
-
       window.ionic.onGesture('release', function(e) {
         _this._handleEndDrag(e);
       }, this.el);
@@ -5427,10 +5525,22 @@ ionic.views.Scroll = ionic.views.View.inherit({
       }
     },
 
+    /**
+     * Clear any active drag effects on the list.
+     */
+    clearDragEffects: function() {
+      if(this._lastDragOp) {
+        this._lastDragOp.clean && this._lastDragOp.clean();
+        this._lastDragOp = null;
+      }
+    },
+
     _initDrag: function() {
       //ionic.views.ListView.__super__._initDrag.call(this);
 
-      //this._isDragging = false;
+      // Store the last one
+      this._lastDragOp = this._dragOp;
+
       this._dragOp = null;
     },
 
@@ -5449,10 +5559,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _startDrag: function(e) {
       var _this = this;
 
+      var didStart = false;
+
       this._isDragging = false;
 
+      var lastDragOp = this._lastDragOp;
+
       // Check if this is a reorder drag
-      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_DRAG_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
+      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
         var item = this._getItem(e.target);
 
         if(item) {
@@ -5466,20 +5580,25 @@ ionic.views.Scroll = ionic.views.View.inherit({
           });
           this._dragOp.start(e);
           e.preventDefault();
-          return;
         }
       }
 
       // Or check if this is a swipe to the side drag
       else if(!this._didDragUpOrDown && (e.gesture.direction == 'left' || e.gesture.direction == 'right') && Math.abs(e.gesture.deltaX) > 5) {
-        this._dragOp = new SlideDrag({ el: this.el });
-        this._dragOp.start(e);
-        e.preventDefault();
-        return;
+
+        // Make sure this is an item with buttons
+        var item = this._getItem(e.target);
+        if(item && item.querySelector('.item-options')) {
+          this._dragOp = new SlideDrag({ el: this.el });
+          this._dragOp.start(e);
+          e.preventDefault();
+        }
       }
 
-      // We aren't handling it, so pass it up the chain
-      //ionic.views.ListView.__super__._startDrag.call(this, e);
+      // If we had a last drag operation and this is a new one on a different item, clean that last one
+      if(lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
+        lastDragOp.clean && lastDragOp.clean();
+      }
     },
 
 
@@ -5493,13 +5612,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
         return;
       }
 
-      // Cancel touch timeout
-      clearTimeout(this._touchTimeout);
-      var items = _this.el.querySelectorAll('.item');
-      for(var i = 0, l = items.length; i < l; i++) {
-        items[i].classList.remove('active');
-      }
-
       this._dragOp.end(e, function() {
         _this._initDrag();
       });
@@ -5511,17 +5623,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _handleDrag: function(e) {
       var _this = this, content, buttons;
 
-      if(Math.abs(e.gesture.deltaY) > 5) {
-        this._didDragUpOrDown = true;
+      if (!this.canSwipe) {
+        return;
       }
 
-      // If the user has a touch timeout to highlight an element, clear it if we
-      // get sufficient draggage
-      if(Math.abs(e.gesture.deltaX) > 10 || Math.abs(e.gesture.deltaY) > 10) {
-        clearTimeout(this._touchTimeout);
+      if(Math.abs(e.gesture.deltaY) > 5) {
+        this._didDragUpOrDown = true;
       }
 
-      clearTimeout(this._touchTimeout);
       // If we get a drag event, make sure we aren't in another drag, then check if we should
       // start one
       if(!this.isDragging && !this._dragOp) {
@@ -5536,25 +5645,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       e.gesture.srcEvent.preventDefault();
       this._dragOp.drag(e);
-    },
-
-    /**
-     * Handle the touch event to show the active state on an item if necessary.
-     */
-    _handleTouch: function(e) {
-      var _this = this;
-
-      var item = ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_CLASS);
-      if(!item) { return; }
-
-      this._touchTimeout = setTimeout(function() {
-        var items = _this.el.querySelectorAll('.item');
-        for(var i = 0, l = items.length; i < l; i++) {
-          items[i].classList.remove('active');
-        }
-        item.classList.add('active');
-      }, 250);
-    },
+    }
 
   });
 
@@ -5578,7 +5669,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       this.showDelay = opts.showDelay || 0;
 
-      this._loadingBox = this.el.querySelector('.loading');
+      this._loadingBox = this.el.querySelector('.loading') || this.el;
     },
     show: function() {
       var _this = this;
@@ -5607,6 +5698,11 @@ ionic.views.Scroll = ionic.views.View.inherit({
       window.clearTimeout(this._showDelayTimeout);
 
       this.el.classList.remove('active');
+    },
+    setContent: function(html) {
+      if (this._loadingBox) {
+        this._loadingBox.innerHTML = html || '';
+      }
     }
   });
 
@@ -5788,14 +5884,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
  *
 */
 
-/**
- * @ngdoc controller
- * @name ionicSlideBox
- * @module ionic
- * @description
- * Controller for the {@link ionic.directive:ionSlideBox} directive.
- */
-
 (function(ionic) {
 'use strict';
 
@@ -6251,16 +6339,13 @@ ionic.views.Slider = ionic.views.View.inherit({
     }
 
     // Public API
+    this.update = function() {
+      setTimeout(setup);
+    };
     this.setup = function() {
       setup();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slide
-     * @param {number} to The index to slide to.
-     * @param {number=} speed The number of milliseconds for the change to take.
-     */
     this.slide = function(to, speed) {
       // cancel slideshow
       stop();
@@ -6268,23 +6353,13 @@ ionic.views.Slider = ionic.views.View.inherit({
       slide(to, speed);
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#prev
-     * @description Go to the previous slide. Wraps around if at the beginning.
-     */
-    this.prev = function() {
+    this.prev = this.previous = function() {
       // cancel slideshow
       stop();
 
       prev();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#next
-     * @description Go to the next slide. Wraps around if at the end.
-     */
     this.next = function() {
       // cancel slideshow
       stop();
@@ -6292,32 +6367,16 @@ ionic.views.Slider = ionic.views.View.inherit({
       next();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#stop
-     * @description Stop sliding. The slideBox will not move again until
-     * explicitly told to do so.
-     */
     this.stop = function() {
       // cancel slideshow
       stop();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#currentIndex
-     * @returns number The index of the current slide.
-     */
     this.currentIndex = function() {
       // return current index position
       return index;
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slidesCount
-     * @returns number The number of slides there are currently.
-     */
     this.slidesCount = function() {
       // return total number of slides
       return length;
@@ -6996,13 +7055,24 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
       };
     },
 
+    isOpenLeft: function() {
+      return this.getOpenAmount() > 0;
+    },
+
+    isOpenRight: function() {
+      return this.getOpenAmount() < 0;
+    },
+
     /**
      * Toggle the left menu to open 100%
      */
-    toggleLeft: function() {
-      this.content.enableAnimation();
+    toggleLeft: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount > 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount <= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(100);
@@ -7012,10 +7082,13 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
     /**
      * Toggle the right menu to open 100%
      */
-    toggleRight: function() {
-      this.content.enableAnimation();
+    toggleRight: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount < 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount >= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(-100);
@@ -7381,3 +7454,5 @@ ionic.controllers.TabBarController = ionic.controllers.ViewController.inherit({
 });
 
 })(window.ionic);
+
+})();
\ No newline at end of file
diff --git a/phonegap/platforms/ios/build/emulator/Venue.app/www/styles/ionic.css b/phonegap/platforms/ios/build/emulator/Venue.app/www/styles/ionic.css
index c34f04f..24f78d8 100644
--- a/phonegap/platforms/ios/build/emulator/Venue.app/www/styles/ionic.css
+++ b/phonegap/platforms/ios/build/emulator/Venue.app/www/styles/ionic.css
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -16,7 +16,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -26,7 +26,7 @@
  *
  */
 /*!
-  Ionicons, v#{$ionicons-version}
+  Ionicons, v1.4.1
   Created by Ben Sperry for the Ionic Framework, http://ionicons.com/
   https://twitter.com/benjsperry  https://twitter.com/ionicframework
   MIT License: https://github.com/driftyco/ionicons
@@ -1686,11 +1686,11 @@
  * --------------------------------------------------
  * Adapted from normalize.css and some reset.css. We don't care even one
  * bit about old IE, so we don't need any hacks for that in here.
- * 
+ *
  * There are probably other things we could remove here, as well.
  *
  * normalize.css v2.1.2 | MIT License | git.io/normalize
- 
+
  * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)
  * http://cssreset.com
  */
@@ -2116,6 +2116,9 @@ body.grade-b, body.grade-c {
   text-align: center;
   font-size: 30px; }
   .ionic-refresher-content .icon-pulling {
+    -webkit-animation-name: refresh-spin-back;
+    -moz-animation-name: refresh-spin-back;
+    animation-name: refresh-spin-back;
     -webkit-animation-duration: 200ms;
     -moz-animation-duration: 200ms;
     animation-duration: 200ms;
@@ -2140,6 +2143,20 @@ body.grade-b, body.grade-c {
   100% {
     -webkit-transform: rotate(-180deg); } }
 
+@keyframes refresh-spin-back {
+  0% {
+    transform: rotate(-180deg); }
+
+  100% {
+    transform: rotate(0); } }
+
+@-webkit-keyframes refresh-spin-back {
+  0% {
+    -webkit-transform: rotate(-180deg); }
+
+  100% {
+    -webkit-transform: rotate(0); } }
+
 .scroll-refresher.active .icon-pulling {
   display: block; }
 .scroll-refresher.active .icon-refreshing {
@@ -2193,6 +2210,12 @@ ion-infinite-scroll.active .scroll-infinite {
 .has-subheader {
   top: 88px; }
 
+.has-tabs-top {
+  top: 93px; }
+
+.has-header.has-subheader.has-tabs-top {
+  top: 137px; }
+
 .has-footer {
   bottom: 44px; }
 
@@ -2466,64 +2489,64 @@ a.subdued {
       padding-left: 8px;
       height: 28px; }
   .bar.bar-light {
-    background-color: white;
     border-color: #ddd;
+    background-color: white;
     background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
     color: #444; }
     .bar.bar-light .title {
       color: #444; }
   .bar.bar-stable {
-    background-color: #f8f8f8;
     border-color: #b2b2b2;
+    background-color: #f8f8f8;
     background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
     color: #444; }
     .bar.bar-stable .title {
       color: #444; }
   .bar.bar-positive {
-    background-color: #4a87ee;
     border-color: #145fd7;
+    background-color: #4a87ee;
     background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
     color: #fff; }
     .bar.bar-positive .title {
       color: #fff; }
   .bar.bar-calm {
-    background-color: #43cee6;
     border-color: #1aacc3;
+    background-color: #43cee6;
     background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
     color: #fff; }
     .bar.bar-calm .title {
       color: #fff; }
   .bar.bar-assertive {
-    background-color: #ef4e3a;
     border-color: #cc2311;
+    background-color: #ef4e3a;
     background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
     color: #fff; }
     .bar.bar-assertive .title {
       color: #fff; }
   .bar.bar-balanced {
-    background-color: #66cc33;
     border-color: #498f24;
+    background-color: #66cc33;
     background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
     color: #fff; }
     .bar.bar-balanced .title {
       color: #fff; }
   .bar.bar-energized {
-    background-color: #f0b840;
     border-color: #d39211;
+    background-color: #f0b840;
     background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
     color: #fff; }
     .bar.bar-energized .title {
       color: #fff; }
   .bar.bar-royal {
-    background-color: #8a6de9;
     border-color: #552bdf;
+    background-color: #8a6de9;
     background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
     color: #fff; }
     .bar.bar-royal .title {
       color: #fff; }
   .bar.bar-dark {
-    background-color: #444444;
     border-color: #111;
+    background-color: #444444;
     background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
     color: #fff; }
     .bar.bar-dark .title {
@@ -2580,200 +2603,200 @@ a.subdued {
     line-height: 32px; }
   .bar .button-bar + .button, .bar .button + .button-bar {
     margin-left: 5px; }
-  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .title + .buttons {
+  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .buttons.pull-right, .bar .title + .buttons {
     position: absolute;
     top: 5px;
     right: 5px;
     bottom: 5px; }
 
 .bar-light .button {
-  color: #444;
+  border-color: #ddd;
   background-color: white;
-  border-color: #ddd; }
+  color: #444; }
   .bar-light .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-light .button.active {
+    border-color: #ccc;
     background-color: #fafafa;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #ccc; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-light .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-light .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-stable .button {
-  color: #444;
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
-  border-color: #b2b2b2; }
+  color: #444; }
   .bar-stable .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-stable .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-stable .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-stable .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-positive .button {
-  color: #fff;
+  border-color: #145fd7;
   background-color: #4a87ee;
-  border-color: #145fd7; }
+  color: #fff; }
   .bar-positive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-positive .button.active {
+    border-color: #145fd7;
     background-color: #145fd7;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #145fd7; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-positive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-positive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-calm .button {
-  color: #fff;
+  border-color: #1aacc3;
   background-color: #43cee6;
-  border-color: #1aacc3; }
+  color: #fff; }
   .bar-calm .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-calm .button.active {
+    border-color: #1aacc3;
     background-color: #1aacc3;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #1aacc3; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-calm .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-calm .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-assertive .button {
-  color: #fff;
+  border-color: #cc2311;
   background-color: #ef4e3a;
-  border-color: #cc2311; }
+  color: #fff; }
   .bar-assertive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-assertive .button.active {
+    border-color: #cc2311;
     background-color: #cc2311;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #cc2311; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-assertive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-assertive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-balanced .button {
-  color: #fff;
+  border-color: #498f24;
   background-color: #66cc33;
-  border-color: #498f24; }
+  color: #fff; }
   .bar-balanced .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-balanced .button.active {
+    border-color: #498f24;
     background-color: #498f24;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #498f24; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-balanced .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-balanced .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-energized .button {
-  color: #fff;
+  border-color: #d39211;
   background-color: #f0b840;
-  border-color: #d39211; }
+  color: #fff; }
   .bar-energized .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-energized .button.active {
+    border-color: #d39211;
     background-color: #d39211;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #d39211; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-energized .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-energized .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-royal .button {
-  color: #fff;
+  border-color: #552bdf;
   background-color: #8a6de9;
-  border-color: #552bdf; }
+  color: #fff; }
   .bar-royal .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-royal .button.active {
+    border-color: #552bdf;
     background-color: #552bdf;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #552bdf; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-royal .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-royal .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-dark .button {
-  color: #fff;
+  border-color: #111;
   background-color: #444444;
-  border-color: #111; }
+  color: #fff; }
   .bar-dark .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-dark .button.active {
+    border-color: #000;
     background-color: #262626;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #000; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-dark .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-dark .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-header {
   top: 0;
@@ -2823,9 +2846,9 @@ a.subdued {
   -webkit-transform: translate3d(0, 0, 0);
   -moz-transform: translate3d(0, 0, 0);
   transform: translate3d(0, 0, 0);
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
   background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-  border-color: #b2b2b2;
   color: #444;
   position: absolute;
   bottom: 0;
@@ -2839,78 +2862,6 @@ a.subdued {
   .tabs .tab-item .badge {
     background-color: #444;
     color: #f8f8f8; }
-  .tabs.tabs-light {
-    background-color: #fff;
-    background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
-    border-color: #ddd;
-    color: #444; }
-    .tabs.tabs-light .tab-item .badge {
-      background-color: #444;
-      color: #fff; }
-  .tabs.tabs-stable {
-    background-color: #f8f8f8;
-    background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-    border-color: #b2b2b2;
-    color: #444; }
-    .tabs.tabs-stable .tab-item .badge {
-      background-color: #444;
-      color: #f8f8f8; }
-  .tabs.tabs-positive {
-    background-color: #4a87ee;
-    background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
-    border-color: #145fd7;
-    color: #fff; }
-    .tabs.tabs-positive .tab-item .badge {
-      background-color: #fff;
-      color: #4a87ee; }
-  .tabs.tabs-calm {
-    background-color: #43cee6;
-    background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
-    border-color: #1aacc3;
-    color: #fff; }
-    .tabs.tabs-calm .tab-item .badge {
-      background-color: #fff;
-      color: #43cee6; }
-  .tabs.tabs-assertive {
-    background-color: #ef4e3a;
-    background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
-    border-color: #cc2311;
-    color: #fff; }
-    .tabs.tabs-assertive .tab-item .badge {
-      background-color: #fff;
-      color: #ef4e3a; }
-  .tabs.tabs-balanced {
-    background-color: #66cc33;
-    background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
-    border-color: #498f24;
-    color: #fff; }
-    .tabs.tabs-balanced .tab-item .badge {
-      background-color: #fff;
-      color: #66cc33; }
-  .tabs.tabs-energized {
-    background-color: #f0b840;
-    background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
-    border-color: #d39211;
-    color: #fff; }
-    .tabs.tabs-energized .tab-item .badge {
-      background-color: #fff;
-      color: #f0b840; }
-  .tabs.tabs-royal {
-    background-color: #8a6de9;
-    background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
-    border-color: #552bdf;
-    color: #fff; }
-    .tabs.tabs-royal .tab-item .badge {
-      background-color: #fff;
-      color: #8a6de9; }
-  .tabs.tabs-dark {
-    background-color: #444;
-    background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
-    border-color: #111;
-    color: #fff; }
-    .tabs.tabs-dark .tab-item .badge {
-      background-color: #fff;
-      color: #444; }
   @media (min--moz-device-pixel-ratio: 1.5), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
     .tabs {
       padding-top: 2px;
@@ -2920,7 +2871,90 @@ a.subdued {
       background-size: 100% 1px;
       background-repeat: no-repeat; } }
 
-.tabs-top {
+/* Allow parent element of tabs to define color, or just the tab itself */
+.tabs-light > .tabs, .tabs.tabs-light {
+  border-color: #ddd;
+  background-color: #fff;
+  background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
+  color: #444; }
+  .tabs-light > .tabs .tab-item .badge, .tabs.tabs-light .tab-item .badge {
+    background-color: #444;
+    color: #fff; }
+
+.tabs-stable > .tabs, .tabs.tabs-stable {
+  border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
+  color: #444; }
+  .tabs-stable > .tabs .tab-item .badge, .tabs.tabs-stable .tab-item .badge {
+    background-color: #444;
+    color: #f8f8f8; }
+
+.tabs-positive > .tabs, .tabs.tabs-positive {
+  border-color: #145fd7;
+  background-color: #4a87ee;
+  background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
+  color: #fff; }
+  .tabs-positive > .tabs .tab-item .badge, .tabs.tabs-positive .tab-item .badge {
+    background-color: #fff;
+    color: #4a87ee; }
+
+.tabs-calm > .tabs, .tabs.tabs-calm {
+  border-color: #1aacc3;
+  background-color: #43cee6;
+  background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
+  color: #fff; }
+  .tabs-calm > .tabs .tab-item .badge, .tabs.tabs-calm .tab-item .badge {
+    background-color: #fff;
+    color: #43cee6; }
+
+.tabs-assertive > .tabs, .tabs.tabs-assertive {
+  border-color: #cc2311;
+  background-color: #ef4e3a;
+  background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
+  color: #fff; }
+  .tabs-assertive > .tabs .tab-item .badge, .tabs.tabs-assertive .tab-item .badge {
+    background-color: #fff;
+    color: #ef4e3a; }
+
+.tabs-balanced > .tabs, .tabs.tabs-balanced {
+  border-color: #498f24;
+  background-color: #66cc33;
+  background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
+  color: #fff; }
+  .tabs-balanced > .tabs .tab-item .badge, .tabs.tabs-balanced .tab-item .badge {
+    background-color: #fff;
+    color: #66cc33; }
+
+.tabs-energized > .tabs, .tabs.tabs-energized {
+  border-color: #d39211;
+  background-color: #f0b840;
+  background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
+  color: #fff; }
+  .tabs-energized > .tabs .tab-item .badge, .tabs.tabs-energized .tab-item .badge {
+    background-color: #fff;
+    color: #f0b840; }
+
+.tabs-royal > .tabs, .tabs.tabs-royal {
+  border-color: #552bdf;
+  background-color: #8a6de9;
+  background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
+  color: #fff; }
+  .tabs-royal > .tabs .tab-item .badge, .tabs.tabs-royal .tab-item .badge {
+    background-color: #fff;
+    color: #8a6de9; }
+
+.tabs-dark > .tabs, .tabs.tabs-dark {
+  border-color: #111;
+  background-color: #444;
+  background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
+  color: #fff; }
+  .tabs-dark > .tabs .tab-item .badge, .tabs.tabs-dark .tab-item .badge {
+    background-color: #fff;
+    color: #444; }
+
+/* Allow parent element to have tabs-top */
+.tabs-top > .tabs, .tabs.tabs-top {
   top: 44px;
   padding-top: 0;
   padding-bottom: 2px;
@@ -2949,6 +2983,9 @@ a.subdued {
   .tab-item:hover {
     cursor: pointer; }
 
+.tabs-item-hide, .tabs-item-hide > .tabs {
+  display: none; }
+
 .tabs-icon-top .tab-item, .tabs-icon-bottom .tab-item {
   font-size: 12px;
   line-height: 14px; }
@@ -2992,25 +3029,25 @@ a.subdued {
 
 /* Navigational tab */
 /* Active state for tab */
-.tab-item.active {
+.tab-item.tab-item-active {
   opacity: 1; }
-  .tab-item.active.tab-item-light {
+  .tab-item.tab-item-active.tab-item-light {
     color: #fff; }
-  .tab-item.active.tab-item-stable {
+  .tab-item.tab-item-active.tab-item-stable {
     color: #f8f8f8; }
-  .tab-item.active.tab-item-positive {
+  .tab-item.tab-item-active.tab-item-positive {
     color: #4a87ee; }
-  .tab-item.active.tab-item-calm {
+  .tab-item.tab-item-active.tab-item-calm {
     color: #43cee6; }
-  .tab-item.active.tab-item-assertive {
+  .tab-item.tab-item-active.tab-item-assertive {
     color: #ef4e3a; }
-  .tab-item.active.tab-item-balanced {
+  .tab-item.tab-item-active.tab-item-balanced {
     color: #66cc33; }
-  .tab-item.active.tab-item-energized {
+  .tab-item.tab-item-active.tab-item-energized {
     color: #f0b840; }
-  .tab-item.active.tab-item-royal {
+  .tab-item.tab-item-active.tab-item-royal {
     color: #8a6de9; }
-  .tab-item.active.tab-item-dark {
+  .tab-item.tab-item-active.tab-item-dark {
     color: #444; }
 
 .item.tabs {
@@ -3103,7 +3140,6 @@ a.subdued {
     left: 20%;
     overflow: visible;
     min-height: 240px;
-    max-width: 768px;
     width: 60%; }
   .modal.ng-leave-active {
     bottom: 0; } }
@@ -3186,6 +3222,13 @@ a.subdued {
   .popup-buttons .button:last-child {
     margin-right: 0px; }
 
+.popup-open {
+  pointer-events: none; }
+  .popup-open.modal-open .modal {
+    pointer-events: none; }
+  .popup-open .popup-backdrop, .popup-open .popup {
+    pointer-events: auto; }
+
 .popup-backdrop {
   -webkit-animation-name: fadeIn;
   -moz-animation-name: fadeIn;
@@ -3208,6 +3251,9 @@ a.subdued {
   background-color: rgba(0, 0, 0, 0.4); }
 
 .loading-backdrop {
+  -webkit-transition: visibility 0s linear 0.3s;
+  -moz-transition: visibility 0s linear 0.3s;
+  transition: visibility 0s linear 0.3s;
   position: fixed;
   top: 0;
   left: 0;
@@ -3220,13 +3266,8 @@ a.subdued {
     -moz-transition-delay: 0s;
     transition-delay: 0s;
     visibility: visible; }
-
-.loading-backdrop {
-  -webkit-transition: visibility 0s linear 0.3s;
-  -moz-transition: visibility 0s linear 0.3s;
-  transition: visibility 0s linear 0.3s; }
-  .loading-backdrop.active {
-    background-color: rgba(0, 0, 0, 0.7); }
+    .loading-backdrop.active.show-backdrop {
+      background-color: rgba(0, 0, 0, 0.7); }
 
 .loading {
   position: fixed;
@@ -3247,12 +3288,9 @@ a.subdued {
  * --------------------------------------------------
  */
 .item {
-  color: #444;
-  background-color: #fff;
   border-color: #ddd;
-  -webkit-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  -moz-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
+  background-color: #fff;
+  color: #444;
   position: relative;
   z-index: 2;
   display: block;
@@ -3288,77 +3326,81 @@ a.subdued {
     position: absolute;
     top: 15px;
     right: 35px; }
+  .item.item-button-right .badge {
+    right: 65px; }
   .item.item-divider .badge {
     top: 7.5px; }
   .item .badge + .badge {
     margin-right: 5px; }
   .item.item-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
   .item.item-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
   .item.item-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
   .item.item-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
   .item.item-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
   .item.item-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
   .item.item-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
   .item.item-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
   .item.item-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
+  .item[ng-click]:hover {
+    cursor: pointer; }
 
 .item.active:not(.item-divider):not(.item-input):not(.item-input-inset), .item-complex.active .item-content {
-  background-color: #D9D9D9;
-  border-color: #ccc; }
+  border-color: #ccc;
+  background-color: #D9D9D9; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-light, .item-complex.active .item-content.item-light {
-    background-color: #fafafa;
-    border-color: #ccc; }
+    border-color: #ccc;
+    background-color: #fafafa; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-stable, .item-complex.active .item-content.item-stable {
-    background-color: #e5e5e5;
-    border-color: #a2a2a2; }
+    border-color: #a2a2a2;
+    background-color: #e5e5e5; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-positive, .item-complex.active .item-content.item-positive {
-    background-color: #145fd7;
-    border-color: #145fd7; }
+    border-color: #145fd7;
+    background-color: #145fd7; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-calm, .item-complex.active .item-content.item-calm {
-    background-color: #1aacc3;
-    border-color: #1aacc3; }
+    border-color: #1aacc3;
+    background-color: #1aacc3; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-assertive, .item-complex.active .item-content.item-assertive {
-    background-color: #cc2311;
-    border-color: #cc2311; }
+    border-color: #cc2311;
+    background-color: #cc2311; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-balanced, .item-complex.active .item-content.item-balanced {
-    background-color: #498f24;
-    border-color: #498f24; }
+    border-color: #498f24;
+    background-color: #498f24; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-energized, .item-complex.active .item-content.item-energized {
-    background-color: #d39211;
-    border-color: #d39211; }
+    border-color: #d39211;
+    background-color: #d39211; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-royal, .item-complex.active .item-content.item-royal {
-    background-color: #552bdf;
-    border-color: #552bdf; }
+    border-color: #552bdf;
+    background-color: #552bdf; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-dark, .item-complex.active .item-content.item-dark {
-    background-color: #262626;
-    border-color: #000; }
+    border-color: #000;
+    background-color: #262626; }
 
 .item, .item h1, .item h2, .item h3, .item h4, .item h5, .item h6, .item p, .item-content, .item-content h1, .item-content h2, .item-content h3, .item-content h4, .item-content h5, .item-content h6, .item-content p {
   overflow: hidden;
@@ -3384,14 +3426,6 @@ a.item {
   padding: 0; }
 
 .item-complex .item-content, .item-radio .item-content {
-  /**
-   * The content area of a complex list item. This area can
-   * Slide left and right and be dragged to support different
-   * UI interactions.
-   */
-  -webkit-transition: all 0.1s ease-in-out;
-  -moz-transition: all 0.1s ease-in-out;
-  transition: all 0.1s ease-in-out;
   position: relative;
   z-index: 2;
   padding: 15px 40px 15px 15px;
@@ -3545,40 +3579,38 @@ a.item-content {
  * By default, if an .item is created out of an <a> or <button>
  * then a arrow will be added to the right side of the item.
  */
-a.item, button.item, .item a[href].item-content, .item[ng-click] a.item-content {
+a.item, button.item, .item[href] .item-content, .item[ng-click] .item-content {
   padding-right: 40px; }
+  a.item:after, button.item:after, .item[href] .item-content:after, .item[ng-click] .item-content:after {
+    display: -webkit-box;
+    display: -webkit-flex;
+    display: -moz-box;
+    display: -moz-flex;
+    display: -ms-flexbox;
+    display: flex;
+    -webkit-box-align: center;
+    -ms-flex-align: center;
+    -webkit-align-items: center;
+    -moz-align-items: center;
+    align-items: center;
+    -webkit-font-smoothing: antialiased;
+    font-smoothing: antialiased;
+    position: absolute;
+    top: 0;
+    right: 11px;
+    height: 100%;
+    color: #ccc;
+    content: "\f125";
+    text-transform: none;
+    font-weight: normal;
+    font-style: normal;
+    font-variant: normal;
+    font-size: 16px;
+    font-family: 'Ionicons';
+    line-height: 1;
+    speak: none; }
 
-a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-click] a.item-content:after {
-  /* By default, both <a> and <button> have right side arrow icons */
-  display: -webkit-box;
-  display: -webkit-flex;
-  display: -moz-box;
-  display: -moz-flex;
-  display: -ms-flexbox;
-  display: flex;
-  -webkit-box-align: center;
-  -ms-flex-align: center;
-  -webkit-align-items: center;
-  -moz-align-items: center;
-  align-items: center;
-  -webkit-font-smoothing: antialiased;
-  font-smoothing: antialiased;
-  position: absolute;
-  top: 0;
-  right: 11px;
-  height: 100%;
-  color: #ccc;
-  content: "\f125";
-  text-transform: none;
-  font-weight: normal;
-  font-style: normal;
-  font-variant: normal;
-  font-size: 16px;
-  font-family: 'Ionicons';
-  line-height: 1;
-  speak: none; }
-
-.grade-b a.item:after, .grade-b button.item:after, .grade-b .item a[href].item-content:after, .grade-b .item[ng-click] a.item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item a[href].item-content:after, .grade-c .item[ng-click] a.item-content:after {
+.grade-b a.item:after, .grade-b button.item:after, .grade-b .item[href] .item-content:after, .grade-b .item[ng-click] .item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item[href] .item-content:after, .grade-c .item[ng-click] .item-content:after {
   -webkit-font-smoothing: none;
   font-smoothing: none;
   content: '>';
@@ -3587,10 +3619,10 @@ a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-clic
 a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after, button.item-button-right:after, .item a.item-content:after {
   display: none; }
 
-.item-avatar {
+.item-avatar, .item-avatar .item-content {
   padding-left: 70px;
   min-height: 70px; }
-  .item-avatar img:first-child, .item-avatar .item-img {
+  .item-avatar > img:first-child, .item-avatar .item-image, .item-avatar .item-content > img:first-child, .item-avatar .item-content .item-image {
     position: absolute;
     top: 15px;
     left: 15px;
@@ -3602,7 +3634,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .item-thumbnail-left, .item-thumbnail-left .item-content {
   padding-left: 105px;
   min-height: 100px; }
-  .item-thumbnail-left > img:first-child, .item-thumbnail-left > .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content > .item-image {
+  .item-thumbnail-left > img:first-child, .item-thumbnail-left .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content .item-image {
     position: absolute;
     top: 10px;
     left: 10px;
@@ -3610,13 +3642,13 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-avatar.item-complex, .item-thumbnail-left.item-complex {
   padding-left: 0; }
 
 .item-thumbnail-right, .item-thumbnail-right .item-content {
   padding-right: 105px;
   min-height: 100px; }
-  .item-thumbnail-right > img:first-child, .item-thumbnail-right > .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content > .item-image {
+  .item-thumbnail-right > img:first-child, .item-thumbnail-right .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content .item-image {
     position: absolute;
     top: 10px;
     right: 10px;
@@ -3624,7 +3656,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-thumbnail-right.item-complex {
   padding-right: 0; }
 
 .item-image {
@@ -3656,32 +3688,58 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   color: #aaa;
   font-size: 14px; }
 
-.item-reordering {
-  position: absolute;
-  z-index: 9;
-  width: 100%; }
+.item-left-editable .item-content, .item-right-editable .item-content {
+  -webkit-transition-duration: 250ms;
+  -moz-transition-duration: 250ms;
+  transition-duration: 250ms;
+  -webkit-transition-timing-function: ease-in-out;
+  -moz-transition-timing-function: ease-in-out;
+  transition-timing-function: ease-in-out;
+  -webkit-transition-property: none;
+  -moz-transition-property: none;
+  transition-property: none; }
+
+.item-left-editable .item-content {
+  -webkit-transition-property: -webkit-transform;
+  -moz-transition-property: -moz-transform;
+  transition-property: transform; }
+
+.item-right-editable .item-content {
+  -webkit-transition-property: margin-right;
+  -moz-transition-property: margin-right;
+  transition-property: margin-right; }
+
+.item-left-editable.item-right-editable .item-content {
+  -webkit-transition-property: -webkit-transform, margin-right;
+  -moz-transition-property: -moz-transform, margin-right;
+  transition-property: transform, margin-right; }
+
+.list-left-editing .item-left-editable .item-content, .item-left-editing.item-left-editable .item-content {
+  -webkit-transform: translate3d(50px, 0, 0);
+  -moz-transform: translate3d(50px, 0, 0);
+  transform: translate3d(50px, 0, 0); }
 
-.item-placeholder {
-  opacity: 0.7; }
+.list-right-editing .item-right-editable .item-content, .item-right-editing.item-right-editable .item-content {
+  margin-right: 50px; }
 
-/**
- * The left-side edit area of a complex list item. This area shows
- * whe the list item is in edit mode.
- */
-.item-edit {
-  -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
+.item-left-edit {
+  -webkit-transition: all ease-in-out 250ms;
+  -moz-transition: all ease-in-out 250ms;
+  transition: all ease-in-out 250ms;
+  -webkit-transform: translate3d(-42px, 0, 0);
+  -moz-transform: translate3d(-42px, 0, 0);
+  transform: translate3d(-42px, 0, 0);
   position: absolute;
   top: 0;
-  left: 8px;
+  left: 0;
   z-index: 0;
-  width: 48px;
+  width: 50px;
   height: 100%;
-  line-height: 100%; }
-  .item-edit .button {
+  line-height: 100%;
+  opacity: 0; }
+  .item-left-edit .button {
     height: 100%; }
-    .item-edit .button.icon {
+    .item-left-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3695,30 +3753,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       align-items: center;
       position: absolute;
       top: 0;
-      left: 0;
-      height: 100%;
-      color: #ef4e3a;
-      font-size: 24px; }
-  .item-edit.ng-enter {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: -48px;
-    opacity: 0; }
-  .item-edit.ng-enter-active {
-    left: 8px;
-    opacity: 1; }
-  .item-edit.ng-leave {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: 0px;
-    opacity: 1; }
-  .item-edit.ng-leave-active {
-    left: -48px;
-    opacity: 0; }
+      height: 100%; }
+
+.list-left-editing .item-left-edit, .item-left-editing .item-left-edit {
+  -webkit-transform: translate3d(8px, 0, 0);
+  -moz-transform: translate3d(8px, 0, 0);
+  transform: translate3d(8px, 0, 0);
+  opacity: 1; }
+
+.item-delete .button.icon {
+  color: #ef4e3a;
+  font-size: 24px; }
+  .item-delete .button.icon:hover {
+    opacity: 0.7; }
 
-.item-drag {
+.item-right-edit {
   position: absolute;
   top: 0;
   right: 0;
@@ -3726,10 +3775,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   width: 50px;
   height: 100%;
   background: inherit; }
-  .item-drag .button {
-    min-width: 42px;
+  .item-right-edit .button {
+    min-width: 50px;
     height: 100%; }
-    .item-drag .button.icon:before {
+    .item-right-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3746,6 +3795,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       height: 100%;
       font-size: 32px; }
 
+.item-reorder .button.icon {
+  color: #444;
+  font-size: 32px; }
+
+.item-reordering {
+  position: absolute;
+  z-index: 9;
+  width: 100%;
+  box-shadow: 0px 0px 10px 0px #aaa; }
+  .item-reordering .item-reorder {
+    z-index: 1; }
+
+.item-placeholder {
+  opacity: 0.7; }
+
 /**
  * The hidden right-side buttons that can be exposed under a list item
  * with dragging.
@@ -3775,25 +3839,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   padding-left: 0;
   margin-bottom: 20px; }
 
-/* If a list is the last item in a container, don't add margin-bottom */
 .list:last-child {
   margin-bottom: 0px; }
 
 /**
- * List editing styles. These trigger when the entire list goes into
- * "edit mode" or reordering list items
- */
-.list-editing .item-content {
-  -webkit-transform: translate3d(50px, 0, 0);
-  -moz-transform: translate3d(50px, 0, 0);
-  transform: translate3d(50px, 0, 0); }
-
-.list-reordering .item-content {
-  margin-right: 50px; }
-.list-reordering .item-drag {
-  z-index: 1; }
-
-/**
  * List Header
  * --------------------------------------------------
  */
@@ -3857,6 +3906,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .badge {
   background-color: transparent;
   color: #AAAAAA;
+  z-index: 1;
   display: inline-block;
   padding: 3px 8px;
   min-width: 10px;
@@ -3908,19 +3958,19 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
  */
 .slider {
   position: relative;
-  overflow: hidden;
-  visibility: hidden; }
+  visibility: hidden;
+  overflow: hidden; }
 
 .slider-slides {
   position: relative;
   height: 100%; }
 
 .slider-slide {
-  display: block;
   position: relative;
+  display: block;
+  float: left;
   width: 100%;
   height: 100%;
-  float: left;
   vertical-align: top; }
 
 .slider-slide-image > img {
@@ -3929,9 +3979,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .slider-pager {
   position: absolute;
   bottom: 20px;
+  z-index: 1;
   width: 100%;
-  text-align: center;
-  z-index: 1; }
+  height: 15px;
+  text-align: center; }
   .slider-pager .slider-pager-page {
     display: inline-block;
     margin: 0px 3px;
@@ -3940,10 +3991,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     text-decoration: none;
     opacity: 0.3; }
     .slider-pager .slider-pager-page.active {
-      opacity: 1;
       -webkit-transition: opacity 0.4s ease-in;
       -moz-transition: opacity 0.4s ease-in;
-      transition: opacity 0.4s ease-in; }
+      transition: opacity 0.4s ease-in;
+      opacity: 1; }
 
 /**
  * Split Pane
@@ -4008,8 +4059,8 @@ legend {
     font-size: 1.07143; }
 
 label, input, button, select, textarea {
-  font-size: 14px;
   font-weight: normal;
+  font-size: 14px;
   line-height: 1.42857; }
 
 input, button, select, textarea {
@@ -4029,7 +4080,7 @@ input, button, select, textarea {
   align-items: center;
   position: relative;
   overflow: hidden;
-  padding: 6px 8px 5px; }
+  padding: 6px 0 5px 8px; }
   .item-input input {
     -webkit-border-radius: 0;
     -moz-border-radius: 0;
@@ -4044,6 +4095,7 @@ input, button, select, textarea {
     -moz-appearance: none;
     appearance: none;
     margin: 0;
+    padding-right: 24px;
     background-color: transparent; }
   .item-input .button .icon {
     -webkit-box-flex: 0;
@@ -4619,13 +4671,22 @@ input[type="range"] {
   padding-left: 0; }
 
 /**
+ * Progress
+ * --------------------------------------------------
+ */
+progress {
+  display: block;
+  margin: 15px auto;
+  width: 100%; }
+
+/**
  * Buttons
  * --------------------------------------------------
  */
 .button {
-  color: #444;
-  background-color: #f8f8f8;
   border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  color: #444;
   position: relative;
   display: inline-block;
   margin: 0;
@@ -4645,9 +4706,9 @@ input[type="range"] {
     color: #444;
     text-decoration: none; }
   .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .button:after {
     position: absolute;
     top: -6px;
@@ -4675,248 +4736,248 @@ input[type="range"] {
     margin-top: 10px;
     margin-bottom: 10px; }
   .button.button-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
     .button.button-light:hover {
       color: #444;
       text-decoration: none; }
     .button.button-light.active {
+      border-color: #ccc;
       background-color: #fafafa;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #ccc; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-light.button-clear {
-      color: #ddd;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-light.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ddd; }
+    .button.button-light.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-light.button-outline {
-      background: transparent;
       border-color: #ddd;
+      background: transparent;
       color: #ddd; }
       .button.button-light.button-outline.active {
         background-color: #ddd;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
     .button.button-stable:hover {
       color: #444;
       text-decoration: none; }
     .button.button-stable.active {
+      border-color: #a2a2a2;
       background-color: #e5e5e5;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #a2a2a2; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-stable.button-clear {
-      color: #b2b2b2;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-stable.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #b2b2b2; }
+    .button.button-stable.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-stable.button-outline {
-      background: transparent;
       border-color: #b2b2b2;
+      background: transparent;
       color: #b2b2b2; }
       .button.button-stable.button-outline.active {
         background-color: #b2b2b2;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
     .button.button-positive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-positive.active {
+      border-color: #145fd7;
       background-color: #145fd7;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #145fd7; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-positive.button-clear {
-      color: #4a87ee;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-positive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #4a87ee; }
+    .button.button-positive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-positive.button-outline {
-      background: transparent;
       border-color: #4a87ee;
+      background: transparent;
       color: #4a87ee; }
       .button.button-positive.button-outline.active {
         background-color: #4a87ee;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
     .button.button-calm:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-calm.active {
+      border-color: #1aacc3;
       background-color: #1aacc3;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #1aacc3; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-calm.button-clear {
-      color: #43cee6;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-calm.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #43cee6; }
+    .button.button-calm.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-calm.button-outline {
-      background: transparent;
       border-color: #43cee6;
+      background: transparent;
       color: #43cee6; }
       .button.button-calm.button-outline.active {
         background-color: #43cee6;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
     .button.button-assertive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-assertive.active {
+      border-color: #cc2311;
       background-color: #cc2311;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #cc2311; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-assertive.button-clear {
-      color: #ef4e3a;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-assertive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ef4e3a; }
+    .button.button-assertive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-assertive.button-outline {
-      background: transparent;
       border-color: #ef4e3a;
+      background: transparent;
       color: #ef4e3a; }
       .button.button-assertive.button-outline.active {
         background-color: #ef4e3a;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
     .button.button-balanced:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-balanced.active {
+      border-color: #498f24;
       background-color: #498f24;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #498f24; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-balanced.button-clear {
-      color: #66cc33;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-balanced.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #66cc33; }
+    .button.button-balanced.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-balanced.button-outline {
-      background: transparent;
       border-color: #66cc33;
+      background: transparent;
       color: #66cc33; }
       .button.button-balanced.button-outline.active {
         background-color: #66cc33;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
     .button.button-energized:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-energized.active {
+      border-color: #d39211;
       background-color: #d39211;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #d39211; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-energized.button-clear {
-      color: #f0b840;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-energized.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #f0b840; }
+    .button.button-energized.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-energized.button-outline {
-      background: transparent;
       border-color: #f0b840;
+      background: transparent;
       color: #f0b840; }
       .button.button-energized.button-outline.active {
         background-color: #f0b840;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
     .button.button-royal:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-royal.active {
+      border-color: #552bdf;
       background-color: #552bdf;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #552bdf; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-royal.button-clear {
-      color: #8a6de9;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-royal.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #8a6de9; }
+    .button.button-royal.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-royal.button-outline {
-      background: transparent;
       border-color: #8a6de9;
+      background: transparent;
       color: #8a6de9; }
       .button.button-royal.button-outline.active {
         background-color: #8a6de9;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
     .button.button-dark:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-dark.active {
+      border-color: #000;
       background-color: #262626;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #000; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-dark.button-clear {
-      color: #444;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-dark.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #444; }
+    .button.button-dark.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-dark.button-outline {
-      background: transparent;
       border-color: #444;
+      background: transparent;
       color: #444; }
       .button.button-dark.button-outline.active {
         background-color: #444;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
 
 .button-small {
   padding: 0 4px;
@@ -4965,13 +5026,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-clear.button-clear {
-    color: #b2b2b2;
-    background: none;
     border-color: transparent;
-    box-shadow: none; }
-  .button-clear.button-icon {
     background: none;
-    border-color: transparent; }
+    box-shadow: none;
+    color: #b2b2b2; }
+  .button-clear.button-icon {
+    border-color: transparent;
+    background: none; }
   .button-clear.active {
     opacity: 0.3; }
 
@@ -4982,13 +5043,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-outline.button-outline {
-    background: transparent;
     border-color: #b2b2b2;
+    background: transparent;
     color: #b2b2b2; }
     .button-outline.button-outline.active {
       background-color: #b2b2b2;
-      color: #fff;
-      box-shadow: none; }
+      box-shadow: none;
+      color: #fff; }
 
 .padding > .button.button-block:first-child {
   margin-top: 0; }
@@ -6009,9 +6070,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-sm .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-sm .col, .responsive-sm .col-10, .responsive-sm .col-20, .responsive-sm .col-25, .responsive-sm .col-33, .responsive-sm .col-34, .responsive-sm .col-50, .responsive-sm .col-66, .responsive-sm .col-67, .responsive-sm .col-75, .responsive-sm .col-80, .responsive-sm .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 767px) {
   .responsive-md {
@@ -6022,9 +6091,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-md .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-md .col, .responsive-md .col-10, .responsive-md .col-20, .responsive-md .col-25, .responsive-md .col-33, .responsive-md .col-34, .responsive-md .col-50, .responsive-md .col-66, .responsive-md .col-67, .responsive-md .col-75, .responsive-md .col-80, .responsive-md .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 1023px) {
   .responsive-lg {
@@ -6035,9 +6112,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-lg .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-lg .col, .responsive-lg .col-10, .responsive-lg .col-20, .responsive-lg .col-25, .responsive-lg .col-33, .responsive-lg .col-34, .responsive-lg .col-50, .responsive-lg .col-66, .responsive-lg .col-67, .responsive-lg .col-75, .responsive-lg .col-80, .responsive-lg .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 /**
  * Utility Classes
@@ -6062,9 +6147,9 @@ a.button {
 .invisible {
   visibility: hidden; }
 
-.hide-footer .bar-footer, .hide-footer .tabs {
+.footer-hide .bar-footer, .footer-hide .tabs {
   display: none; }
-.hide-footer .has-footer, .hide-footer .has-tabs {
+.footer-hide .has-footer, .footer-hide .has-tabs {
   bottom: 0; }
 
 .inline {
diff --git a/phonegap/platforms/ios/www/icons/android/hdpi.png b/phonegap/platforms/ios/www/icons/android/hdpi.png
deleted file mode 100644
index c59f94d..0000000
Binary files a/phonegap/platforms/ios/www/icons/android/hdpi.png and /dev/null differ
diff --git a/phonegap/platforms/ios/www/icons/android/ldpi.png b/phonegap/platforms/ios/www/icons/android/ldpi.png
deleted file mode 100644
index 47602ac..0000000
Binary files a/phonegap/platforms/ios/www/icons/android/ldpi.png and /dev/null differ
diff --git a/phonegap/platforms/ios/www/icons/android/mdpi.png b/phonegap/platforms/ios/www/icons/android/mdpi.png
deleted file mode 100644
index 56aa004..0000000
Binary files a/phonegap/platforms/ios/www/icons/android/mdpi.png and /dev/null differ
diff --git a/phonegap/platforms/ios/www/icons/android/xhdpi.png b/phonegap/platforms/ios/www/icons/android/xhdpi.png
deleted file mode 100644
index 299ec2f..0000000
Binary files a/phonegap/platforms/ios/www/icons/android/xhdpi.png and /dev/null differ
diff --git a/phonegap/platforms/ios/www/index.html b/phonegap/platforms/ios/www/index.html
index 5e01d4f..b9b791d 100644
--- a/phonegap/platforms/ios/www/index.html
+++ b/phonegap/platforms/ios/www/index.html
@@ -43,6 +43,7 @@
        // ga('send', 'pageview');
     </script>
 
+    <script src="scripts/fastclick.js"></script>
     <script src="scripts/ionic.js"></script>
     <script src="scripts/jquery.js"></script>
     <script src="scripts/angular.js"></script>
diff --git a/phonegap/platforms/ios/www/scripts/ionic-angular.js b/phonegap/platforms/ios/www/scripts/ionic-angular.js
index 0aba146..c8cdf25 100644
--- a/phonegap/platforms/ios/www/scripts/ionic-angular.js
+++ b/phonegap/platforms/ios/www/scripts/ionic-angular.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,6 +12,7 @@
  *
  */
 
+(function() {
 /**
  * Create a wrapping module to ease having to include too many
  * modules.
@@ -37,33 +38,25 @@ angular.module('ionic.service', [
   'ionic.decorator.location'
 ]);
 
-// UI specific services and delegates
-angular.module('ionic.ui.service', [
-  'ionic.ui.service.scrollDelegate',
-  'ionic.ui.service.slideBoxDelegate',
-  'ionic.ui.service.sideMenuDelegate',
-]);
-
 angular.module('ionic.ui', [
-                            'ionic.ui.content',
-                            'ionic.ui.scroll',
-                            'ionic.ui.tabs',
-                            'ionic.ui.viewState',
-                            'ionic.ui.header',
-                            'ionic.ui.sideMenu',
-                            'ionic.ui.slideBox',
-                            'ionic.ui.list',
-                            'ionic.ui.checkbox',
-                            'ionic.ui.toggle',
-                            'ionic.ui.radio',
-                            'ionic.ui.touch',
-                            'ionic.ui.popup'
-                           ]);
-
+    'ionic.ui.checkbox',
+    'ionic.ui.content',
+    'ionic.ui.header',
+    'ionic.ui.list',
+    'ionic.ui.navBar',
+    'ionic.ui.popup',
+    'ionic.ui.radio',
+    'ionic.ui.scroll',
+    'ionic.ui.sideMenu',
+    'ionic.ui.slideBox',
+    'ionic.ui.tabs',
+    'ionic.ui.toggle',
+    'ionic.ui.touch',
+    'ionic.ui.viewState'
+]);
 
 angular.module('ionic', [
     'ionic.service',
-    'ionic.ui.service',
     'ionic.ui',
 
     // Angular deps
@@ -127,6 +120,86 @@ angular.element.prototype.removeClass = function(cssClasses) {
   return this;
 };
 
+
+function delegateService(methodNames) {
+  return ['$log', function($log) {
+    var delegate = this;
+
+    var instances = this._instances = [];
+    this._registerInstance = function(instance, handle) {
+      handle || (handle = ionic.Utils.nextUid());
+
+      instance.$$delegateHandle = handle;
+      instances.push(instance);
+
+      return function deregister() {
+        var index = instances.indexOf(instance);
+        if (index !== -1) {
+          instances.splice(index, 1);
+        }
+      };
+    };
+
+    this.$getByHandle = function(handle) {
+      if (!handle) {
+        return delegate;
+      }
+      return new InstanceForHandle(handle);
+    };
+
+    /*
+     * Creates a new object that will have all the methodNames given,
+     * and call them on the given the controller instance matching given
+     * handle.
+     * The reason we don't just let $getByHandle return the controller instance
+     * itself is that the controller instance might not exist yet.
+     *
+     * We want people to be able to do
+     * `var instance = $ionicScrollDelegate.$getByHandle('foo')` on controller
+     * instantiation, but on controller instantiation a child directive
+     * may not have been compiled yet!
+     *
+     * So this is our way of solving this problem: we create an object
+     * that will only try to fetch the controller with given handle
+     * once the methods are actually called.
+     */
+    function InstanceForHandle(handle) {
+      this.handle = handle;
+    }
+    methodNames.forEach(function(methodName) {
+      InstanceForHandle.prototype[methodName] = function() {
+        var handle = this.handle;
+        var instancesToUse = instances.filter(function(instance) {
+          return instance.$$delegateHandle === handle;
+        });
+        if (!instancesToUse.length) {
+          return $log.warn(
+            'Delegate for handle "'+this.handle+'" could not find a',
+            'corresponding element with delegate-handle="'+this.handle+'"!',
+            methodName, 'was not called!');
+        }
+        return callMethod(instancesToUse, methodName, arguments);
+      };
+      delegate[methodName] = function() {
+        return callMethod(instances, methodName, arguments);
+      };
+
+      function callMethod(instancesToUse, methodName, args) {
+        var finalResult;
+        var result;
+        instancesToUse.forEach(function(instance, index) {
+          result = instance[methodName].apply(instance, args);
+          //Make it so the first result is the one returned
+          if (index === 0) {
+            finalResult = result;
+          }
+        });
+        return finalResult;
+      }
+    });
+  }];
+}
+
 angular.module('ionic.service.actionSheet', ['ionic.service.templateLoad', 'ionic.service.platform', 'ionic.ui.actionSheet', 'ngAnimate'])
 
 /**
@@ -405,6 +478,7 @@ angular.module('ionic.service.loading', ['ionic.ui.loading'])
      * @returns {object} A shown loader with the following methods:
      *  - `hide()` - Hides the loader.
      *  - `show()` - Shows the loader.
+     *  - `setContent(string)` - Sets the html content of the loader.
      */
     show: function(opts) {
       var defaults = {
@@ -452,7 +526,6 @@ angular.module('ionic.service.modal', ['ionic.service.templateLoad', 'ionic.serv
  * @ngdoc service
  * @name $ionicModal
  * @module ionic
- * @controller ionicModal
  * @description
  * The Modal is a content pane that can go over the user's main view
  * temporarily.  Usually used for making a choice or editing an item.
@@ -683,7 +756,6 @@ angular.module('ionic.service.platform', [])
  * @ngdoc service
  * @name $ionicPlatform
  * @module ionic
- * @group utilities
  * @description
  * An angular abstraction of {@link ionic.utility:ionic.Platform}.
  *
@@ -869,8 +941,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         console.log('Tapped!', res);
       }, function(err) {
         console.log('Err:', err);
-      }, function(msg) {
-        console.log('message:', msg);
+      }, function(popup) {
+        // If you need to access the popup directly, do it in the notify method
+        // This is also where you can programatically close the popup:
+        // popup.close();
       });
 
       // A confirm dialog
@@ -922,7 +996,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   });
   ```
 
- 
+
  */
 .factory('$ionicPopup', ['$rootScope', '$q', '$document', '$compile', '$timeout', '$ionicTemplateLoader',
   function($rootScope, $q, $document, $compile, $timeout, $ionicTemplateLoader) {
@@ -947,6 +1021,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     }
   };
 
+  var focusLastButton = function(popup) {
+    var buttons, lastButton;
+    buttons = popup.el.querySelectorAll('button');
+    lastButton = buttons[buttons.length-1];
+    if(lastButton) {
+      lastButton.focus();
+    }
+  }
+
   // Show a single popup
   var showSinglePopup = function(popup, opts) {
     var _this = this;
@@ -957,6 +1040,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+
+      focusLastButton(popup);
     });
   };
 
@@ -966,6 +1051,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
       popup.el.classList.remove('popup-hidden');
       popup.el.classList.add('popup-showing');
       popup.el.classList.add('active');
+      focusLastButton(popup);
     });
   };
 
@@ -1003,11 +1089,15 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
     var el = $compile('<ion-popup-backdrop></ion-popup-backdrop>')($rootScope.$new(true));
     $document[0].body.appendChild(el[0]);
     backdropEl = el;
+    $document[0].body.classList.add('popup-open');
   };
 
   // Remove the backdrop element
   var removeBackdrop = function() {
     backdropEl.remove();
+    $timeout(function(){
+      $document[0].body.classList.remove('popup-open');
+    }, 300);
   };
 
   // Push the new popup onto the stack with the given data and scope.
@@ -1054,7 +1144,10 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   var constructPopupOnScope = function(element, scope) {
     var popup = {
       el: element[0],
-      scope: scope
+      scope: scope,
+      close: function() {
+        popAndRemove(this);
+      }
     };
 
     scope.popup = popup;
@@ -1063,8 +1156,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   }
 
   var buildPopupTemplate = function(opts, content) {
-    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">' 
-        + (content || '') + 
+    return '<ion-popup title="' + opts.title + '" buttons="buttons" on-button-tap="onButtonTap(button, event)" on-close="onClose(button, result, event)">'
+        + (content || '') +
       '</ion-popup>';
   };
 
@@ -1120,18 +1213,25 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
   };
 
 
+
   // Public API
   return {
+    /**
+     * @private
+     */
     showPopup: function(data) {
       var q = $q.defer();
 
       createPopup(data, q).then(function(popup, scope) {
 
+        // Send the popup back
+        q.notify(popup);
+
         // We constructed the popup, push it on the stack and show it
         pushAndShow(popup, data);
 
       }, function(err) {
-        console.error('Unable to load popup:', err);
+        void 0;
       });
 
       return q.promise;
@@ -1142,7 +1242,8 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @name $ionicPopup#show
      * @description show a complex popup. This is the master show function for all popups
      * @param {data} object The options for showing a popup, of the form:
-     *
+     * @returns {Promise} an Angular promise which resolves when the user enters the correct data, and also
+     * sends the constructed popup in the notify function (for programatic closing, as shown in the example above).
      * ```
      * {
      *   content: '', // String. The content of the popup
@@ -1150,7 +1251,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *   subTitle: '', // String (optional). The sub-title of the popup
      *   templateUrl: '', // URL String (optional). The URL of a template to load as the content (instead of the `content` field)
      *   scope: null, // Scope (optional). A scope to apply to the popup content (for using ng-model in a template, for example)
-     *   buttons: 
+     *   buttons:
      *     [
      *       {
      *         text: 'Cancel',
@@ -1173,7 +1274,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *         }
      *       }
      *     ]
-     * 
+     *
      * }
      * ```
     */
@@ -1190,7 +1291,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      *
      * ```javascript
      *  $ionicPopup.alert({
-     *    title: 'Hey!;,
+     *    title: 'Hey!',
      *    content: 'Don\'t do that!'
      *  }).then(function(res) {
      *    // Accepted
@@ -1283,7 +1384,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
      * @ngdoc method
      * @name $ionicPopup#prompt
      * @description show a simple prompt dialog.
-     * 
+     *
      * ```javascript
      *  $ionicPopup.prompt({
      *    title: 'Password Check',
@@ -1336,7 +1437,7 @@ angular.module('ionic.service.popup', ['ionic.service.templateLoad'])
         ]
       });
     }
-    
+
   };
 }]);
 
@@ -1484,6 +1585,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           currentView = viewHistory.currentView,
           backView = viewHistory.backView,
           forwardView = viewHistory.forwardView,
+          nextViewOptions = this.nextViewOptions(),
           rsp = {
             viewId: null,
             navAction: null,
@@ -1517,7 +1619,7 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
         // they went back one, set the old current view as a forward view
         rsp.viewId = backView.viewId;
         rsp.navAction = 'moveBack';
-        currentView.scrollValues = {}; //when going back, erase scrollValues
+        rsp.viewId = backView.viewId;
         if(backView.historyId === currentView.historyId) {
           // went back in the same history
           rsp.navDirection = 'back';
@@ -1591,13 +1693,23 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
           stateName: this.getCurrentStateName(),
           stateParams: this.getCurrentStateParams(),
           url: $location.url(),
-          scrollValues: null
         });
 
+        if (rsp.navAction == 'moveBack') {
+          //moveBack(from, to);
+          $rootScope.$emit('$viewHistory.viewBack', currentView.viewId, rsp.viewId);
+        }
+
         // add the new view to this history's stack
         hist.stack.push(viewHistory.views[rsp.viewId]);
       }
 
+      if(nextViewOptions) {
+        if(nextViewOptions.disableAnimate) rsp.navDirection = null;
+        if(nextViewOptions.disableBack) viewHistory.views[rsp.viewId].backViewId = null;
+        this.nextViewOptions(null);
+      }
+
       this.setNavViews(rsp.viewId);
 
       hist.cursor = viewHistory.currentView.index;
@@ -1747,6 +1859,14 @@ angular.module('ionic.service.view', ['ui.router', 'ionic.service.platform'])
       return { historyId: 'root', scope: $rootScope };
     },
 
+    nextViewOptions: function(opts) {
+      if(arguments.length) {
+        this._nextOpts = opts;
+      } else {
+        return this._nextOpts;
+      }
+    },
+
     getRenderer: function(navViewElement, navViewAttrs, navViewScope) {
       var service = this;
       var registerData;
@@ -1902,293 +2022,29 @@ angular.module('ionic.decorator.location', [])
  * @private
  */
 .config(['$provide', function($provide) {
-  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
-}]);
-
-function $LocationDecorator($location, $timeout) {
-
-  $location.__hash = $location.hash;
-  //Fix: when window.location.hash is set, the scrollable area
-  //found nearest to body's scrollTop is set to scroll to an element
-  //with that ID.
-  $location.hash = function(value) {
-    if (angular.isDefined(value)) {
-      $timeout(function() {
-        var scroll = document.querySelector('.scroll-content');
-        if (scroll)
-          scroll.scrollTop = 0;
-      }, 0, false);
-    }
-    return $location.__hash(value);
-  };
-
-  return $location;
-}
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.scrollDelegate', [])
-
-/**
- * @ngdoc service
- * @name $ionicScrollDelegate
- * @module ionic
- * @group page layout
- * @description
- * Allows you to have some control over a scrollable area (created by an
- * {@link ionic.directive:ionContent} or {@link ionic.directive:ionScroll}
- * directive).
- *
- * Inject it into a controller, and its methods will send messages to the nearest scrollView and all of its children.
- *
- * @usage
- * ```html
- * <ion-content ng-controller="MyController">
- *   <button class="button" ng-click="scrollToTop()">
- *     Scroll To Top
- *   </button>
- * </ion-content>
- * ```
- * ```js
- * function MyController($scope, $ionicScrollDelegate) {
- *   $scope.scrollToTop = function() {
- *     $ionicScrollDelegate.scrollTop();
- *   };
- * }
- * ```
- */
-.factory('$ionicScrollDelegate', ['$rootScope', '$timeout', '$q', '$anchorScroll', '$location', '$document', function($rootScope, $timeout, $q, $anchorScroll, $location, $document) {
-  return {
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollTop
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTop: function(animate) {
-      $rootScope.$broadcast('scroll.scrollTop', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scrollBottom
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollBottom: function(animate) {
-      $rootScope.$broadcast('scroll.scrollBottom', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#scroll
-     * @param {number} left The x-value to scroll to.
-     * @param {number} top The y-value to scroll to.
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    scrollTo: function(left, top, animate) {
-      $rootScope.$broadcast('scroll.scrollTo', left, top, animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#anchorScroll
-     * @description Tell the scrollView to scroll to the element with an id
-     * matching window.location.hash.
-     *
-     * If no matching element is found, it will scroll to top.
-     *
-     * @param {boolean=} shouldAnimate Whether the scroll should animate.
-     */
-    anchorScroll: function(animate) {
-      $rootScope.$broadcast('scroll.anchorScroll', animate);
-    },
-    /**
-     * @ngdoc method
-     * @name $ionicScrollDelegate#resize
-     * @description Tell the scrollView to recalculate the size of its container.
-     */
-    resize: function() {
-      $rootScope.$broadcast('scroll.resize');
-    },
-    /**
-     * @private
-     */
-    tapScrollToTop: function(element, animate) {
-      var _this = this;
-      if (!angular.isDefined(animate)) {
-        animate = true;
-      }
-
-      ionic.on('tap', function(e) {
-        var target = e.target;
-        //Don't scroll to top for a button click
-        if (ionic.DomUtil.getParentOrSelfWithClass(target, 'button')) {
-          return;
-        }
-
-        var el = element[0];
-        var bounds = el.getBoundingClientRect();
-
-        if(ionic.DomUtil.rectContains(e.gesture.touches[0].pageX, e.gesture.touches[0].pageY, bounds.left, bounds.top, bounds.left + bounds.width, bounds.top + 20)) {
-          _this.scrollTop(animate);
-        }
-      }, element[0]);
-    },
-
-    finishRefreshing: function($scope) {
-      $scope.$broadcast('scroll.refreshComplete');
-    },
-
-    /**
-     * @private
-     * Attempt to get the current scroll view in scope (if any)
-     *
-     * Note: will not work in an isolated scope context.
-     */
-    getScrollView: function($scope) {
-      return $scope.scrollView;
-    },
-
-    /**
-     * @private
-     * Register a scope and scroll view for scroll event handling.
-     * $scope {Scope} the scope to register and listen for events
-     */
-    register: function($scope, $element, scrollView) {
-
-      var scrollEl = $element[0];
-
-      function scrollViewResize() {
-        // Run the resize after this digest
-        return $timeout(function() {
-          scrollView.resize();
-        });
-      }
-
-      $element.on('scroll', function(e) {
-        var detail = (e.originalEvent || e).detail || {};
-
-        $scope.$onScroll && $scope.$onScroll({
-          event: e,
-          scrollTop: detail.scrollTop || 0,
-          scrollLeft: detail.scrollLeft || 0
-        });
-
-      });
-
-      $scope.$parent.$on('scroll.resize', scrollViewResize);
-
-      // Called to stop refreshing on the scroll view
-      $scope.$parent.$on('scroll.refreshComplete', function(e) {
-        scrollView.finishPullToRefresh();
-      });
-
-      $scope.$parent.$on('scroll.anchorScroll', function(e, animate) {
-        scrollViewResize().then(function() {
-          var hash = $location.hash();
-          var elm;
-          if (hash && (elm = document.getElementById(hash)) ) {
-            var scroll = ionic.DomUtil.getPositionInParent(elm, scrollEl);
-            scrollView.scrollTo(scroll.left, scroll.top, !!animate);
-          } else {
-            scrollView.scrollTo(0,0, !!animate);
-          }
-        });
-      });
-
-      $scope.$parent.$on('scroll.scrollTo', function(e, left, top, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(left, top, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollTop', function(e, animate) {
-        scrollViewResize().then(function() {
-          scrollView.scrollTo(0, 0, !!animate);
-        });
-      });
-      $scope.$parent.$on('scroll.scrollBottom', function(e, animate) {
-        scrollViewResize().then(function() {
-          var sv = scrollView;
-          if (sv) {
-            var max = sv.getScrollMax();
-            sv.scrollTo(max.left, max.top, !!animate);
-          }
-        });
-      });
-    }
-  };
-}]);
-
-})(ionic);
-
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.sideMenuDelegate', [])
-
-.factory('$ionicSideMenuDelegate', ['$rootScope', '$timeout', '$q', function($rootScope, $timeout, $q) {
-  return {
-    getSideMenuController: function($scope) {
-      return $scope.sideMenuController;
-    },
-    close: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.close();
-      }
-    },
-    toggleLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleLeft();
-      }
-    },
-    toggleRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.toggleRight();
-      }
-    },
-    openLeft: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(100);
-      }
-    },
-    openRight: function($scope) {
-      if($scope.sideMenuController) {
-        $scope.sideMenuController.openPercentage(-100);
+  function $LocationDecorator($location, $timeout) {
+
+    $location.__hash = $location.hash;
+    //Fix: when window.location.hash is set, the scrollable area
+    //found nearest to body's scrollTop is set to scroll to an element
+    //with that ID.
+    $location.hash = function(value) {
+      if (angular.isDefined(value)) {
+        $timeout(function() {
+          var scroll = document.querySelector('.scroll-content');
+          if (scroll)
+            scroll.scrollTop = 0;
+        }, 0, false);
       }
-    }
-  };
-}]);
-
-})();
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.service.slideBoxDelegate', [])
-
-.factory('$ionicSlideBoxDelegate', ['$rootScope', '$timeout', function($rootScope, $timeout) {
-  return {
-    /**
-     * Trigger a slidebox to update and resize itself
-     */
-    update: function(animate) {
-      $rootScope.$broadcast('slideBox.update');
-    },
+      return $location.__hash(value);
+    };
 
-    register: function($scope, $element) {
-      $scope.$parent.$on('slideBox.update', function(e) {
-        if(e.defaultPrevented) {
-          return;
-        }
-        $timeout(function() {
-          $scope.$parent.slideBoxController.setup();
-        });
-        e.preventDefault();
-      });
-    }
-  };
+    return $location;
+  }
+  
+  $provide.decorator('$location', ['$delegate', '$timeout', $LocationDecorator]);
 }]);
 
-})(ionic);
-
 (function() {
 'use strict';
 
@@ -2251,124 +2107,144 @@ angular.module('ionic.ui.actionSheet', [])
 
 angular.module('ionic.ui.header', ['ngAnimate', 'ngSanitize'])
 
-.directive('barHeader', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'C',
-    link: function($scope, $element, $attr) {
-      // We want to scroll to top when the top of this element is clicked
-      $ionicScrollDelegate.tapScrollToTop($element);
-    }
-  };
-}])
+.directive('ionNavBar', tapScrollToTopDirective())
+.directive('ionHeaderBar', tapScrollToTopDirective())
 
 /**
  * @ngdoc directive
  * @name ionHeaderBar
  * @module ionic
  * @restrict E
+ *
  * @description
- * While Ionic provides simple Header and Footer bars that can be created through
- * HTML and CSS alone, Header bars specifically can be extended in order to
- * provide dynamic layout features such as auto-title centering and animation.
- * They are also used by the Views and Navigation Controller to animate a title
- * on navigation and toggle a back button.
- *
- * The main header bar feature provided is auto title centering.
- * In this situation, the title text will center itself until either the
- * left or right button content is too wide for the label to center.
- * In that case, it will slide left or right until it can fit.
- * You can also align the title left for a more Android-friendly header.
- *
- * Using two-way data binding, the header bar will automatically
- * readjust the heading title alignment when the title or buttons change.
- *
- * @param {string} title The title use on the headerBar.
- * @param {expression=} leftButtons Point to an array of buttons to put on the left of the bar.
- * @param {expression=} rightButtons Point to an array of buttons to put on the right of the bar.
- * @param {string=} type The type of the bar, for example 'bar-positive'.
- * @param {string=} align Where to align the title. 'left', 'right', or 'center'.  Defaults to 'center'.
+ * Adds a fixed header bar above some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
  *
  * @usage
  * ```html
- * <ion-header-bar
- *  title="{{myTitle}}"
- *  left-buttons="leftButtons"
- *  right-buttons="rightButtons"
- *  type="bar-positive"
- *  align-title="center">
+ * <ion-header-bar align-title="left" class="bar-positive">
+ *   <div class="buttons">
+ *     <button class="button" ng-click="doSomething()">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons">
+ *     <button class="button">Right Button</button>
+ *   </div>
  * </ion-header-bar>
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
  * ```
- *
  */
-.directive('ionHeaderBar', ['$ionicScrollDelegate', function($ionicScrollDelegate) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<header class="bar bar-header">\
-                <div class="buttons">\
-                  <button ng-repeat="button in leftButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-                <h1 class="title" ng-bind-html="title"></h1>\
-                <div class="buttons">\
-                  <button ng-repeat="button in rightButtons" class="button no-animation" ng-class="button.type" ng-click="button.tap($event, $index)" ng-bind-html="button.content">\
-                  </button>\
-                </div>\
-              </header>',
+.directive('ionHeaderBar', barDirective(true))
 
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      type: '@',
-      alignTitle: '@'
-    },
-    link: function($scope, $element, $attr) {
-      var hb = new ionic.views.HeaderBar({
-        el: $element[0],
-        alignTitle: $scope.alignTitle || 'center'
-      });
+/**
+ * @ngdoc directive
+ * @name ionFooterBar
+ * @module ionic
+ * @restrict E
+ *
+ * @description
+ * Adds a fixed footer bar below some content.
+ *
+ * @param {string=} align-title Where to align the title.
+ * Avaialble: 'left', 'right', or 'center'.  Defaults to 'center'.
+ *
+ * @usage
+ * ```html
+ * <ion-content>
+ *   Some content!
+ * </ion-content>
+ * <ion-footer-bar align-title="left" class="bar-assertive">
+ *   <div class="buttons">
+ *     <button class="button">Left Button</button>
+ *   </div>
+ *   <h1 class="title">Title!</h1>
+ *   <div class="buttons" ng-click="doSomething()">
+ *     <button class="button">Right Button</button>
+ *   </div>
+ * </ion-footer-bar>
+ * ```
+ */
+.directive('ionFooterBar', barDirective(false));
 
-      $element.addClass($scope.type);
+function tapScrollToTopDirective() {
+  return ['$ionicScrollDelegate', function($ionicScrollDelegate) {
+    return {
+      restrict: 'E',
+      link: function($scope, $element, $attr) {
+        ionic.on('tap', onTap, $element[0]);
+        $scope.$on('$destroy', function() {
+          ionic.off('tap', onTap, $element[0]);
+        });
 
-      $scope.headerBarView = hb;
+        function onTap(e) {
+          if (ionic.DomUtil.getParentOrSelfWithClass(e.target, 'button', 4)) {
+            return;
+          }
+          var touch = e.gesture && e.gesture.touches[0] || e.detail.touches[0];
+          var bounds = $element[0].getBoundingClientRect();
+          if (ionic.DomUtil.rectContains(
+            touch.pageX, touch.pageY,
+            bounds.left, bounds.top - 20,
+            bounds.left + bounds.width, bounds.top + bounds.height
+          )) {
+            $ionicScrollDelegate.scrollTop(true);
+          }
+        }
+      }
+    };
+  }];
+}
 
-      $scope.$watchCollection('leftButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
 
-      $scope.$watchCollection('rightButtons', function(val) {
-        // Resize the title since the buttons have changed
-        hb.align();
-      });
-
-      $scope.$watch('title', function(val) {
-        // Resize the title since the title has changed
-        hb.align();
-      });
-    }
-  };
-}])
-
-.directive('ionFooterBar', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    template: '<footer class="bar bar-footer" ng-transclude>\
-              </footer>',
+function barDirective(isHeader) {
+  return [function() {
+    return {
+      restrict: 'E',
+      compile: function($element, $attr) {
+        $element.addClass(isHeader ? 'bar bar-header' : 'bar bar-footer');
+
+        return { pre: prelink };
+        function prelink($scope, $element, $attr) {
+          var hb = new ionic.views.HeaderBar({
+            el: $element[0],
+            alignTitle: $attr.alignTitle || 'center'
+          });
 
-    scope: {
-      type: '@',
-    },
+          var el = $element[0];
+          //just incase header is on rootscope
+          var parentScope = $scope.$parent || $scope;
 
-    link: function($scope, $element, $attr) {
-      $element.addClass($scope.type);
-    }
-  };
-});
+          if (isHeader) {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubheader = value.indexOf('bar-subheader') !== -1;
+              parentScope.$hasHeader = !isSubheader;
+              parentScope.$hasSubheader = isSubheader;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasHeader = parentScope.$hasSubheader = null;
+            });
+          } else {
+            $scope.$watch(function() { return el.className; }, function(value) {
+              var isSubfooter = value.indexOf('bar-subfooter') !== -1;
+              parentScope.$hasFooter = !isSubfooter;
+              parentScope.$hasSubfooter = isSubfooter;
+            });
+            $scope.$on('$destroy', function() {
+              parentScope.$hasFooter = parentScope.$hasSubfooter = null;
+            });
+            $scope.$watch('$hasTabs', function(val) {
+              $element.toggleClass('has-tabs', !!val);
+            });
+          }
+        }
+      }
+    };
+  }];
+}
 
 })(ionic);
 
@@ -2428,7 +2304,7 @@ angular.module('ionic.ui.checkbox', [])
 (function() {
 'use strict';
 
-angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
+angular.module('ionic.ui.content', ['ionic.ui.scroll'])
 
 /**
  * Panel is a simple 100% width and height, fixed panel. It's meant for content to be
@@ -2438,7 +2314,6 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionPane
  * @module ionic
- * @group page layout
  * @restrict E
  *
  * @description A simple container that fits content, with no side effects.  Adds the 'pane' class to the element.
@@ -2456,12 +2331,12 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * @ngdoc directive
  * @name ionContent
  * @module ionic
- * @group page layout
- * @groupMainItem
+ * @delegate ionic.service:$ionicScrollDelegate
+ * @restrict E
  *
  * @description
  * The ionContent directive provides an easy to use content area that can be configured
- * to use Ionic's custom Scroll View, or the built in overflow scorlling of the browser.
+ * to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
  *
  * While we recommend using the custom Scroll features in Ionic in most cases, sometimes
  * (for performance reasons) only the browser's native overflow scrolling will suffice,
@@ -2472,52 +2347,48 @@ angular.module('ionic.ui.content', ['ionic.ui.service', 'ionic.ui.scroll'])
  * directive, and infinite scrolling with the {@link ionic.directive:ionInfiniteScroll}
  * directive.
  *
- * @restrict E
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
+ * @param {boolean=} padding Whether to add padding to the content.
+ * of the content.  Defaults to true on iOS, false on Android.
  * @param {boolean=} scroll Whether to allow scrolling of content.  Defaults to true.
  * @param {boolean=} overflow-scroll Whether to use overflow-scrolling instead of
  * Ionic scroll.
- * @param {boolean=} padding Whether to add padding to the content.
- * @param {boolean=} has-header Whether to offset the content for a header bar.
- * @param {boolean=} has-subheader Whether to offset the content for a subheader bar.
- * @param {boolean=} has-footer Whether to offset the content for a footer bar.
  * @param {boolean=} has-bouncing Whether to allow scrolling to bounce past the edges
  * of the content.  Defaults to true on iOS, false on Android.
  * @param {expression=} on-scroll Expression to evaluate when the content is scrolled.
  * @param {expression=} on-scroll-complete Expression to evaluate when a scroll action completes.
  */
 .directive('ionContent', [
-  '$parse',
   '$timeout',
-  '$ionicScrollDelegate',
   '$controller',
   '$ionicBind',
-function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    transclude: true,
     require: '^?ionNavView',
     scope: true,
-    template:
-    '<div class="scroll-content">' +
-      '<div class="scroll"></div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(attr.hasHeader == "true") { element.addClass('has-header'); }
-      if(attr.hasSubheader == "true") { element.addClass('has-subheader'); }
-      if(attr.hasFooter == "true") { element.addClass('has-footer'); }
-      if(attr.hasTabs == "true") { element.addClass('has-tabs'); }
-      if(attr.padding == "true") { element.find('div').addClass('padding'); }
+    compile: function(element, attr) {
+      element.addClass('scroll-content');
 
-      return {
-        //Prelink <ion-content> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr, navViewCtrl) {
-        var clone, sc, scrollView, scrollCtrl,
-          scrollContent = angular.element($element[0].querySelector('.scroll'));
+        $scope.$watch(function() {
+          return ($scope.$hasHeader ? ' has-header' : '')  +
+            ($scope.$hasSubheader ? ' has-subheader' : '') +
+            ($scope.$hasFooter ? ' has-footer' : '') +
+            ($scope.$hasSubfooter ? ' has-subfooter' : '') +
+            ($scope.$hasTabs ? ' has-tabs' : '') +
+            ($scope.$hasTabsTop ? ' has-tabs-top' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
 
         $ionicBind($scope, $attr, {
           $onScroll: '&onScroll',
@@ -2534,16 +2405,22 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           scrollEventInterval: '@'
         });
 
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
+        }
+
         if ($scope.scroll === "false") {
           //do nothing
         } else if(attr.overflowScroll === "true") {
           $element.addClass('overflow-scroll');
         } else {
-
-          scrollCtrl = $controller('$ionicScroll', {
+          $controller('$ionicScroll', {
             $scope: $scope,
             scrollViewOptions: {
               el: $element[0],
+              delegateHandle: attr.delegateHandle,
               bouncing: $scope.$eval($scope.hasBouncing),
               startX: $scope.$eval($scope.startX) || 0,
               startY: $scope.$eval($scope.startY) || 0,
@@ -2560,33 +2437,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
               }
             }
           });
-          //Publish scrollView to parent so children can access it
-          scrollView = $scope.$parent.scrollView = scrollCtrl.scrollView;
-
-          $scope.$on('$viewContentLoaded', function(e, viewHistoryData) {
-            viewHistoryData || (viewHistoryData = {});
-            var scroll = viewHistoryData.scrollValues;
-            if (scroll) {
-              $timeout(function() {
-                scrollView.scrollTo(+scroll.left || null, +scroll.top || null);
-              }, 0);
-            }
-
-            //Save scroll onto viewHistoryData when scope is destroyed
-            $scope.$on('$destroy', function() {
-              viewHistoryData.scrollValues = scrollView.getValues();
-            });
-          });
-
         }
 
-        transclude($scope, function(clone) {
-          if (scrollCtrl) {
-            clone.data('$$ionicScrollController', scrollCtrl);
-          }
-          scrollContent.append(clone);
-        });
-
       }
     }
   };
@@ -2597,7 +2449,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @name ionRefresher
  * @module ionic
  * @restrict E
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @description
  * Allows you to add pull-to-refresh to a scrollView.
@@ -2608,19 +2459,8 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * When refreshing is complete, $broadcast the 'scroll.refreshComplete' event
  * from your controller.
  *
- * @param {expression=} on-refresh Called when the user pulls down enough and lets go
- * of the refresher.
- * @param {expression=} on-pulling Called when the user starts to pull down
- * on the refresher.
- * @param {string=} pulling-icon The icon to display while the user is pulling down.
- * Default: 'ion-arrow-down-c'.
- * @param {string=} pulling-text The text to display while the user is pulling down.
- * @param {string=} refreshing-icon The icon to display after user lets go of the
- * refresher.
- * @param {string=} refreshing-text The text to display after the user lets go of
- * the refresher.
- *
  * @usage
+ *
  * ```html
  * <ion-content ng-controller="MyController">
  *   <ion-refresher
@@ -2645,6 +2485,19 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  *   };
  * });
  * ```
+ *
+ * @param {expression=} on-refresh Called when the user pulls down enough and lets go
+ * of the refresher.
+ * @param {expression=} on-pulling Called when the user starts to pull down
+ * on the refresher.
+ * @param {string=} pulling-icon The icon to display while the user is pulling down.
+ * Default: 'ion-arrow-down-c'.
+ * @param {string=} pulling-text The text to display while the user is pulling down.
+ * @param {string=} refreshing-icon The icon to display after user lets go of the
+ * refresher.
+ * @param {string=} refreshing-text The text to display after the user lets go of
+ * the refresher.
+ *
  */
 .directive('ionRefresher', ['$ionicBind', function($ionicBind) {
   return {
@@ -2677,7 +2530,7 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
           $onPulling: '&onPulling'
         });
 
-        scrollCtrl.setRefresher($scope, $element[0]);
+        scrollCtrl._setRefresher($scope, $element[0]);
         $scope.$on('scroll.refreshComplete', function() {
           $element[0].classList.remove('active');
           scrollCtrl.scrollView.finishPullToRefresh();
@@ -2691,7 +2544,6 @@ function($parse, $timeout, $ionicScrollDelegate, $controller, $ionicBind) {
  * @ngdoc directive
  * @name ionInfiniteScroll
  * @module ionic
- * @group page layout
  * @parent ionic.directive:ionContent, ionic.directive:ionScroll
  * @restrict E
  *
@@ -2857,12 +2709,12 @@ angular.module('ionic.ui.list', ['ngAnimate'])
     },
 
     template: '<div class="item item-complex">\
-            <div class="item-edit" ng-if="deleteClick !== undefined">\
+            <div class="item-left-edit item-delete" ng-if="deleteClick !== undefined">\
               <button class="button button-icon icon" ng-class="deleteIconClass" ng-click="deleteClick()" ion-stop-event="click"></button>\
             </div>\
             <a class="item-content" ng-href="{{ href }}" ng-transclude></a>\
-            <div class="item-drag" ng-if="reorderIconClass !== undefined">\
-              <button data-ionic-action="reorder" class="button button-icon icon" ng-class="reorderIconClass"></button>\
+            <div class="item-right-edit item-reorder" ng-if="reorderIconClass !== undefined">\
+              <button data-ionic-action="reorder" data-prevent-scroll="true" class="button button-icon icon" ng-class="reorderIconClass"></button>\
             </div>\
             <div class="item-options" ng-if="itemOptionButtons">\
              <button ng-click="b.onTap(item, b)" ion-stop-event="click" class="button" ng-class="b.type" ng-repeat="b in itemOptionButtons" ng-bind="b.text"></button>\
@@ -2898,22 +2750,24 @@ angular.module('ionic.ui.list', ['ngAnimate'])
           $scope.deleteClick = function() {
             if($attr.onDelete) {
               // this item has an on-delete attribute
-              $scope.onDelete({ item: $scope.item });
+              $scope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             } else if($parentAttrs.onDelete) {
               // run the parent list's onDelete method
               // if it doesn't exist nothing will happen
-              $parentScope.onDelete({ item: $scope.item });
+              $parentScope.onDelete({ item: $scope.item, index: $scope.$parent.$index });
             }
           };
 
           // Set which icons to use for deleting
           $scope.deleteIconClass = $scope.deleteIcon || $parentScope.deleteIcon || 'ion-minus-circled';
+          $element.addClass('item-left-editable');
         }
       }
 
       // set the reorder Icon Class only if the item or list set can-reorder="true"
       if(($attr.canReorder ? $scope.canReorder : $parentScope.canReorder) === "true") {
         $scope.reorderIconClass = $scope.reorderIcon || $parentScope.reorderIcon || 'ion-navicon';
+        $element.addClass('item-right-editable');
       }
 
       // Set the option buttons which can be revealed by swiping to the left
@@ -2923,6 +2777,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
         if(typeof $scope.itemOptionButtons === "undefined") {
           $scope.itemOptionButtons = $parentScope.optionButtons();
         }
+        $element.addClass('item-swipeable');
       }
 
     }
@@ -2996,7 +2851,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       reorderIcon: '@'
     },
 
-    template: '<div class="list" ng-class="{\'list-editing\': showDelete, \'list-reordering\': showReorder}" ng-transclude></div>',
+    template: '<div class="list" ng-class="{\'list-left-editing\': showDelete, \'list-right-editing\': showReorder}" ng-transclude></div>',
 
     controller: ['$scope', '$attrs', function($scope, $attrs) {
       this.scope = $scope;
@@ -3005,6 +2860,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
 
     link: function($scope, $element, $attr, ionicScrollCtrl) {
       $scope.listView = new ionic.views.ListView({
+        canSwipe: $scope.canSwipe !== "false" && !!$scope.optionButtons(),
         el: $element[0],
         listEl: $element[0].children[0],
         scrollEl: ionicScrollCtrl && ionicScrollCtrl.element,
@@ -3023,6 +2879,7 @@ angular.module('ionic.ui.list', ['ngAnimate'])
       var destroyShowReorderWatch = $scope.$watch('showReorder', function(val) {
         if(val) {
           $element[0].classList.add('item-options-hide');
+          $scope.listView && $scope.listView.clearDragEffects();
         } else if(val === false) {
           // false checking is because it could be undefined
           // if its undefined then we don't care to do anything
@@ -3059,7 +2916,7 @@ angular.module('ionic.ui.loading', [])
     link: function($scope, $element){
       $element.addClass($scope.animation || '');
     },
-    template: '<div class="loading-backdrop" ng-class="{enabled: showBackdrop}">' +
+    template: '<div class="loading-backdrop" ng-class="{\'show-backdrop\': showBackdrop}">' +
                 '<div class="loading" ng-transclude>' +
                 '</div>' +
               '</div>'
@@ -3090,146 +2947,582 @@ angular.module('ionic.ui.modal', [])
 
 })();
 
-(function() {
-angular.module('ionic.ui.navAnimation', [])
+
+angular.module('ionic.ui.navBar', ['ionic.service.view', 'ngSanitize'])
+
 /**
- * @ngdoc directive
- * @name ionNavAnimation
+ * @ngdoc service
+ * @name $ionicNavBarDelegate
  * @module ionic
- * @restrict A
- * @parent ionic.directive:ionNavView
- *
  * @description
- * When used under an {@link ionic.directive:ionNavView} and on an `<a>` element,
- * allows you to set the animation all clicks on that link within the navView use.
+ * Delegate for controlling the {@link ionic.directive:ionNavBar} directive.
  *
  * @usage
+ *
  * ```html
- * <ion-nav-view>
- *   <ion-view>
- *     <ion-content>
- *       <a href="#/some-page" ion-nav-animation="slide-in-up">
- *         Click me and #/some-page will transition in with the slide-in-up animation!
- *       </a>
- *     </ion-content>
- *   </ion-view>
- * </ion-nav-view>
+ * <body ng-controller="MyCtrl">
+ *   <ion-nav-bar>
+ *     <button ng-click="setNavTitle('banana')">
+ *       Set title to banana!
+ *     </button>
+ *   </ion-nav-bar>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.setNavTitle = function(title) {
+ *     $ionicNavBarDelegate.setTitle(title);
+ *   }
+ * }
  * ```
- *
- * @param {string} ion-nav-animation The animation to make the parent ionNavView change pages with when clicking this element.
  */
-.directive('ionNavAnimation', function() {
-  return {
-    restrict: 'A',
-    require: '^?ionNavView',
-    link: function($scope, $element, $attrs, navViewCtrl) {
-      if (!navViewCtrl) {
-        return;
-      }
-      ionic.on('tap', function() {
-        navViewCtrl.setNextAnimation($attrs.ionNavAnimation);
-      }, $element[0]);
-    }
+.service('$ionicNavBarDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#back
+   * @description Goes back in the view history.
+   * @param {DOMEvent=} event The event object (eg from a tap event)
+   */
+  'back',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#align
+   * @description Aligns the title with the buttons in a given direction.
+   * @param {string=} direction The direction to the align the title text towards.
+   * Available: 'left', 'right', 'center'. Default: 'center'.
+   */
+  'align',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBackButton
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBackButton} should be shown
+   * (if it exists).
+   * @param {boolean} show Whether to show the back button.
+   */
+  'showBackButton',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#showBar
+   * @description
+   * Set whether the {@link ionic.directive:ionNavBar} should be shown.
+   * @param {boolean} show Whether to show the bar.
+   */
+  'showBar',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#setTitle
+   * @description
+   * Set the title for the {@link ionic.directive:ionNavBar}.
+   * @param {string} title The new title to show.
+   */
+  'setTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#changeTitle
+   * @description
+   * Change the title, transitioning the new title in and the old one out in a given direction.
+   * @param {string} title The new title to show.
+   * @param {string} direction The direction to transition the new title in.
+   * Available: 'forward', 'back'.
+   */
+  'changeTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getTitle
+   * @returns {string} The current title of the navbar.
+   */
+  'getTitle',
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#getPreviousTitle
+   * @returns {string} The previous title of the navbar.
+   */
+  'getPreviousTitle'
+  /**
+   * @ngdoc method
+   * @name $ionicNavBarDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * navBars with delegate-handle matching the given handle.
+   *
+   * Example: `$ionicNavBarDelegate.$getByHandle('myHandle').setTitle('newTitle')`
+   */
+]))
+
+.controller('$ionicNavBar', [
+  '$scope',
+  '$element',
+  '$attrs',
+  '$ionicViewService',
+  '$animate',
+  '$compile',
+  '$ionicNavBarDelegate',
+function($scope, $element, $attrs, $ionicViewService, $animate, $compile, $ionicNavBarDelegate) {
+  //Let the parent know about our controller too so that children of
+  //sibling content elements can know about us
+  $element.parent().data('$ionNavBarController', this);
+
+  var deregisterInstance = $ionicNavBarDelegate._registerInstance(this, $attrs.delegateHandle);
+
+  $scope.$on('$destroy', deregisterInstance);
+
+  var self = this;
+
+  this.leftButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.left-buttons')
+  );
+  this.rightButtonsElement = angular.element(
+    $element[0].querySelector('.buttons.right-buttons')
+  );
+
+  this.back = function(e) {
+    var backView = $ionicViewService.getBackView();
+    backView && backView.go();
+    e && (e.alreadyHandled = true);
+    return false;
   };
-});
-})();
 
+  this.align = function(direction) {
+    this._headerBarView.align(direction);
+  };
 
-(function() {
-'use strict';
+  this.showBackButton = function(show) {
+    $scope.backButtonShown = !!show;
+  };
 
-angular.module('ionic.ui.popup', [])
+  this.showBar = function(show) {
+    $scope.isInvisible = !show;
+  };
 
-/**
- * @private
- */
-.directive('ionPopupBackdrop', function() {
-  return {
-    restrict: 'E',
-    replace: true,
-    template: '<div class="popup-backdrop"></div>'
-  }
-})
+  this.setTitle = function(title) {
+    $scope.oldTitle = $scope.title;
+    $scope.title = title || '';
+  };
 
-/**
- * @private
- */
-.directive('ionPopup', ['$ionicBind', function($ionicBind) {
-  return {
-    restrict: 'E',
-    replace: true,
-    transclude: true,
-    scope: true,
-    link: function($scope, $element, $attr) {
-      $ionicBind($scope, $attr, {
-        title: '@',
-        buttons: '=',
-        $onButtonTap: '&onButtonTap',
-        $onClose: '&onClose'
-      });
+  this.changeTitle = function(title, direction) {
+    if ($scope.title === title) {
+      return false;
+    }
+    this.setTitle(title);
+    $scope.isReverse = direction == 'back';
+    $scope.shouldAnimate = !!direction;
 
-      $scope._buttonTapped = function(button, event) {
-        var result = button.onTap && button.onTap(event);
+    if (!$scope.shouldAnimate) {
+      //We're done!
+      this._headerBarView.align();
+    } else {
+      this._animateTitles();
+    }
+    return true;
+  };
 
-        // A way to return false
-        if(event.defaultPrevented) {
-          return $scope.$onClose({button: button, result: false, event: event });
-        }
+  this.getTitle = function() {
+    return $scope.title || '';
+  };
 
-        // Truthy test to see if we should close the window
-        if(result) {
-          return $scope.$onClose({button: button, result: result, event: event });
-        }
-        $scope.$onButtonTap({button: button, event: event});
-      }
-    },
-    template:   '<div class="popup">' +
-                  '<div class="popup-head">' +
-                    '<h3 class="popup-title" ng-bind-html="title"></h3>' +
-                    '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
-                  '</div>' +
-                  '<div class="popup-body" ng-transclude>' +
-                  '</div>' +
-                  '<div class="popup-buttons row">' +
-                    '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
-                  '</div>' +
-                '</div>'
+  this.getPreviousTitle = function() {
+    return $scope.oldTitle || '';
   };
-}]);
 
-})();
+  /**
+   * Exposed for testing
+   */
+  this._animateTitles = function() {
+    var oldTitleEl, newTitleEl, currentTitles;
+
+    //If we have any title right now
+    //(or more than one, they could be transitioning on switch),
+    //replace the first one with an oldTitle element
+    currentTitles = $element[0].querySelectorAll('.title');
+    if (currentTitles.length) {
+      oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
+      angular.element(currentTitles[0]).replaceWith(oldTitleEl);
+    }
+    //Compile new title
+    newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
 
-(function(ionic) {
-'use strict';
+    //Animate in on next frame
+    ionic.requestAnimationFrame(function() {
 
-angular.module('ionic.ui.radio', [])
+      oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+
+      var insert = oldTitleEl && angular.element(oldTitleEl) || null;
+      $animate.enter(newTitleEl, $element, insert, function() {
+        self._headerBarView.align();
+      });
+
+      //Cleanup any old titles leftover (besides the one we already did replaceWith on)
+      angular.forEach(currentTitles, function(el) {
+        if (el && el.parentNode) {
+          //Use .remove() to cleanup things like .data()
+          angular.element(el).remove();
+        }
+      });
+
+      //$apply so bindings fire
+      $scope.$digest();
+
+      //Stop flicker of new title on ios7
+      ionic.requestAnimationFrame(function() {
+        newTitleEl[0].classList.remove('invisible');
+      });
+    });
+  };
+}])
 
 /**
  * @ngdoc directive
- * @name ionRadio
+ * @name ionNavBar
  * @module ionic
+ * @delegate ionic.service:$ionicNavBarDelegate
  * @restrict E
+ *
  * @description
- * No different than the HTML radio input, except it's styled differently.
+ * If we have an {@link ionic.directive:ionNavView} directive, we can also create an
+ * `<ion-nav-bar>`, which will create a topbar that updates as the application state changes.
  *
- * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ * We can add a back button by putting an {@link ionic.directive:ionNavBackButton} inside.
+ *
+ * We can add buttons depending on the currently visible view using
+ * {@link ionic.directive:ionNavButtons}.
+ *
+ * Assign an [animation class](/docs/components#animations) to the element to
+ * enable animated changing of titles (recommended: 'slide-left-right' or 'nav-title-slide-ios7')
  *
  * @usage
+ *
  * ```html
- * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
- * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
- * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * <body ng-app="starter">
+ *   <!-- The nav bar that will be updated as we navigate -->
+ *   <ion-nav-bar class="bar-positive nav-title-slide-ios7">
+ *   </ion-nav-bar>
+ *
+ *   <!-- where the initial view template will be rendered -->
+ *   <ion-nav-view></ion-nav-view>
+ * </body>
  * ```
+ *
+ * @param {string=} delegate-handle The handle used to identify this navBar
+ * with {@link ionic.service:$ionicNavBarDelegate}.
+ * @param align-title {string=} Where to align the title of the navbar.
+ * Available: 'left', 'right', 'center'. Defaults to 'center'.
  */
-.directive('ionRadio', function() {
+.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
+function($ionicViewService, $rootScope, $animate, $compile) {
+
   return {
     restrict: 'E',
-    replace: true,
-    require: '?ngModel',
-    scope: {
-      ngModel: '=?',
-      ngValue: '=?',
-      ngChange: '&',
+    controller: '$ionicNavBar',
+    scope: true,
+    compile: function(tElement, tAttrs) {
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      tElement
+        .addClass('bar bar-header nav-bar')
+        .append(
+          '<div class="buttons left-buttons"> ' +
+          '</div>' +
+          '<h1 ng-bind-html="title" class="title"></h1>' +
+          '<div class="buttons right-buttons"> ' +
+          '</div>'
+        );
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, navBarCtrl) {
+        navBarCtrl._headerBarView = new ionic.views.HeaderBar({
+          el: $element[0],
+          alignTitle: $attr.alignTitle || 'center'
+        });
+
+        //defaults
+        $scope.backButtonShown = false;
+        $scope.shouldAnimate = true;
+        $scope.isReverse = false;
+        $scope.isInvisible = true;
+        $scope.$parent.$hasHeader = true;
+
+        $scope.$on('$destroy', function() {
+          $scope.$parent.$hasHeader = false;
+        });
+
+        $scope.$watch(function() {
+          return ($scope.isReverse ? ' reverse' : '') +
+            ($scope.isInvisible ? ' invisible' : '') +
+            (!$scope.shouldAnimate ? ' no-animation' : '');
+        }, function(className, oldClassName) {
+          $element.removeClass(oldClassName);
+          $element.addClass(className);
+        });
+
+      }
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavBackButton
+ * @module ionic
+ * @restrict E
+ * @parent ionNavBar
+ * @description
+ * Creates a back button inside an {@link ionic.directive:ionNavBar}.
+ *
+ * Will show up when the user is able to go back in the current navigation stack.
+ *
+ * By default, will go back when clicked.  If you wish for more advanced behavior, see the
+ * examples below.
+ *
+ * @usage
+ *
+ * With default click action:
+ *
+ * ```html
+ * <ion-nav-bar>
+ *   <ion-nav-back-button class="button-icon">
+ *     <i class="ion-arrow-left-c"></i> Back!
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ *
+ * With custom click action, using {@link ionic.service:$ionicNavBarDelegate}:
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button-icon"
+ *     ng-click="canGoBack && goBack()">
+ *     <i class="ion-arrow-left-c"></i> Back
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.goBack = function() {
+ *     $ionicNavBarDelegate.back();
+ *   };
+ * }
+ * ```
+ *
+ * Displaying the previous title on the back button, again using
+ * {@link ionic.service:$ionicNavBarDelegate}.
+ *
+ * ```html
+ * <ion-nav-bar ng-controller="MyCtrl">
+ *   <ion-nav-back-button class="button button-icon ion-arrow-left-c">
+ *     {% raw %}{{getPreviousTitle() || 'Back'}}{% endraw %}
+ *   </ion-nav-back-button>
+ * </ion-nav-bar>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicNavBarDelegate) {
+ *   $scope.getPreviousTitle = function() {
+ *     return $ionicNavBarDelegate.getPreviousTitle();
+ *   };
+ * }
+ * ```
+ */
+.directive('ionNavBackButton', ['$ionicNgClick', function($ionicNgClick) {
+  return {
+    restrict: 'E',
+    require: '^ionNavBar',
+    compile: function(tElement, tAttrs) {
+      tElement.addClass('button back-button');
+      return function($scope, $element, $attr, navBarCtrl) {
+        if (!$attr.ngClick) {
+          $scope.$navBack = navBarCtrl.back;
+          $ionicNgClick($scope, $element, '$navBack($event)');
+        }
+
+        //If the current viewstate does not allow a back button,
+        //always hide it.
+        var deregisterListener = $scope.$parent.$on(
+          '$viewHistory.historyChange',
+          function(e, data) {
+            $scope.hasBackButton = !!data.showBack;
+          }
+        );
+        $scope.$on('$destroy', deregisterListener);
+
+        //Make sure both that a backButton is allowed in the first place,
+        //and that it is shown by the current view.
+        $scope.$watch('!!(backButtonShown && hasBackButton)', function(show) {
+          $element.toggleClass('hide', !show);
+        });
+      };
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name ionNavButtons
+ * @module ionic
+ * @restrict E
+ * @parent ionNavView
+ *
+ * @description
+ * Use ionNavButtons to set the buttons on your {@link ionic.directive:ionNavBar}
+ * from within an {@link ionic.directive:ionView}.
+ *
+ * Any buttons you declare will be placed onto the navbar's corresponding side,
+ * and then destroyed when the user leaves their parent view.
+ *
+ * @usage
+ * ```html
+ * <ion-nav-bar>
+ * </ion-nav-bar>
+ * <ion-nav-view>
+ *   <ion-view>
+ *     <ion-nav-buttons side="left">
+ *       <button class="button" ng-click="doSomething()">
+ *         I'm a button on the left of the navbar!
+ *       </button>
+ *     </ion-nav-buttons>
+ *     <ion-content>
+ *       Some super content here!
+ *     </ion-content>
+ *   </ion-view>
+ * </ion-nav-view>
+ * ```
+ *
+ * @param {string} side The side to place the buttons on in the parent
+ * {@link ionic.directive:ionNavBar}. Available: 'left' or 'right'.
+ */
+.directive('ionNavButtons', ['$compile', '$animate', function($compile, $animate) {
+  return {
+    require: '^ionNavBar',
+    restrict: 'E',
+    compile: function($element, $attrs) {
+      var content = $element.contents().remove();
+      return function($scope, $element, $attrs, navBarCtrl) {
+        var navElement = $attrs.side === 'right' ?
+          navBarCtrl.rightButtonsElement :
+          navBarCtrl.leftButtonsElement;
+
+        //Put all of our inside buttons into their own div,
+        //so we can remove them all when this element dies -
+        //even if the buttons have changed through an ng-repeat or the like,
+        //we just remove their div parent and they are gone.
+        var buttons = angular.element('<div>').append(content);
+
+        //Compile buttons inside content so they have access to everything
+        //something inside content does (eg parent ionicScroll)
+        $element.append(buttons);
+        $compile(buttons)($scope);
+
+        //Append buttons to navbar
+        $animate.enter(buttons, navElement);
+
+        //When our ion-nav-buttons container is destroyed,
+        //destroy everything in the navbar
+        $scope.$on('$destroy', function() {
+          $animate.leave(buttons);
+        });
+
+        // The original element is just a completely empty <ion-nav-buttons> element.
+        // make it invisible just to be sure it doesn't change any layout
+        $element.css('display', 'none');
+      };
+    }
+  };
+}]);
+
+(function() {
+'use strict';
+
+angular.module('ionic.ui.popup', [])
+
+/**
+ * @private
+ */
+.directive('ionPopupBackdrop', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    template: '<div class="popup-backdrop"></div>'
+  }
+})
+
+/**
+ * @private
+ */
+.directive('ionPopup', ['$ionicBind', function($ionicBind) {
+  return {
+    restrict: 'E',
+    replace: true,
+    transclude: true,
+    scope: true,
+    template:
+      '<div class="popup">' +
+        '<div class="popup-head">' +
+          '<h3 class="popup-title" ng-bind-html="title"></h3>' +
+          '<h5 class="popup-sub-title" ng-bind-html="subTitle" ng-if="subTitle"></h5>' +
+        '</div>' +
+        '<div class="popup-body" ng-transclude>' +
+        '</div>' +
+        '<div class="popup-buttons row">' +
+          '<button ng-repeat="button in buttons" ng-click="_buttonTapped(button, $event)" class="button col" ng-class="button.type || \'button-default\'" ng-bind-html="button.text"></button>' +
+        '</div>' +
+      '</div>',
+    link: function($scope, $element, $attr) {
+      $ionicBind($scope, $attr, {
+        title: '@',
+        buttons: '=',
+        $onButtonTap: '&onButtonTap',
+        $onClose: '&onClose'
+      });
+
+      $scope._buttonTapped = function(button, event) {
+        var result = button.onTap && button.onTap(event);
+
+        // A way to return false
+        if(event.defaultPrevented) {
+          return $scope.$onClose({button: button, result: false, event: event });
+        }
+
+        // Truthy test to see if we should close the window
+        if(result) {
+          return $scope.$onClose({button: button, result: result, event: event });
+        }
+        $scope.$onButtonTap({button: button, event: event});
+      }
+    }
+  };
+}]);
+
+})();
+
+(function(ionic) {
+'use strict';
+
+angular.module('ionic.ui.radio', [])
+
+/**
+ * @ngdoc directive
+ * @name ionRadio
+ * @module ionic
+ * @restrict E
+ * @description
+ * No different than the HTML radio input, except it's styled differently.
+ *
+ * Behaves like any [AngularJS radio](http://docs.angularjs.org/api/ng/input/input[radio]).
+ *
+ * @usage
+ * ```html
+ * <ion-radio ng-model="choice" value="A">Choose A</ion-radio>
+ * <ion-radio ng-model="choice" value="B">Choose B</ion-radio>
+ * <ion-radio ng-model="choice" value="C">Choose C</ion-radio>
+ * ```
+ */
+.directive('ionRadio', function() {
+  return {
+    restrict: 'E',
+    replace: true,
+    require: '?ngModel',
+    scope: {
+      ngModel: '=?',
+      ngValue: '=?',
+      ngChange: '&',
       icon: '@'
     },
     transclude: true,
@@ -3338,11 +3631,14 @@ angular.module('ionic.ui.scroll', [])
  * @ngdoc directive
  * @name ionScroll
  * @module ionic
+ * @delegate ionic.service:$ionicScrollDelegate
  * @restrict E
  *
  * @description
  * Creates a scrollable container for all content inside.
  *
+ * @param {string=} delegate-handle The handle used to identify this scrollView
+ * with {@link ionic.service:$ionicScrollDelegate}.
  * @param {string=} direction Which way to scroll. 'x' or 'y'. Default 'y'.
  * @param {boolean=} paging Whether to scroll with paging.
  * @param {expression=} on-refresh Called on pull-to-refresh, triggered by an {@link ionic.directive:ionRefresher}.
@@ -3350,41 +3646,43 @@ angular.module('ionic.ui.scroll', [])
  * @param {boolean=} scrollbar-x Whether to show the horizontal scrollbar. Default false.
  * @param {boolean=} scrollbar-x Whether to show the vertical scrollbar. Default true.
  */
-.directive('ionScroll', ['$parse', '$timeout', '$controller', function($parse, $timeout, $controller) {
+.directive('ionScroll', [
+  '$timeout',
+  '$controller',
+  '$ionicBind',
+function($timeout, $controller, $ionicBind) {
   return {
     restrict: 'E',
-    replace: true,
-    template: '<div class="scroll-view"><div class="scroll" ng-transclude></div></div>',
-    transclude: true,
-    scope: {
-      direction: '@',
-      paging: '@',
-      onRefresh: '&',
-      onScroll: '&',
-      scroll: '@',
-      scrollbarX: '@',
-      scrollbarY: '@',
-    },
-
+    scope: true,
     controller: function() {},
+    compile: function(element, attr) {
+      element.addClass('scroll-view');
 
-    compile: function(element, attr, transclude) {
-
-      return {
-        //Prelink <ion-scroll> so it can compile before other directives compile.
-        //Then other directives can require ionicScrollCtrl
-        pre: prelink
-      };
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="scroll"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
 
+      return { pre: prelink };
       function prelink($scope, $element, $attr) {
-        var scrollView, scrollCtrl,
-          sc = $element[0].children[0];
+        var scrollView, scrollCtrl;
 
-        if(attr.padding == "true") {
-          sc.classList.add('padding');
+        $ionicBind($scope, $attr, {
+          direction: '@',
+          paging: '@',
+          $onScroll: '&onScroll',
+          scroll: '@',
+          scrollbarX: '@',
+          scrollbarY: '@',
+        });
+
+        if (angular.isDefined($attr.padding)) {
+          $scope.$watch($attr.padding, function(newVal) {
+            innerElement.toggleClass('padding', !!newVal);
+          });
         }
         if($scope.$eval($scope.paging) === true) {
-          sc.classList.add('scroll-paging');
+          innerElement.addClass('scroll-paging');
         }
 
         if(!$scope.direction) { $scope.direction = 'y'; }
@@ -3392,6 +3690,7 @@ angular.module('ionic.ui.scroll', [])
 
         var scrollViewOptions= {
           el: $element[0],
+          delegateHandle: $attr.delegateHandle,
           paging: isPaging,
           scrollbarX: $scope.$eval($scope.scrollbarX) !== false,
           scrollbarY: $scope.$eval($scope.scrollbarY) !== false,
@@ -3438,33 +3737,97 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 }])
 
 /**
- * @ngdoc controller
- * @name ionicSideMenus
+ * @ngdoc service
+ * @name $ionicSideMenuDelegate
  * @module ionic
- * @group side menu
  *
  * @description
- * Controller for the {@link ionic.directive:ionSideMenus} directive.
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleLeft
- * @description Toggle the left side menu (if it exists).
- */
-/**
- * @ngdoc method
- * @name ionicSideMenus#toggleRight
- * @description Toggle the right side menu (if it exists).
+ * Delegate for controlling the {@link ionic.directive:ionSideMenus} directive.
+ *
+ * Methods called directly on the $ionicSideMenuDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSideMenuDelegate#$getByHandle $getByHandle}
+ * method to control specific ionSideMenus instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-side-menus>
+ *     <ion-pane ion-side-menu-content>
+ *       Content!
+ *       <button ng-click="toggleLeftSideMenu()">
+ *         Toggle Left Side Menu
+ *       </button>
+ *     </ion-pane>
+ *     <ion-side-menu side="left">
+ *       Left Menu!
+ *     <ion-side-menu>
+ *   </ion-side-menus>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicSideMenuDelegate) {
+ *   $scope.toggleLeftSideMenu = function() {
+ *     $ionicSideMenuDelegate.toggleLeft();
+ *   };
+ * }
+ * ```
  */
+.service('$ionicSideMenuDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleLeft
+   * @description Toggle the left side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#toggleRight
+   * @description Toggle the right side menu (if it exists).
+   * @param {boolean=} isOpen Whether to open or close the menu.
+   * Default: Toggles the menu.
+   */
+  'toggleRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenLeft
+   * @returns {boolean} Whether the left menu is currently opened.
+   */
+  'isOpenLeft',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#isOpenRight
+   * @returns {boolean} Whether the right menu is currently opened.
+   */
+  'isOpenRight',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#canDragContent
+   * @param {boolean=} canDrag Set whether the content can or cannot be dragged to open
+   * side menus.
+   * @returns {boolean} Whether the content can be dragged to open side menus.
+   */
+  'canDragContent',
+  /**
+   * @ngdoc method
+   * @name $ionicSideMenuDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSideMenus} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSideMenuDelegate.$getByHandle('my-handle').toggleLeft();`
+   */
+]))
 
 /**
  * @ngdoc directive
  * @name ionSideMenus
  * @module ionic
+ * @delegate ionic.service:$ionicSideMenuDelegate
  * @restrict E
- * @group side menu
- * @groupMainItem
- * @controller ionicSideMenus
  *
  * @description
  * A container element for side menu(s) and the main content. Allows the left
@@ -3479,14 +3842,14 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  *
  * @usage
  * To use side menus, add an `<ion-side-menus>` parent element,
- * an `<ion-pane ion-side-menu-content>` for the center content,
+ * an `<ion-side-menu-content>` for the center content,
  * and one or more `<ion-side-menu>` directives.
  *
  * ```html
  * <ion-side-menus>
  *   <!-- Center content -->
- *   <ion-pane ion-side-menu-content ng-controller="ContentController">
- *   </ion-pane>
+ *   <ion-side-menu-content ng-controller="ContentController">
+ *   </io-side-menu-content>
  *
  *   <!-- Left menu -->
  *   <ion-side-menu side="left">
@@ -3498,20 +3861,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * </ion-side-menus>
  * ```
  * ```js
- * function ContentController($scope) {
+ * function ContentController($scope, $ionicSideMenuDelegate) {
  *   $scope.toggleLeft = function() {
- *     $scope.sideMenuController.toggleLeft();
+ *     $ionicSideMenuDelegate.toggleLeft();
  *   };
  * }
  * ```
  *
- * @param {expression=} model The model to assign this side menu container's {@link ionic.controller:ionicSideMenus} controller to. By default, assigns  to $scope.sideMenuController.
+ * @param {string=} delegate-handle The handle used to identify this side menu
+ * with {@link ionic.service:$ionicSideMenuDelegate}.
  *
  */
 .directive('ionSideMenus', function() {
   return {
     restrict: 'ECA',
-    controller: ['$scope', '$attrs', '$parse', function($scope, $attrs, $parse) {
+    controller: ['$scope', '$attrs', '$ionicSideMenuDelegate', function($scope, $attrs, $ionicSideMenuDelegate) {
       var _this = this;
 
       angular.extend(this, ionic.controllers.SideMenuController.prototype);
@@ -3521,9 +3885,20 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         right: { width: 275 }
       });
 
+      this.canDragContent = function(canDrag) {
+        if (arguments.length) {
+          $scope.dragContent = !!canDrag;
+        }
+        return $scope.dragContent;
+      };
+
       $scope.sideMenuContentTranslateX = 0;
 
-      $parse($attrs.model || 'sideMenuController').assign($scope, this);
+      var deregisterInstance = $ionicSideMenuDelegate._registerInstance(
+        this, $attrs.delegateHandle
+      );
+
+      $scope.$on('$destroy', deregisterInstance);
     }],
     replace: true,
     transclude: true,
@@ -3535,21 +3910,18 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @ngdoc directive
  * @name ionSideMenuContent
  * @module ionic
- * @restrict A
- * @group side menu
+ * @restrict E
  * @parent ionic.directive:ionSideMenus
  *
  * @description
  * A container for the main visible content, sibling to one or more
  * {@link ionic.directive:ionSideMenu} directives.
  *
- * An attribute directive, recommended to be used as part of an `<ion-pane>` element.
- *
  * @usage
  * ```html
- * <div ion-side-menu-content
- *   drag-content="canDragContent()">
- * </div>
+ * <ion-side-menu-content
+ *   drag-content="canDrag">
+ * </ion-side-menu-content>
  * ```
  * For a complete side menu example, see the
  * {@link ionic.directive:ionSideMenus} documentation.
@@ -3559,20 +3931,21 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  */
 .directive('ionSideMenuContent', ['$timeout', '$ionicGesture', function($timeout, $ionicGesture) {
   return {
-    restrict: 'AC',
+    restrict: 'EA', //DEPRECATED 'A'
     require: '^ionSideMenus',
     scope: true,
-    compile: function(element, attr, transclude) {
-      return function($scope, $element, $attr, sideMenuCtrl) {
+    compile: function(element, attr) {
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, sideMenuCtrl) {
 
-        $element.addClass('menu-content');
+        $element.addClass('menu-content pane');
 
         if (angular.isDefined(attr.dragContent)) {
           $scope.$watch(attr.dragContent, function(value) {
-            $scope.dragContent = value;
+            sideMenuCtrl.canDragContent(value);
           });
         } else {
-          $scope.dragContent = true;
+          sideMenuCtrl.canDragContent(true);
         }
 
         var defaultPrevented = false;
@@ -3653,7 +4026,7 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
           $ionicGesture.off(releaseGesture, 'release', dragReleaseFn);
           ionic.off('tap', contentTap, $element[0]);
         });
-      };
+      }
     }
   };
 }])
@@ -3663,7 +4036,6 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
  * @name ionSideMenu
  * @module ionic
  * @restrict E
- * @group side menu
  * @parent ionic.directive:ionSideMenus
  *
  * @description
@@ -3688,14 +4060,13 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
   return {
     restrict: 'E',
     require: '^ionSideMenus',
-    replace: true,
-    transclude: true,
     scope: true,
-    template: '<div class="menu menu-{{side}}"></div>',
-    compile: function(element, attr, transclude) {
+    compile: function(element, attr) {
       angular.isUndefined(attr.isEnabled) && attr.$set('isEnabled', 'true');
       angular.isUndefined(attr.width) && attr.$set('width', '275');
 
+      element.addClass('menu menu-' + attr.side);
+
       return function($scope, $element, $attr, sideMenuCtrl) {
         $scope.side = $attr.side || 'left';
 
@@ -3714,14 +4085,79 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
         $scope.$watch($attr.isEnabled, function(val) {
           sideMenu.setIsEnabled(!!val);
         });
-
-        transclude($scope, function(clone) {
-          $element.append(clone);
-        });
       };
     }
   };
-});
+})
+
+/**
+ * @ngdoc directive
+ * @name menuToggle
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Toggle a side menu on the given side
+ *
+ * @usage
+ * Below is an example of a link within a nav bar. Tapping this link would
+ * automatically open the given side menu
+ *
+ * ```html
+ * <ion-view>
+ *   <ion-nav-buttons side="left">
+ *    <button menu-toggle="left" class="button button-icon icon ion-navicon"></button>
+ *   </ion-nav-buttons>
+ *  ...
+ * </ion-view>
+ * ```
+ */
+.directive('menuToggle', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      var side = $scope.$eval($attr.menuToggle) || 'left';
+      $element.bind('click', function(){
+        if(side === 'left') {
+          sideMenuCtrl.toggleLeft();
+        } else if(side === 'right') {
+          sideMenuCtrl.toggleRight();
+        }
+      });
+    }
+  };
+}])
+
+/**
+ * @ngdoc directive
+ * @name menuClose
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Closes a side menu which is currently opened.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would
+ * automatically close the currently opened menu
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('menuClose', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    require: '^ionSideMenus',
+    link: function($scope, $element, $attr, sideMenuCtrl) {
+      $element.bind('click', function(){
+        sideMenuCtrl.close();
+      });
+    }
+  };
+}]);
+
 })();
 
 (function() {
@@ -3730,6 +4166,102 @@ angular.module('ionic.ui.sideMenu', ['ionic.service.gesture', 'ionic.service.vie
 angular.module('ionic.ui.slideBox', [])
 
 /**
+ * @ngdoc service
+ * @name $ionicSlideBoxDelegate
+ * @module ionic
+ * @description
+ * Delegate that controls the {@link ionic.directive:ionSlideBox} directive.
+ *
+ * Methods called directly on the $ionicSlideBoxDelegate service will control all side
+ * menus.  Use the {@link ionic.service:$ionicSlideBoxDelegate#$getByHandle $getByHandle}
+ * method to control specific slide box instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-slide-box>
+ *     <ion-slide>
+ *       <div class="box blue">
+ *         <button ng-click="nextSlide()">Next slide!</button>
+ *       </div>
+ *     </ion-slide>
+ *     <ion-slide>
+ *       <div class="box red">
+ *         Slide 2!
+ *       </div>
+ *     </ion-slide>
+ *   </ion-slide-box>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicSlideBoxDelegate) {
+ *   $scope.nextSlide = function() {
+ *     $ionicSlideBoxDelegate.next();
+ *   }
+ * }
+ * ```
+ */
+.service('$ionicSlideBoxDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#update
+   * @description
+   * Update the slidebox (for example if using Angular with ng-repeat,
+   * resize it for the elements inside).
+   */
+  'update',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slide
+   * @param {number} to The index to slide to.
+   * @param {number=} speed The number of milliseconds for the change to take.
+   */
+  'slide',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#previous
+   * @description Go to the previous slide. Wraps around if at the beginning.
+   */
+  'previous',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#next
+   * @description Go to the next slide. Wraps around if at the end.
+   */
+  'next',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#stop
+   * @description Stop sliding. The slideBox will not move again until
+   * explicitly told to do so.
+   */
+  'stop',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#currentIndex
+   * @returns number The index of the current slide.
+   */
+  'currentIndex',
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#slidesCount
+   * @returns number The number of slides there are currently.
+   */
+  'slidesCount'
+  /**
+   * @ngdoc method
+   * @name $ionicSlideBoxDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionSlideBox} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicSlideBoxDelegate.$getByHandle('my-handle').stop();`
+   */
+]))
+
+/**
  * The internal controller for the slide box controller.
  */
 
@@ -3737,8 +4269,8 @@ angular.module('ionic.ui.slideBox', [])
  * @ngdoc directive
  * @name ionSlideBox
  * @module ionic
+ * @delegate ionic.service:$ionicSlideBoxDelegate
  * @restrict E
- * @controller ionicSlideBox
  * @description
  * The Slide Box is a multi-page container where each page can be swiped or dragged between:
  *
@@ -3759,7 +4291,8 @@ angular.module('ionic.ui.slideBox', [])
  * </ion-slide-box>
  * ```
  *
- * @param {expression=} model The model to assign this slide box container's {@link ionic.controller:ionicSlideBox} controller to. By default, assigns to $scope.slideBoxController.
+ * @param {string=} delegate-handle The handle used to identify this slideBox
+ * with {@link ionic.service:$ionicSlideBoxDelegate}.
  * @param {boolean=} does-continue Whether the slide box should automatically slide.
  * @param {number=} slide-interval How many milliseconds to wait to change slides (if does-continue is true). Defaults to 4000.
  * @param {boolean=} show-pager Whether a pager should be shown for this slide box.
@@ -3767,7 +4300,11 @@ angular.module('ionic.ui.slideBox', [])
  * @param {expression=} on-slide-changed Expression called whenever the slide is changed.
  * @param {expression=} active-slide Model to bind the current slide to.
  */
-.directive('ionSlideBox', ['$timeout', '$compile', '$ionicSlideBoxDelegate', function($timeout, $compile, $ionicSlideBoxDelegate) {
+.directive('ionSlideBox', [
+  '$timeout',
+  '$compile',
+  '$ionicSlideBoxDelegate',
+function($timeout, $compile, $ionicSlideBoxDelegate) {
   return {
     restrict: 'E',
     replace: true,
@@ -3780,7 +4317,7 @@ angular.module('ionic.ui.slideBox', [])
       onSlideChanged: '&',
       activeSlide: '=?'
     },
-    controller: ['$scope', '$element', '$attrs', '$parse', function($scope, $element, $attrs, $parse) {
+    controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
       var _this = this;
 
       var continuous = $scope.$eval($scope.doesContinue) === true;
@@ -3826,9 +4363,12 @@ angular.module('ionic.ui.slideBox', [])
         slider.slide(index);
       });
 
-      $parse($attrs.model || 'slideBoxController').assign($scope.$parent, slider);
+      //Exposed for testing
+      this.__slider = slider;
 
-      $ionicSlideBoxDelegate.register($scope, $element);
+      var deregisterInstance = $ionicSlideBoxDelegate._registerInstance(slider, $attrs.delegateHandle);
+
+      $scope.$on('$destroy', deregisterInstance);
 
       this.slidesCount = function() {
         return slider.slidesCount();
@@ -3908,32 +4448,80 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
 }])
 
 /**
- * @ngdoc controller
- * @group tab bar
- * @name ionicTabs
+ * @ngdoc service
+ * @name $ionicTabsDelegate
  * @module ionic
  *
  * @description
- * Controller for the {@link ionic.directive:ionTabs} directive.
+ * Delegate for controlling the {@link ionic.directive:ionTabs} directive.
+ *
+ * Methods called directly on the $ionicTabsDelegate service will control all ionTabs
+ * directives. Use the {@link ionic.service:$ionicTabsDelegate#$getByHandle $getByHandle}
+ * method to control specific ionTabs instances.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MyCtrl">
+ *   <ion-tabs>
+ *
+ *     <ion-tab title="Tab 1">
+ *       Hello tab 1!
+ *       <button ng-click="selectTabWithIndex(1)">Select tab 2!</button>
+ *     </ion-tab>
+ *     <ion-tab title="Tab 2">Hello tab 2!</ion-tab>
+ *
+ *   </ion-tabs>
+ * </body>
+ * ```
+ * ```js
+ * function MyCtrl($scope, $ionicTabsDelegate) {
+ *   $scope.selectTabWithIndex = function(index) {
+ *     $ionicTabsDelegate.select(index);
+ *   }
+ * }
+ * ```
  */
-.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
-  var _selectedTab = null;
-  var self = this;
-  self.tabs = [];
-
+.service('$ionicTabsDelegate', delegateService([
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTabIndex
+   * @name $ionicTabsDelegate#select
+   * @description Select the tab matching the given index.
+   *
+   * @param {number} index Index of the tab to select.
+   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's
+   * view history (if it exists) and use it, or just load the default page.
+   * Default false.
+   * Hint: you probably want this to be true if you have an
+   * {@link ionic.directive:ionNavView} inside your tab.
+   */
+  'select',
+  /**
+   * @ngdoc method
+   * @name $ionicTabsDelegate#selectedIndex
    * @returns `number` The index of the selected tab, or -1.
    */
-  self.selectedTabIndex = function() {
-    return self.tabs.indexOf(_selectedTab);
-  };
+  'selectedIndex'
   /**
    * @ngdoc method
-   * @name ionicTabs#selectedTab
-   * @returns `ionTab` The selected tab or null if none selected.
+   * @name $ionicTabsDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * {@link ionic.directive:ionTabs} directives with `delegate-handle` matching
+   * the given handle.
+   *
+   * Example: `$ionicTabsDelegate.$getByHandle('my-handle').select(0);`
    */
+]))
+
+.controller('ionicTabs', ['$scope', '$ionicViewService', '$element', function($scope, $ionicViewService, $element) {
+  var _selectedTab = null;
+  var self = this;
+  self.tabs = [];
+
+  self.selectedIndex = function() {
+    return self.tabs.indexOf(_selectedTab);
+  };
   self.selectedTab = function() {
     return _selectedTab;
   };
@@ -3974,17 +4562,6 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
     }
   };
 
-  /**
-   * @ngdoc method
-   * @name ionicTabs#select
-   * @description Select the given tab or tab index.
-   *
-   * @param {ionTab|number} tabOrIndex A tab object or index of a tab to select
-   * @param {boolean=} shouldChangeHistory Whether this selection should load this tab's view history
-   * (if it exists) and use it, or just loading the default page. Default false.
-   * Hint: you probably want this to be true if you have an
-   * {@link ionic.directive:ionNavView} inside your tab.
-   */
   self.select = function(tab, shouldEmitEvent) {
     var tabIndex;
     if (angular.isNumber(tab)) {
@@ -4033,20 +4610,24 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  * @ngdoc directive
  * @name ionTabs
  * @module ionic
+ * @delegate ionic.service:$ionicTabsDelegate
  * @restrict E
- * @group tab bar
- * @groupMainItem
- * @controller ionicTabs
  * @codepen KbrzJ
  *
  * @description
- * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed through.
+ * Powers a multi-tabbed interface with a Tab Bar and a set of "pages" that can be tabbed
+ * through.
  *
- * See the {@link ionic.directive:ionTab} directive's documentation for more details.
+ * Assign any [tabs class](/docs/components#tabs) or
+ * [animation class](/docs/components#animation) to the element to define
+ * its look and feel.
+ *
+ * See the {@link ionic.directive:ionTab} directive's documentation for more details on
+ * individual tabs.
  *
  * @usage
  * ```html
- * <ion-tabs tabs-type="tabs-icon-only">
+ * <ion-tabs class="tabs-positive tabs-icon-only">
  *
  *   <ion-tab title="Home" icon-on="ion-ios7-filing" icon-off="ion-ios7-filing-outline">
  *     <!-- Tab 1 content -->
@@ -4059,48 +4640,49 @@ angular.module('ionic.ui.tabs', ['ionic.service.view'])
  *   <ion-tab title="Settings" icon-on="ion-ios7-gear" icon-off="ion-ios7-gear-outline">
  *     <!-- Tab 3 content -->
  *   </ion-tab>
+ *
  * </ion-tabs>
  * ```
  *
- * @param {expression=} model The model to assign this tab bar's {@link ionic.controller:ionicTabs} controller to. By default, assigns  to $scope.tabsController.
- * @param {string=} animation The animation to use when changing between tab pages.
- * @param {string=} tabs-style The class to apply to the tabs. Defaults to 'tabs-positive'.
- * @param {string=} tabs-type Whether to put the tabs on the top or bottom. Defaults to 'tabs-bottom'.
+ * @param {string=} delegate-handle The handle used to identify these tabs
+ * with {@link ionic.service:$ionicTabsDelegate}.
  */
 
-.directive('ionTabs', ['$ionicViewService', '$ionicBind', '$parse', function($ionicViewService, $ionicBind, $parse) {
+.directive('ionTabs', ['$ionicViewService', '$ionicTabsDelegate', function($ionicViewService, $ionicTabsDelegate) {
   return {
     restrict: 'E',
-    replace: true,
     scope: true,
-    transclude: true,
     controller: 'ionicTabs',
-    template:
-    '<div class="view {{$animation}}">' +
-      '<div class="tabs {{$tabsStyle}} {{$tabsType}}">' +
-      '</div>' +
-    '</div>',
-    compile: function(element, attr, transclude) {
-      if(angular.isUndefined(attr.tabsType)) attr.$set('tabsType', 'tabs-positive');
-
-      return function link($scope, $element, $attr, tabsCtrl) {
-
-        $ionicBind($scope, $attr, {
-          $animation: '@animation',
-          $tabsStyle: '@tabsStyle',
-          $tabsType: '@tabsType'
-        });
+    compile: function(element, attr) {
+      element.addClass('view');
+      //We cannot transclude here because it breaks element.data() inheritance on compile
+      var innerElement = angular.element('<div class="tabs"></div>');
+      innerElement.append(element.contents());
+      element.append(innerElement);
+
+      return { pre: prelink };
+      function prelink($scope, $element, $attr, tabsCtrl) {
+        var deregisterInstance = $ionicTabsDelegate._registerInstance(
+          tabsCtrl, $attr.delegateHandle
+        );
 
-        $parse(attr.model || 'tabsController').assign($scope, tabsCtrl);
+        $scope.$on('$destroy', deregisterInstance);
 
         tabsCtrl.$scope = $scope;
         tabsCtrl.$element = $element;
         tabsCtrl.$tabsElement = angular.element($element[0].querySelector('.tabs'));
 
-        transclude($scope, function(clone) {
-          $element.append(clone);
+        var el = $element[0];
+        $scope.$watch(function() { return el.className; }, function(value) {
+          var isTabsTop = value.indexOf('tabs-top') !== -1;
+          var isHidden = value.indexOf('tabs-item-hide') !== -1;
+          $scope.$hasTabs = !isTabsTop && !isHidden;
+          $scope.$hasTabsTop = isTabsTop && !isHidden;
         });
-      };
+        $scope.$on('$destroy', function() {
+          $scope.$hasTabs = $scope.$hasTabsTop = null;
+        });
+      }
     }
   };
 }])
@@ -4112,7 +4694,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
 
 /**
  * @ngdoc directive
- * @group tab bar
  * @name ionTab
  * @module ionic
  * @restrict E
@@ -4123,8 +4704,6 @@ function($scope, $ionicViewService, $rootScope, $element) {
  *
  * Each ionTab has its own view history.
  *
- * Whenever a tab is shown or hidden, it will broadcast a 'tab.shown' or 'tab.hidden' event.
- *
  * @usage
  * ```html
  * <ion-tab
@@ -4146,7 +4725,7 @@ function($scope, $ionicViewService, $rootScope, $element) {
  * @param {expression=} badge-style The style of badge to put on this tab (eg tabs-positive).
  * @param {expression=} on-select Called when this tab is selected.
  * @param {expression=} on-deselect Called when this tab is deselected.
- * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.controller:ionicTabs#select ionicTabBar controller's select method}.
+ * @param {expression=} ng-click By default, the tab will be selected on click. If ngClick is set, it will not.  You can explicitly switch tabs using {@link ionic.service:$ionicTabsDelegate#select $ionicTabsDelegate.select()}.
  */
 .directive('ionTab', ['$rootScope', '$animate', '$ionicBind', '$compile', '$ionicViewService',
 function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
@@ -4167,6 +4746,11 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         element[0].querySelector('data-ion-nav-view');
       var navViewName = navView && navView.getAttribute('name');
 
+      var tabNavItem = angular.element(
+        element[0].querySelector('ion-tab-nav') ||
+        element[0].querySelector('data-ion-tab-nav')
+      ).remove();
+
       //Remove the contents of the element so we can compile them later, if tab is selected
       var tabContent = angular.element('<div class="pane">')
         .append( element.contents().remove() );
@@ -4175,6 +4759,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
           tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $ionicBind($scope, $attr, {
           animate: '=',
           onSelect: '&',
@@ -4213,9 +4800,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         tabsCtrl.$tabsElement.append($compile(tabNavElement)($scope));
 
         $scope.$watch('$tabSelected', function(value) {
-          if (!value) {
-            $scope.$broadcast('tab.hidden', $scope);
-          }
           childScope && childScope.$destroy();
           childScope = null;
           childElement && $animate.leave(childElement);
@@ -4225,7 +4809,6 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
             childElement = tabContent.clone();
             $animate.enter(childElement, tabsCtrl.$element);
             $compile(childElement)(childScope);
-            $scope.$broadcast('tab.shown', $scope);
           }
         });
 
@@ -4246,7 +4829,7 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
     replace: true,
     require: ['^ionTabs', '^ionTab'],
     template:
-    '<a ng-class="{active: isTabActive(), \'has-badge\':badge}" ' +
+    '<a ng-class="{\'tab-item-active\': isTabActive(), \'has-badge\':badge}" ' +
       ' class="tab-item">' +
       '<span class="badge {{badgeStyle}}" ng-if="badge">{{badge}}</span>' +
       '<i class="icon {{getIconOn()}}" ng-if="getIconOn() && isTabActive()"></i>' +
@@ -4266,6 +4849,9 @@ function($rootScope, $animate, $ionicBind, $compile, $ionicViewService) {
         var tabsCtrl = ctrls[0],
           tabCtrl = ctrls[1];
 
+        //Remove title attribute so browser-tooltip does not apear
+        $element[0].removeAttribute('title');
+
         $scope.selectTab = function(e) {
           e.preventDefault();
           tabsCtrl.select(tabCtrl.$scope, true);
@@ -4400,249 +4986,58 @@ angular.module('ionic.ui.touch', [])
       ionic.tapElement(e.target, e);
     }
     return function(scope, element, clickExpr) {
-      var clickHandler = $parse(clickExpr);
-
-      element.on('click', function(event) {
-        scope.$apply(function() {
-          clickHandler(scope, {$event: (event)});
-        });
-      });
-
-      ionic.on('tap', onTap, element[0]);
-
-      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
-      // something else nearby.
-      element.onclick = function(event) { };
-
-      scope.$on('$destroy', function () {
-        ionic.off('tap', onTap, element[0]);
-      });
-    };
-  }])
-
-  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
-    return function(scope, element, attr) {
-      $ionicNgClick(scope, element, attr.ngClick);
-    };
-  }])
-
-  .directive('ionStopEvent', function () {
-    function stopEvent(e) {
-      e.stopPropagation();
-    }
-    return {
-      restrict: 'A',
-      link: function (scope, element, attr) {
-        element.bind(attr.ionStopEvent, stopEvent);
-      }
-    };
-  });
-
-
-})(window.angular, window.ionic);
-
-(function() {
-'use strict';
-
-angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
-
-/**
- * @ngdoc directive
- * @name ionNavBar
- * @module ionic
- * @restrict E
- *
- * @usage
- * If have an {@link ionic.directive:ionNavView} directive, we can also create an
- * <ion-nav-bar>, which will create a topbar that updates as the application state changes.
- * We can also add some styles and set up animations:
- *
- * ```html
- * <body ng-app="starter">
- *   <!-- The nav bar that will be updated as we navigate -->
- *   <ion-nav-bar animation="nav-title-slide-ios7"
- *            type="bar-positive"
- *            back-button-type="button-icon"
- *            back-button-icon="ion-arrow-left-c"></ion-nav-bar>
- *
- *   <!-- where the initial view template will be rendered -->
- *   <ion-nav-view animation="slide-left-right"></ion-nav-view>
- * </body>
- * ```
- *
- * @param {string=} back-button-type The type of the back button's icon. Available: 'button-icon' or just 'button'.
- * @param {string=} back-button-icon The icon to use for the back button. For example, 'ion-arrow-left-c'.
- * @param {string=} back-button-label The label to use for the back button. For example, 'Back'.
- * @param animation {string=} The animation used to transition between titles.
- * @param type {string=} The className for the navbar.  For example, 'bar-positive'.
- * @param align {string=} Where to align the title of the navbar. Available: 'left', 'right', 'center'. Defaults to 'center'.
- */
-.directive('ionNavBar', ['$ionicViewService', '$rootScope', '$animate', '$compile',
-                function( $ionicViewService,   $rootScope,   $animate,   $compile) {
-
-  return {
-    restrict: 'E',
-    replace: true,
-    scope: {
-      animation: '@',
-      type: '@',
-      backType: '@backButtonType',
-      backLabel: '@backButtonLabel',
-      backIcon: '@backButtonIcon',
-      alignTitle: '@'
-    },
-    controller: function() {},
-    template:
-    '<header class="bar bar-header nav-bar{{navBarClass()}}">' +
-      '<ion-nav-back-button ng-if="(backType || backLabel || backIcon)" ' +
-        'type="backType" label="backLabel" icon="backIcon" class="hide" ' +
-        'ng-class="{\'hide\': !backButtonEnabled}">' +
-      '</ion-nav-back-button>' +
-      '<div class="buttons left-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in leftButtons" ' +
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-
-      '<h1 ng-bind-html="title" class="title"></h1>' +
-
-      '<div class="buttons right-buttons"> ' +
-        '<button ng-click="button.tap($event)" ng-repeat="button in rightButtons" '+
-          'class="button no-animation {{button.type}}" ng-bind-html="button.content">' +
-        '</button>' +
-      '</div>' +
-    '</header>',
-    compile: function(tElement, tAttrs) {
-
-      return function link($scope, $element, $attr) {
-        //defaults
-        $scope.backButtonEnabled = false;
-        $scope.animateEnabled = true;
-        $scope.isReverse = false;
-        $scope.isInvisible = true;
-
-        $scope.navBarClass = function() {
-          return ($scope.type ? ' ' + $scope.type : '') +
-            ($scope.isReverse ? ' reverse' : '') +
-            ($scope.isInvisible ? ' invisible' : '') +
-            (!$scope.animationDisabled && $scope.animation ? ' ' + $scope.animation : '');
-        };
-
-        // Initialize our header bar view which will handle
-        // resizing and aligning our title labels
-        var hb = new ionic.views.HeaderBar({
-          el: $element[0],
-          alignTitle: $scope.alignTitle || 'center'
-        });
-        $scope.headerBarView = hb;
-
-        //Navbar events
-        $scope.$on('viewState.viewEnter', function(e, data) {
-          updateHeaderData(data);
-        });
-        $scope.$on('viewState.showNavBar', function(e, showNavBar) {
-          $scope.isInvisible = !showNavBar;
-        });
+      var clickHandler = $parse(clickExpr);
 
-        // All of these these are emitted from children of a sibling scope,
-        // so we listen on parent so we can catch them as they bubble up
-        var unregisterEventListeners = [
-          $scope.$parent.$on('$viewHistory.historyChange', function(e, data) {
-            $scope.backButtonEnabled = !!data.showBack;
-          }),
-          $scope.$parent.$on('viewState.leftButtonsChanged', function(e, data) {
-            $scope.leftButtons = data;
-          }),
-          $scope.$parent.$on('viewState.rightButtonsChanged', function(e, data) {
-            $scope.rightButtons = data;
-          }),
-          $scope.$parent.$on('viewState.showBackButton', function(e, data) {
-            $scope.backButtonEnabled = !!data;
-          }),
-          $scope.$parent.$on('viewState.titleUpdated', function(e, data) {
-            $scope.title = data && data.title || '';
-          })
-        ];
-        $scope.$on('$destroy', function() {
-          for (var i=0; i<unregisterEventListeners.length; i++)
-            unregisterEventListeners[i]();
+      element.on('click', function(event) {
+        scope.$apply(function() {
+          clickHandler(scope, {$event: (event)});
         });
+      });
 
-        function updateHeaderData(data) {
-
-          if (angular.isDefined(data.hideBackButton)) {
-            $scope.backButtonEnabled = !!data.hideBackButton;
-          }
-          $scope.isReverse = data.navDirection == 'back';
-          $scope.animateEnabled = !!(data.navDirection && data.animate !== false);
-
-          $scope.leftButtons = data.leftButtons;
-          $scope.rightButtons = data.rightButtons;
-          $scope.oldTitle = $scope.title;
-          $scope.title = data && data.title || '';
-
-          // only change if they're different
-          if($scope.oldTitle !== $scope.title) {
-            if (!$scope.animateEnabled) {
-              //If no animation, we're done!
-              hb.align();
-            } else {
-              animateTitles();
-            }
-          }
-        }
+      ionic.on("release", onTap, element[0]);
 
-        function animateTitles() {
-          var oldTitleEl, newTitleEl, currentTitles;
+      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
+      // something else nearby.
+      element.onclick = function(event) { };
 
-          //If we have any title right now (or more than one, they could be transitioning on switch),
-          //replace the first one with an oldTitle element
-          currentTitles = $element[0].querySelectorAll('.title');
-          if (currentTitles.length) {
-            oldTitleEl = $compile('<h1 class="title" ng-bind-html="oldTitle"></h1>')($scope);
-            angular.element(currentTitles[0]).replaceWith(oldTitleEl);
-          }
-          //Compile new title
-          newTitleEl = $compile('<h1 class="title invisible" ng-bind-html="title"></h1>')($scope);
+      scope.$on('$destroy', function () {
+        ionic.off("release", onTap, element[0]);
+      });
+    };
+  }])
 
-          //Animate in one frame
-          ionic.requestAnimationFrame(function() {
+  .directive('ngClick', ['$ionicNgClick', function($ionicNgClick) {
+    return function(scope, element, attr) {
+      $ionicNgClick(scope, element, attr.ngClick);
+    };
+  }])
 
-            oldTitleEl && $animate.leave(angular.element(oldTitleEl));
+  .directive('ionStopEvent', function () {
+    function stopEvent(e) {
+      e.stopPropagation();
+    }
+    return {
+      restrict: 'A',
+      link: function (scope, element, attr) {
+        element.bind(attr.ionStopEvent, stopEvent);
+      }
+    };
+  });
 
-            var insert = oldTitleEl && angular.element(oldTitleEl) || null;
-            $animate.enter(newTitleEl, $element, insert, function() {
-              hb.align();
-            });
 
-            //Cleanup any old titles leftover (besides the one we already did replaceWith on)
-            angular.forEach(currentTitles, function(el) {
-              if (el && el.parentNode) {
-                //Use .remove() to cleanup things like .data()
-                angular.element(el).remove();
-              }
-            });
+})(window.angular, window.ionic);
 
-            //$apply so bindings fire
-            $scope.$digest();
+(function() {
+'use strict';
 
-            //Stop flicker of new title on ios7
-            ionic.requestAnimationFrame(function() {
-              newTitleEl[0].classList.remove('invisible');
-            });
-          });
-        }
-      };
-    }
-  };
-}])
+angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gesture', 'ngSanitize'])
 
 /**
  * @ngdoc directive
  * @name ionView
  * @module ionic
  * @restrict E
- * @parent ionNavBar
+ * @parent ionNavView
  *
  * @description
  * A container for content, used to tell a parent {@link ionic.directive:ionNavBar}
@@ -4653,7 +5048,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  *
  * ```html
  * <ion-nav-bar></ion-nav-bar>
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <ion-view title="My Page">
  *     <ion-content>
  *       Hello!
@@ -4662,58 +5057,46 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * </ion-nav-view>
  * ```
  *
- * @param {expression=} left-buttons The leftButtons to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {expression=} right-buttons The rightButtons to display on the parent {@link ionic.directive:ionNavBar}.
  * @param {string=} title The title to display on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideBackButton Whether to hide the back button on the parent {@link ionic.directive:ionNavBar}.
- * @param {boolean=} hideNavBar Whether to hide the parent {@link ionic.directive:ionNavBar}.
+ * @param {boolean=} hideBackButton Whether to hide the back button on the parent
+ * {@link ionic.directive:ionNavBar} by default.
+ * @param {boolean=} hideNavBar Whether to hide the parent
+ * {@link ionic.directive:ionNavBar} by default.
  */
 .directive('ionView', ['$ionicViewService', '$rootScope', '$animate',
            function( $ionicViewService,   $rootScope,   $animate) {
   return {
     restrict: 'EA',
     priority: 1000,
-    scope: {
-      leftButtons: '=',
-      rightButtons: '=',
-      title: '@',
-      hideBackButton: '@',
-      hideNavBar: '@',
-    },
-
+    require: '^?ionNavBar',
     compile: function(tElement, tAttrs, transclude) {
       tElement.addClass('pane');
       tElement[0].removeAttribute('title');
 
-      return function link($scope, $element, $attr) {
-
-        $rootScope.$broadcast('viewState.viewEnter', {
-          title: $scope.title,
-          navDirection: $scope.$navDirection || $scope.$parent.$navDirection
-        });
-
-        // Should we hide a back button when this tab is shown
-        $scope.hideBackButton = $scope.$eval($scope.hideBackButton);
-        if($scope.hideBackButton) {
-          $rootScope.$broadcast('viewState.showBackButton', false);
+      return function link($scope, $element, $attr, navBarCtrl) {
+        if (!navBarCtrl) {
+          return;
         }
+        var initialTitle = $attr.title;
+        navBarCtrl.changeTitle(initialTitle, $scope.$navDirection);
 
-        // Should the nav bar be hidden for this view or not?
-        $rootScope.$broadcast('viewState.showNavBar', ($scope.hideNavBar !== 'true') );
-
-        // watch for changes in the left buttons
-        $scope.$watch('leftButtons', function(value) {
-          $scope.$emit('viewState.leftButtonsChanged', $scope.leftButtons);
+        // watch for changes in the title, don't set initial value as changeTitle does that
+        $attr.$observe('title', function(val, oldVal) {
+          if (val !== initialTitle) {
+            navBarCtrl.setTitle(val);
+          }
         });
 
-        $scope.$watch('rightButtons', function(val) {
-          $scope.$emit('viewState.rightButtonsChanged', $scope.rightButtons);
+        $scope.$watch($attr.hideBackButton, function(value) {
+          // Should we hide a back button when this tab is shown
+          navBarCtrl.showBackButton(!value);
         });
 
-        // watch for changes in the title
-        $scope.$watch('title', function(val) {
-          $scope.$emit('viewState.titleUpdated', $scope);
+        $scope.$watch($attr.hideNavBar, function(value) {
+          // Should the nav bar be hidden for this view or not?
+          navBarCtrl.showBar(!value);
         });
+
       };
     }
   };
@@ -4721,39 +5104,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
 
 
 /**
-* @private
-*/
-.directive('ionNavBackButton', ['$ionicViewService', '$rootScope',
-                     function($ionicViewService,   $rootScope) {
-
-  function goBack(e) {
-    var backView = $ionicViewService.getBackView();
-    backView && backView.go();
-    e.alreadyHandled = true;
-    return false;
-  }
-
-  return {
-    restrict: 'E',
-    scope: {
-      type: '=',
-      label: '=',
-      icon: '='
-    },
-    replace: true,
-    template:
-    '<button ng-click="goBack($event)" class="button back-button {{type}} ' +
-      '{{(icon && !label) ? \'icon \' + icon : \'\'}}">' +
-      '<i ng-if="icon && label" class="icon {{icon}}"></i> ' +
-      '{{label}}' +
-    '</button>',
-    link: function($scope) {
-      $scope.goBack = goBack;
-    }
-  };
-}])
-
-/**
  * @ngdoc directive
  * @name ionNavView
  * @module ionic
@@ -4787,8 +5137,11 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * {@link ionic.directive:ionNavBar} directive which will render a header bar that updates as we
  * navigate through the navigation stack.
  *
+ * You can any [animation class](/docs/components#animation) on the navView to have its pages slide.
+ * Recommended for page transitions: 'slide-left-right', 'slide-left-right-ios7', 'slide-in-up'.
+ *
  * ```html
- * <ion-nav-view>
+ * <ion-nav-view class="slide-left-right">
  *   <!-- Center content -->
  *   <ion-nav-bar>
  *   </ion-nav-bar>
@@ -4843,8 +5196,6 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
  * @param {string=} name A view name. The name should be unique amongst the other views in the
  * same state. You can have views of the same name that live in different states. For more
  * information, see ui-router's [ui-view documentation](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view).
- * @param {string=} animation The animation to use for views underneath this ionNavView.
- * Defaults to 'slide-left-right'.
  */
 .directive('ionNavView', ['$ionicViewService', '$state', '$compile', '$controller', '$animate',
               function( $ionicViewService,   $state,   $compile,   $controller,   $animate) {
@@ -4857,10 +5208,7 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     terminal: true,
     priority: 2000,
     transclude: true,
-    controller: ['$scope', function($scope) {
-      this.setNextAnimation = function(anim) {
-        $scope.$nextAnimation = anim;
-      };
+    controller: [function(){
     }],
     compile: function (element, attr, transclude) {
       return function(scope, element, attr, navViewCtrl) {
@@ -4953,10 +5301,45 @@ angular.module('ionic.ui.viewState', ['ionic.service.view', 'ionic.service.gestu
     }
   };
   return directive;
+}])
+
+
+/**
+ * @ngdoc directive
+ * @name navClear
+ * @module ionic
+ * @restrict AC
+ *
+ * @description
+ * Disables any transition animations between views, along with removing the back
+ * button which would normally show on the next view. This directive is useful for
+ * links within a sideMenu.
+ *
+ * @usage
+ * Below is an example of a link within a side menu. Tapping this link would disable
+ * any animations which would normally occur between views.
+ *
+ * ```html
+ * <a nav-clear menu-close href="#/home" class="item">Home</a>
+ * ```
+ */
+.directive('navClear', ['$ionicViewService', function($ionicViewService) {
+  return {
+    restrict: 'AC',
+    link: function($scope, $element, $attr) {
+      $element.bind('click', function(){
+        $ionicViewService.nextViewOptions({
+          disableAnimate: true,
+          disableBack: true
+        });
+      });
+    }
+  };
 }]);
 
 })();
 
+/*
 (function() {
 'use strict';
 
@@ -4979,8 +5362,9 @@ angular.module('ionic.ui.virtRepeat', [])
   };
 });
 })(ionic);
+*/
 
-
+/*
 (function() {
 'use strict';
 
@@ -5015,7 +5399,6 @@ function isTagNameInList(element, list){
 
 // Utility to find the viewport/content elements given the start element:
 function findViewportAndContent(startElement){
-  /*jshint eqeqeq:false, curly:false */
   var root = $rootElement[0];
   var e, n;
   // Somewhere between the grandparent and the root node
@@ -5105,13 +5488,13 @@ function computeRowHeight(element){
 
 angular.module('ionic.ui.virtualRepeat', [])
 
-/**
- * A replacement for ng-repeat that supports virtual lists.
- * This is not a 1 to 1 replacement for ng-repeat. However, in situations
- * where you have huge lists, this repeater will work with our virtual
- * scrolling to only render items that are showing or will be showing
- * if a scroll is made.
- */
+//
+// A replacement for ng-repeat that supports virtual lists.
+// This is not a 1 to 1 replacement for ng-repeat. However, in situations
+// where you have huge lists, this repeater will work with our virtual
+// scrolling to only render items that are showing or will be showing
+// if a scroll is made.
+//
 .directive('ionVirtualRepeat', ['$log', function($log) {
     return {
       require: ['?ngModel, ^virtualList'],
@@ -5308,46 +5691,335 @@ angular.module('ionic.ui.virtualRepeat', [])
   }]);
 
 })(ionic);
-
-(function() {
-'use strict';
+*/
 
 angular.module('ionic.ui.scroll')
 
 /**
+ * @ngdoc service
+ * @name $ionicScrollDelegate
+ * @module ionic
+ * @description
+ * Delegate for controlling scrollViews (created by
+ * {@link ionic.directive:ionContent} and
+ * {@link ionic.directive:ionScroll} directives).
+ *
+ * Methods called directly on the $ionicScrollDelegate service will control all scroll
+ * views.  Use the {@link ionic.service:$ionicScrollDelegate#$getByHandle $getByHandle}
+ * method to control specific scrollViews.
+ *
+ * @usage
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content>
+ *     <button ng-click="scrollTop()">Scroll to Top!</button>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollTop = function() {
+ *     $ionicScrollDelegate.scrollTop();
+ *   };
+ * }
+ * ```
+ *
+ * Example of advanced usage, with two scroll areas using `delegate-handle`
+ * for fine control.
+ *
+ * ```html
+ * <body ng-controller="MainCtrl">
+ *   <ion-content delegate-handle="mainScroll">
+ *     <button ng-click="scrollMainToTop()">
+ *       Scroll content to top!
+ *     </button>
+ *     <ion-scroll delegate-handle="small" style="height: 100px;">
+ *       <button ng-click="scrollSmallToTop()">
+ *         Scroll small area to top!
+ *       </button>
+ *     </ion-scroll>
+ *   </ion-content>
+ * </body>
+ * ```
+ * ```js
+ * function MainCtrl($scope, $ionicScrollDelegate) {
+ *   $scope.scrollMainToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('mainScroll').scrollTop();
+ *   };
+ *   $scope.scrollSmallToTop = function() {
+ *     $ionicScrollDelegate.$getByHandle('small').scrollTop();
+ *   };
+ * }
+ * ```
+ */
+
+.service('$ionicScrollDelegate', delegateService([
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#resize
+   * @description Tell the scrollView to recalculate the size of its container.
+   */
+  'resize',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTop
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTop',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollBottom
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollBottom',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollTo
+   * @param {number} left The x-value to scroll to.
+   * @param {number} top The y-value to scroll to.
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'scrollTo',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#anchorScroll
+   * @description Tell the scrollView to scroll to the element with an id
+   * matching window.location.hash.
+   *
+   * If no matching element is found, it will scroll to top.
+   *
+   * @param {boolean=} shouldAnimate Whether the scroll should animate.
+   */
+  'anchorScroll',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#rememberScrollPosition
+   * @description
+   * Will make it so, when this scrollView is destroyed (user leaves the page),
+   * the last scroll position the page was on will be saved, indexed by the
+   * given id.
+   *
+   * Note: for pages associated with a view under an ion-nav-view,
+   * rememberScrollPosition automatically saves their scroll.
+   *
+   * Related methods: scrollToRememberedPosition, forgetScrollPosition (below).
+   *
+   * In the following example, the scroll position of the ion-scroll element
+   * will persist, even when the user changes the toggle switch.
+   *
+   * ```html
+   * <ion-toggle ng-model="shouldShowScrollView"></ion-toggle>
+   * <ion-scroll delegate-handle="myScroll" ng-if="shouldShowScrollView">
+   *   <div ng-controller="ScrollCtrl">
+   *     <ion-list>
+   *       <ion-item ng-repeat="i in items">{{i}}</ion-item>
+   *     </ion-list>
+   *   </div>
+   * </ion-scroll>
+   * ```
+   * ```js
+   * function ScrollCtrl($scope, $ionicScrollDelegate) {
+   *   var delegate = $ionicScrollDelegate.$getByHandle('myScroll');
+   *
+   *   // Put any unique ID here.  The point of this is: every time the controller is recreated
+   *   // we want to load the correct remembered scroll values.
+   *   delegate.rememberScrollPosition('my-scroll-id');
+   *   delegate.scrollToRememberedPosition();
+   *   $scope.items = [];
+   *   for (var i=0; i<100; i++) {
+   *     $scope.items.push(i);
+   *   }
+   * }
+   * ```
+   *
+   * @param {string} id The id to remember the scroll position of this
+   * scrollView by.
+   */
+  'rememberScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#forgetScrollPosition
+   * @description
+   * Stop remembering the scroll position for this scrollView.
+   */
+  'forgetScrollPosition',
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#scrollToRememberedPosition
+   * @description
+   * If this scrollView has an id associated with its scroll position,
+   * (through calling rememberScrollPosition), and that position is remembered,
+   * load the position and scroll to it.
+   * @param {boolean=} shouldAnimate Whether to animate the scroll.
+   */
+  'scrollToRememberedPosition'
+  /**
+   * @ngdoc method
+   * @name $ionicScrollDelegate#$getByHandle
+   * @param {string} handle
+   * @returns `delegateInstance` A delegate instance that controls only the
+   * scrollViews with `delegate-handle` matching the given handle.
+   *
+   * Example: `$ionicScrollDelegate.$getByHandle('my-handle').scrollTop();`
+   */
+]))
+
+/**
  * @private
  */
-.controller('$ionicScroll', ['$scope', 'scrollViewOptions', '$timeout', '$ionicScrollDelegate', '$window', function($scope, scrollViewOptions, $timeout, $ionicScrollDelegate, $window) {
+.factory('$$scrollValueCache', function() {
+  return {};
+})
+
+.controller('$ionicScroll', [
+  '$scope',
+  'scrollViewOptions',
+  '$timeout',
+  '$window',
+  '$$scrollValueCache',
+  '$location',
+  '$rootScope',
+  '$document',
+  '$ionicScrollDelegate',
+function($scope, scrollViewOptions, $timeout, $window, $$scrollValueCache, $location, $rootScope, $document, $ionicScrollDelegate) {
 
   var self = this;
 
+  this._scrollViewOptions = scrollViewOptions; //for testing
+
   var element = this.element = scrollViewOptions.el;
+  var $element = this.$element = angular.element(element);
   var scrollView = this.scrollView = new ionic.views.Scroll(scrollViewOptions);
 
+  //Attach self to element as a controller so other directives can require this controller
+  //through `require: '$ionicScroll'
+  //Also attach to parent so that sibling elements can require this
+  ($element.parent().length ? $element.parent() : $element)
+    .data('$$ionicScrollController', this);
+
+  var deregisterInstance = $ionicScrollDelegate._registerInstance(
+    this, scrollViewOptions.delegateHandle
+  );
+
   if (!angular.isDefined(scrollViewOptions.bouncing)) {
     ionic.Platform.ready(function() {
       scrollView.options.bouncing = !ionic.Platform.isAndroid();
     });
   }
 
-  var $element = this.$element = angular.element(element);
-
-  //Attach self to element as a controller so other directives can require this controller
-  //through `require: '$ionicScroll'
-  $element.data('$$ionicScrollController', this);
+  var resize = angular.bind(scrollView, scrollView.resize);
+  ionic.on('resize', resize, $window);
 
-  //Register delegate for event handling
-  $ionicScrollDelegate.register($scope, $element, scrollView);
+  // set by rootScope listener if needed
+  var backListenDone = angular.noop;
 
-  $window.addEventListener('resize', resize);
   $scope.$on('$destroy', function() {
+    deregisterInstance();
+    ionic.off('resize', resize, $window);
     $window.removeEventListener('resize', resize);
+    backListenDone();
+    if (self._rememberScrollId) {
+      $$scrollValueCache[self._rememberScrollId] = scrollView.getValues();
+    }
   });
-  function resize() {
-    scrollView.resize();
-  }
 
-  this.setRefresher = function(refresherScope, refresherElement) {
+  $element.on('scroll', function(e) {
+    var detail = (e.originalEvent || e).detail || {};
+    $scope.$onScroll && $scope.$onScroll({
+      event: e,
+      scrollTop: detail.scrollTop || 0,
+      scrollLeft: detail.scrollLeft || 0
+    });
+  });
+
+  $scope.$on('$viewContentLoaded', function(e, historyData) {
+    //only the top-most scroll area under a view should remember that view's
+    //scroll position
+    if (e.defaultPrevented) { return; }
+    e.preventDefault();
+
+    var viewId = historyData && historyData.viewId;
+    if (viewId) {
+      self.rememberScrollPosition(viewId);
+      self.scrollToRememberedPosition();
+
+      backListenDone = $rootScope.$on('$viewHistory.viewBack', function(e, fromViewId, toViewId) {
+        //When going back from this view, forget its saved scroll position
+        if (viewId === fromViewId) {
+          self.forgetScrollPosition();
+        }
+      });
+    }
+  });
+
+  $timeout(function() {
+    scrollView.run();
+  });
+
+  this._rememberScrollId = null;
+
+  this.resize = function() {
+    return $timeout(resize);
+  };
+
+  this.scrollTop = function(shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(0, 0, !!shouldAnimate);
+    });
+  };
+
+  this.scrollBottom = function(shouldAnimate) {
+    this.resize().then(function() {
+      var max = scrollView.getScrollMax();
+      scrollView.scrollTo(max.left, max.top, !!shouldAnimate);
+    });
+  };
+
+  this.scrollTo = function(left, top, shouldAnimate) {
+    this.resize().then(function() {
+      scrollView.scrollTo(left, top, !!shouldAnimate);
+    });
+  };
+
+  this.anchorScroll = function(shouldAnimate) {
+    this.resize().then(function() {
+      var hash = $location.hash();
+      var elm = hash && $document[0].getElementById(hash);
+      if (hash && elm) {
+        var scroll = ionic.DomUtil.getPositionInParent(elm, self.$element);
+        scrollView.scrollTo(scroll.left, scroll.top, !!shouldAnimate);
+      } else {
+        scrollView.scrollTo(0,0, !!shouldAnimate);
+      }
+    });
+  };
+
+  this.rememberScrollPosition = function(id) {
+    if (!id) {
+      throw new Error("Must supply an id to remember the scroll by!");
+    }
+    this._rememberScrollId = id;
+  };
+  this.forgetScrollPosition = function() {
+    delete $$scrollValueCache[this._rememberScrollId];
+    this._rememberScrollId = null;
+  };
+  this.scrollToRememberedPosition = function(shouldAnimate) {
+    var values = $$scrollValueCache[this._rememberScrollId];
+    if (values) {
+      this.resize().then(function() {
+        scrollView.scrollTo(+values.left, +values.top, shouldAnimate);
+      });
+    }
+  };
+
+
+
+  /**
+   * @private
+   */
+  this._setRefresher = function(refresherScope, refresherElement) {
     var refresher = this.refresher = refresherElement;
     var refresherHeight = self.refresher.clientHeight || 0;
     scrollView.activatePullToRefresh(refresherHeight, function() {
@@ -5361,10 +6033,7 @@ angular.module('ionic.ui.scroll')
       refresherScope.$onRefresh();
     });
   };
-
-  $timeout(function() {
-    scrollView.run();
-  });
 }]);
 
-})();
+
+})();
\ No newline at end of file
diff --git a/phonegap/platforms/ios/www/scripts/ionic.js b/phonegap/platforms/ios/www/scripts/ionic.js
index 1105ae1..664e471 100644
--- a/phonegap/platforms/ios/www/scripts/ionic.js
+++ b/phonegap/platforms/ios/www/scripts/ionic.js
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -12,13 +12,14 @@
  *
  */
 
+(function() {
 
 // Create namespaces
 //
 window.ionic = {
   controllers: {},
   views: {},
-  version: '{{ VERSION }}'
+  version: '1.0.0-beta.1'
 };
 
 (function(ionic) {
@@ -135,16 +136,19 @@ window.ionic = {
   };
 })(ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
+
+  var readyCallbacks = [];
+  var isDomReady = false;
 
-  var readyCallbacks = [],
-  domReady = function() {
+  function domReady() {
+    isDomReady = true;
     for(var x=0; x<readyCallbacks.length; x++) {
       ionic.requestAnimationFrame(readyCallbacks[x]);
     }
     readyCallbacks = [];
     document.removeEventListener('DOMContentLoaded', domReady);
-  };
+  }
   document.addEventListener('DOMContentLoaded', domReady);
 
   // From the man himself, Mr. Paul Irish.
@@ -164,7 +168,6 @@ window.ionic = {
   * @ngdoc utility
   * @name ionic.DomUtil
   * @module ionic
-  * @group utilities
   */
   ionic.DomUtil = {
     //Call with proper context
@@ -231,12 +234,12 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.DomUtil#ready
      * @description
-     * Call a function when the dom is ready, or if it is already ready
+     * Call a function when the DOM is ready, or if it is already ready
      * call the function immediately.
      * @param {function} callback The function to be called.
      */
     ready: function(cb) {
-      if(document.readyState === "complete") {
+      if(isDomReady || document.readyState === "complete") {
         ionic.requestAnimationFrame(cb);
       } else {
         readyCallbacks.push(cb);
@@ -322,8 +325,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent of element matching the
      * className, or null.
      */
-    getParentWithClass: function(e, className) {
-      while(e.parentNode) {
+    getParentWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e.parentNode && depth--) {
         if(e.parentNode.classList && e.parentNode.classList.contains(className)) {
           return e.parentNode;
         }
@@ -339,8 +343,9 @@ window.ionic = {
      * @returns {DOMElement} The closest parent or self matching the
      * className, or null.
      */
-    getParentOrSelfWithClass: function(e, className) {
-      while(e) {
+    getParentOrSelfWithClass: function(e, className, depth) {
+      depth = depth || 10;
+      while(e && depth--) {
         if(e.classList && e.classList.contains(className)) {
           return e;
         }
@@ -371,7 +376,7 @@ window.ionic = {
   //Shortcuts
   ionic.requestAnimationFrame = ionic.DomUtil.requestAnimationFrame;
   ionic.animationFrameThrottle = ionic.DomUtil.animationFrameThrottle;
-})(window.ionic);
+})(this, document, ionic);
 
 /**
  * ion-events.js
@@ -424,7 +429,6 @@ window.ionic = {
    * @ngdoc utility
    * @name ionic.EventController
    * @module ionic
-   * @group utilities
    */
   ionic.EventController = {
     VIRTUALIZED_EVENTS: ['tap', 'swipe', 'swiperight', 'swipeleft', 'drag', 'hold', 'release'],
@@ -494,7 +498,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#onGesture
      * @alias ionic.onGesture
-     * @description Add an event listener for a gesture on an element. 
+     * @description Add an event listener for a gesture on an element.
      * @param {string} eventType The gesture event to listen for.
      * @param {function(e)} callback The function to call when the gesture
      * happens.
@@ -510,7 +514,7 @@ window.ionic = {
      * @ngdoc method
      * @name ionic.EventController#offGesture
      * @alias ionic.offGesture
-     * @description Remove an event listener for a gesture on an element. 
+     * @description Remove an event listener for a gesture on an element.
      * @param {string} eventType The gesture event.
      * @param {function(e)} callback The listener that was added earlier.
      * @param {DOMElement} element The element the listener was added on.
@@ -1930,13 +1934,12 @@ window.ionic = {
   };
 })(window.ionic);
 
-(function(ionic) {
+(function(window, document, ionic) {
 
   /**
    * @ngdoc utility
    * @name ionic.Platform
    * @module ionic
-   * @group utilities
    */
   ionic.Platform = {
 
@@ -1989,18 +1992,15 @@ window.ionic = {
      * @private
      */
     detect: function() {
-      var i, bodyClass = document.body.className;
-
       ionic.Platform._checkPlatforms();
 
-      // only change the body class if we got platform info
-      for(i = 0; i < this.platforms.length; i++) {
-        bodyClass += ' platform-' + this.platforms[i];
-      }
-
-      bodyClass += ' grade-' + this.grade;
-
-      document.body.className = bodyClass.trim();
+      ionic.requestAnimationFrame(function(){
+        // only add to the body class if we got platform info
+        for(var i = 0; i < ionic.Platform.platforms.length; i++) {
+          document.body.classList.add('platform-' + ionic.Platform.platforms[i]);
+        }
+        document.body.classList.add('grade-' + ionic.Platform.grade);
+      });
     },
 
     /**
@@ -2054,7 +2054,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiPad
+     * @name ionic.Platform#isIPad
      * @returns {boolean} Whether we are running on iPad.
      */
     isIPad: function() {
@@ -2062,7 +2062,7 @@ window.ionic = {
     },
     /**
      * @ngdoc method
-     * @name ionic.Platform#isiOS
+     * @name ionic.Platform#isIOS
      * @returns {boolean} Whether we are running on iOS.
      */
     isIOS: function() {
@@ -2184,15 +2184,17 @@ window.ionic = {
       this._showStatusBar = val;
       this.ready(function(){
         // run this only when or if the platform (cordova) is ready
-        if(ionic.Platform._showStatusBar) {
-          // they do not want it to be full screen
-          StatusBar.show();
-          document.body.classList.remove('status-bar-hide');
-        } else {
-          // it should be full screen
-          StatusBar.hide();
-          document.body.classList.add('status-bar-hide');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform._showStatusBar) {
+            // they do not want it to be full screen
+            window.StatusBar && window.StatusBar.show();
+            document.body.classList.remove('status-bar-hide');
+          } else {
+            // it should be full screen
+            window.StatusBar && window.StatusBar.hide();
+            document.body.classList.add('status-bar-hide');
+          }
+        });
       });
     },
 
@@ -2201,25 +2203,26 @@ window.ionic = {
      * @name ionic.Platform#fullScreen
      * @description
      * Sets whether the app is fullscreen or not (in Cordova).
-     * @param {boolean} showFullScreen Whether or not to set the app to fullscreen.
+     * @param {boolean=} showFullScreen Whether or not to set the app to fullscreen. Defaults to true.
+     * @param {boolean=} showStatusBar Whether or not to show the device's status bar. Defaults to false.
      */
     fullScreen: function(showFullScreen, showStatusBar) {
-      // fullScreen( [showFullScreen[, showStatusBar] ] )
       // showFullScreen: default is true if no param provided
       this.isFullScreen = (showFullScreen !== false);
 
       // add/remove the fullscreen classname to the body
       ionic.DomUtil.ready(function(){
         // run this only when or if the DOM is ready
-        if(ionic.Platform.isFullScreen) {
-          document.body.classList.add('fullscreen');
-        } else {
-          document.body.classList.remove('fullscreen');
-        }
+        ionic.requestAnimationFrame(function(){
+          if(ionic.Platform.isFullScreen) {
+            document.body.classList.add('fullscreen');
+          } else {
+            document.body.classList.remove('fullscreen');
+          }
+        });
+        // showStatusBar: default is false if no param provided
+        ionic.Platform.showStatusBar( (showStatusBar === true) );
       });
-
-      // showStatusBar: default is false if no param provided
-      this.showStatusBar( (showStatusBar === true) );
     }
 
   };
@@ -2253,10 +2256,13 @@ window.ionic = {
     }
     readyCallbacks = [];
     ionic.trigger('platformready', { target: document });
-    document.removeEventListener("deviceready", onPlatformReady, false);
+
+    ionic.requestAnimationFrame(function(){
+      document.body.classList.add('platform-ready');
+    });
   }
 
-})(window.ionic);
+})(this, document, ionic);
 
 (function(document, ionic) {
   'use strict';
@@ -2343,7 +2349,7 @@ window.ionic = {
 
     var ele = target.control || target;
 
-    if(ele.disabled || ele.type === 'file') return;
+    if(ele.disabled || ele.type === 'file' || ele.type === 'range') return;
 
     void 0;
 
@@ -2357,7 +2363,7 @@ window.ionic = {
 
     ele.dispatchEvent(clickEvent);
 
-    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA' || ele.tagName === 'SELECT') {
+    if(ele.tagName === 'INPUT' || ele.tagName === 'TEXTAREA') {
       ele.focus();
       e.preventDefault();
     } else {
@@ -2398,8 +2404,7 @@ window.ionic = {
           ele.tagName === "A" ||
           ele.tagName === "BUTTON" ||
           ele.tagName === "LABEL" ||
-          ele.tagName === "TEXTAREA" ||
-          ele.tagName === "SELECT" ) {
+          ele.tagName === "TEXTAREA" ) {
 
         return ionic.tapElement(ele, e);
       }
@@ -2448,10 +2453,15 @@ window.ionic = {
     // check if this click's coordinates are different than its touchstart/mousedown
     var c = getCoordinates(event);
 
-    return (c.x > startCoordinates.x + HIT_RADIUS ||
-            c.x < startCoordinates.x - HIT_RADIUS ||
-            c.y > startCoordinates.y + HIT_RADIUS ||
-            c.y < startCoordinates.y - HIT_RADIUS);
+    // Quick check for 0,0 which could be simulated mouse click for form submission
+    if(c.x === 0 && c.y === 0) {
+      return false;
+    }
+
+    return (c.x > startCoordinates.x + 2 ||
+            c.x < startCoordinates.x - 2 ||
+            c.y > startCoordinates.y + 2 ||
+            c.y < startCoordinates.y - 2);
   }
 
   function recordCoordinates(event) {
@@ -2482,23 +2492,19 @@ window.ionic = {
               gesture.originalEvent.changedTouches[0]) ||
           touches[0].originalEvent || touches[0];
 
-      if(e) return { x: e.clientX, y: e.clientY };
+      if(e) return { x: e.clientX || e.pageX, y: e.clientY || e.pageY };
     }
     return { x:0, y:0 };
   }
 
+  var clickPreventTimerId;
   function removeClickPrevent(e) {
-    setTimeout(function(){
+    clearTimeout(clickPreventTimerId);
+    clickPreventTimerId = setTimeout(function(){
       var tap = isRecentTap(e);
       if(tap) delete tapCoordinates[tap.id];
+      startCoordinates = {};
     }, REMOVE_PREVENT_DELAY);
-
-    setTimeout(function(){
-      for(var hitKey in hitElements) {
-        hitElements[hitKey] && hitElements[hitKey].classList.remove('active');
-        delete hitElements[hitKey];
-      }
-    }, 150);
   }
 
   function stopEvent(e){
@@ -2510,8 +2516,7 @@ window.ionic = {
   function blurActive() {
     var ele = document.activeElement;
     if(ele && (ele.tagName === "INPUT" ||
-               ele.tagName === "TEXTAREA" ||
-               ele.tagName === "SELECT")) {
+               ele.tagName === "TEXTAREA")) {
       // using a timeout to prevent funky scrolling while a keyboard hides
       setTimeout(function(){
         ele.blur();
@@ -2521,46 +2526,143 @@ window.ionic = {
 
   function recordStartCoordinates(e) {
     startCoordinates = getCoordinates(e);
-
-    var x, ele = e.target;
-    for(x=0; x<5; x++) {
-      if(!ele || ele.tagName === 'LABEL') break;
-      if( ele.classList.contains('item') || ele.classList.contains('button') ) {
-        hitElements[hitCounts] = ele;
-        hitCounts = (hitCounts > 24 ? 0 : hitCounts + 1);
-        ionic.requestAnimationFrame(function(){
-          ele.classList.add('active');
-        });
-        break;
-      }
-      ele = ele.parentElement;
-    }
   }
 
   var tapCoordinates = {}; // used to remember coordinates to ignore if they happen again quickly
   var startCoordinates = {}; // used to remember where the coordinates of the start of the tap
   var CLICK_PREVENT_DURATION = 1500; // max milliseconds ghostclicks in the same area should be prevented
-  var REMOVE_PREVENT_DELAY = 375; // delay after a touchend/mouseup before removing the ghostclick prevent
+  var REMOVE_PREVENT_DELAY = 380; // delay after a touchend/mouseup before removing the ghostclick prevent
   var HIT_RADIUS = 15;
-  var hitElements = {};
-  var hitCounts = 0;
 
-  // set global click handler and check if the event should stop or not
-  document.addEventListener('click', preventGhostClick, true);
+  ionic.Platform.ready(function(){
+
+    if(ionic.Platform.grade === 'c') {
+      // low performing phones should have a longer ghostclick prevent
+      REMOVE_PREVENT_DELAY = 800;
+    }
+
+    // set global click handler and check if the event should stop or not
+    document.addEventListener('click', preventGhostClick, true);
 
-  // global tap event listener polyfill for HTML elements that were "tapped" by the user
-  ionic.on("tap", tapPolyfill, document);
+    // global release event listener polyfill for HTML elements that were tapped or held
+    ionic.on("release", tapPolyfill, document);
 
-  // listeners used to remove ghostclick prevention
-  document.addEventListener('touchend', removeClickPrevent, false);
-  document.addEventListener('mouseup', removeClickPrevent, false);
+    // listeners used to remove ghostclick prevention
+    document.addEventListener('touchend', removeClickPrevent, false);
+    document.addEventListener('mouseup', removeClickPrevent, false);
 
-  // in the case the user touched the screen, then scrolled, it shouldn't fire the click
-  document.addEventListener('touchstart', recordStartCoordinates, false);
-  document.addEventListener('mousedown', recordStartCoordinates, false);
+    // in the case the user touched the screen, then scrolled, it shouldn't fire the click
+    document.addEventListener('touchstart', recordStartCoordinates, false);
+    document.addEventListener('mousedown', recordStartCoordinates, false);
+  });
 
 })(this, document, ionic);
 
+(function(document, ionic) {
+  'use strict';
+
+  var queueElements = {};   // elements that should get an active state in XX milliseconds
+  var activeElements = {};  // elements that are currently active
+  var keyId = 0;            // a counter for unique keys for the above ojects
+
+  ionic.activator = {
+
+    start: function(e) {
+      // when an element is touched/clicked, it climbs up a few
+      // parents to see if it is an .item or .button element
+      ionic.requestAnimationFrame(function(){
+        var ele = e.target;
+        var eleToActivate;
+
+        for(var x=0; x<4; x++) {
+          if(!ele) break;
+          if(eleToActivate && ele.classList.contains('item')) {
+            eleToActivate = ele;
+            break;
+          }
+          if( ele.tagName == 'A' || ele.tagName == 'BUTTON' || ele.getAttribute('ng-click') ) {
+            eleToActivate = ele;
+          }
+          if( ele.classList.contains('button') ) {
+            eleToActivate = ele;
+            break;
+          }
+          ele = ele.parentElement;
+        }
+
+        if(eleToActivate) {
+          // queue that this element should be set to active
+          queueElements[keyId] = eleToActivate;
+
+          // in XX milliseconds, set the queued elements to active
+          // add listeners to clear all queued/active elements onMove
+          if(e.type === 'touchstart') {
+            document.body.removeEventListener('mousedown', ionic.activator.start);
+            document.body.addEventListener('touchmove', clear, false);
+            setTimeout(activateElements, 85);
+          } else {
+            document.body.addEventListener('mousemove', clear, false);
+            ionic.requestAnimationFrame(activateElements);
+          }
+
+          keyId = (keyId > 19 ? 0 : keyId + 1);
+        }
+
+      });
+    }
+  };
+
+  function activateElements() {
+    // activate all elements in the queue
+    for(var key in queueElements) {
+      if(queueElements[key]) {
+        queueElements[key].classList.add('active');
+        activeElements[key] = queueElements[key];
+      }
+    }
+    queueElements = {};
+  }
+
+  function deactivateElements() {
+    for(var key in activeElements) {
+      if(activeElements[key]) {
+        activeElements[key].classList.remove('active');
+        delete activeElements[key];
+      }
+    }
+  }
+
+  function onEnd(e) {
+    // clear out any active/queued elements after XX milliseconds
+    setTimeout(clear, 200);
+  }
+
+  function clear() {
+    // clear out any elements that are queued to be set to active
+    queueElements = {};
+
+    // in the next frame, remove the active class from all active elements
+    ionic.requestAnimationFrame(deactivateElements);
+
+    // remove onMove listeners that clear out active elements
+    document.body.removeEventListener('mousemove', clear);
+    document.body.removeEventListener('touchmove', clear);
+  }
+
+  // use window.onload because this doesn't need to run immediately
+  window.addEventListener('load', function(){
+    // start an active element
+    document.body.addEventListener('touchstart', ionic.activator.start, false);
+    document.body.addEventListener('mousedown', ionic.activator.start, false);
+
+    // clear all active elements after XX milliseconds
+    document.body.addEventListener('touchend', onEnd, false);
+    document.body.addEventListener('mouseup', onEnd, false);
+    document.body.addEventListener('touchcancel', onEnd, false);
+  }, false);
+
+})(document, ionic);
+
 (function(ionic) {
 
   /* for nextUid() function below */
@@ -2773,12 +2875,12 @@ function androidKeyboardFix() {
     //If the height changes, and it's less than before, we have a keyboard open
     } else if (rememberedDeviceHeight !== window.innerHeight &&
                window.innerHeight < rememberedDeviceHeight) {
-      document.body.classList.add('hide-footer');
+      document.body.classList.add('footer-hide');
       //Wait for next frame so document.activeElement is set
       ionic.requestAnimationFrame(handleKeyboardChange);
     } else {
       //Otherwise we have a keyboard close or a *really* weird resize
-      document.body.classList.remove('hide-footer');
+      document.body.classList.remove('footer-hide');
     }
 
     function handleKeyboardChange() {
@@ -2850,7 +2952,7 @@ var IS_EMBEDDED_OBJECT_REGEX = /object|embed/i;
 
 	// Create namespaces
 	if (!global.core) {
-		global.core = { effect : {} };
+		var core = global.core = { effect : {} };
 
 	} else if (!core.effect) {
 		core.effect = {};
@@ -3436,8 +3538,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     function shouldIgnorePress(e) {
       // Don't react if initial down happens on a form element
       return e.target.tagName.match(IS_INPUT_LIKE_REGEX) ||
-        e.target.isContentEditable ||
-        e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX);
+             e.target.isContentEditable ||
+             e.target.tagName.match(IS_EMBEDDED_OBJECT_REGEX) ||
+             e.target.dataset.preventScroll;
     }
 
 
@@ -3502,8 +3605,18 @@ ionic.views.Scroll = ionic.views.View.inherit({
         mousedown = false;
       }, false);
 
+      var wheelShowBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('in');
+      }, 500, true);
+
+      var wheelHideBarFn = ionic.debounce(function() {
+        self.__fadeScrollbars('out');
+      }, 100, false);
+
       document.addEventListener("mousewheel", function(e) {
+        wheelShowBarFn();
         self.scrollBy(e.wheelDeltaX/self.options.wheelDampen, -e.wheelDeltaY/self.options.wheelDampen);
+        wheelHideBarFn();
       });
     }
   },
@@ -3558,9 +3671,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
   __resizeScrollbars: function() {
     var self = this;
 
-    // Bring the scrollbars in to show the content change
-    self.__fadeScrollbars('in');
-
     // Update horiz bar
     if(self.__indicatorX) {
       var width = Math.max(Math.round(self.__clientWidth * self.__clientWidth / (self.__contentWidth)), 20);
@@ -4175,8 +4285,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     var self = this;
 
-    self.__fadeScrollbars('in');
-
     // Reset interruptedAnimation flag
     self.__interruptedAnimation = true;
 
@@ -4419,6 +4527,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
       self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
       if (self.__isDragging) {
         self.__interruptedAnimation = false;
+        self.__fadeScrollbars('in');
       }
 
     }
@@ -4921,15 +5030,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
 (function(ionic) {
 'use strict';
 
-  /**
-   * @ngdoc controller
-   * @name ionicBar
-   * @module ionic
-   * @group page layout
-   * @description
-   * Controller for the {@link ionic.directive:ionHeaderBar} and
-   * {@link ionic.directive:ionFooterBar} directives.
-   */
   ionic.views.HeaderBar = ionic.views.View.inherit({
     initialize: function(opts) {
       this.el = opts.el;
@@ -4941,16 +5041,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.align();
     },
 
-    /**
-     * @ngdoc method
-     * @name ionicBar#align
-     * @description
-     * Aligns the title text with the buttons in the bar
-     * so that the title size is maximized and aligned correctly
-     * as much as possible.
-     * @param {string=} direction Which direction to align the title towards.
-     * Available: 'left', 'right', 'center'. Default: 'center'.
-     */
     align: function(align) {
 
       align || (align = this.alignTitle);
@@ -5034,7 +5124,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   var ITEM_OPTIONS_CLASS = 'item-options';
   var ITEM_PLACEHOLDER_CLASS = 'item-placeholder';
   var ITEM_REORDERING_CLASS = 'item-reordering';
-  var ITEM_DRAG_CLASS = 'item-drag';
+  var ITEM_REORDER_BTN_CLASS = 'item-reorder';
 
   var DragOp = function() {};
   DragOp.prototype = {
@@ -5043,6 +5133,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
     drag: function(e) {
     },
     end: function(e) {
+    },
+    isSameItem: function(item) {
+      return false;
     }
   };
 
@@ -5054,6 +5147,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
   };
 
   SlideDrag.prototype = new DragOp();
+
   SlideDrag.prototype.start = function(e) {
     var content, buttons, offsetX, buttonsWidth;
 
@@ -5091,6 +5185,27 @@ ionic.views.Scroll = ionic.views.View.inherit({
     };
   };
 
+  /**
+   * Check if this is the same item that was previously dragged.
+   */
+  SlideDrag.prototype.isSameItem = function(op) {
+    if(op._lastDrag && this._currentDrag) {
+      return this._currentDrag.content == op._lastDrag.content;
+    }
+    return false;
+  };
+
+  SlideDrag.prototype.clean = function(e) {
+    var lastDrag = this._lastDrag;
+
+    if(!lastDrag) return;
+
+    ionic.requestAnimationFrame(function() {
+      lastDrag.content.style[ionic.CSS.TRANSITION] = '';
+      lastDrag.content.style[ionic.CSS.TRANSFORM] = 'translate3d(0, 0, 0)';
+    });
+  };
+
   SlideDrag.prototype.drag = ionic.animationFrameThrottle(function(e) {
     var buttonsWidth;
 
@@ -5151,21 +5266,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
     }
 
-    // var content = this._currentDrag.content;
-
-    // var onRestingAnimationEnd = function(e) {
-    //   if(e.propertyName == '-webkit-transform') {
-    //     if(content) content.classList.remove(ITEM_SLIDING_CLASS);
-    //   }
-    //   e.target.removeEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-    // };
-
     ionic.requestAnimationFrame(function() {
-      // var currentX = parseFloat(_this._currentDrag.content.style[ionic.CSS.TRANSFORM].replace('translate3d(', '').split(',')[0]) || 0;
-      // if(currentX !== restingPoint) {
-      //   _this._currentDrag.content.classList.add(ITEM_SLIDING_CLASS);
-      //   _this._currentDrag.content.addEventListener('webkitTransitionEnd', onRestingAnimationEnd);
-      // }
       if(restingPoint === 0) {
         _this._currentDrag.content.style[ionic.CSS.TRANSFORM] = '';
       } else {
@@ -5175,9 +5276,9 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
 
       // Kill the current drag
+      _this._lastDrag = _this._currentDrag;
       _this._currentDrag = null;
 
-
       // We are done, notify caller
       doneCallback && doneCallback();
     });
@@ -5331,7 +5432,8 @@ ionic.views.Scroll = ionic.views.View.inherit({
       opts = ionic.extend({
         onReorder: function(el, oldIndex, newIndex) {},
         virtualRemoveThreshold: -200,
-        virtualAddThreshold: 200
+        virtualAddThreshold: 200,
+        canSwipe: false
       }, opts);
 
       ionic.extend(this, opts);
@@ -5346,10 +5448,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
       this.onRefreshOpening = opts.onRefreshOpening || function() {};
       this.onRefreshHolding = opts.onRefreshHolding || function() {};
 
-      window.ionic.onGesture('touch', function(e) {
-        _this._handleTouch(e);
-      }, this.el);
-
       window.ionic.onGesture('release', function(e) {
         _this._handleEndDrag(e);
       }, this.el);
@@ -5427,10 +5525,22 @@ ionic.views.Scroll = ionic.views.View.inherit({
       }
     },
 
+    /**
+     * Clear any active drag effects on the list.
+     */
+    clearDragEffects: function() {
+      if(this._lastDragOp) {
+        this._lastDragOp.clean && this._lastDragOp.clean();
+        this._lastDragOp = null;
+      }
+    },
+
     _initDrag: function() {
       //ionic.views.ListView.__super__._initDrag.call(this);
 
-      //this._isDragging = false;
+      // Store the last one
+      this._lastDragOp = this._dragOp;
+
       this._dragOp = null;
     },
 
@@ -5449,10 +5559,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _startDrag: function(e) {
       var _this = this;
 
+      var didStart = false;
+
       this._isDragging = false;
 
+      var lastDragOp = this._lastDragOp;
+
       // Check if this is a reorder drag
-      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_DRAG_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
+      if(ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction == 'up' || e.gesture.direction == 'down')) {
         var item = this._getItem(e.target);
 
         if(item) {
@@ -5466,20 +5580,25 @@ ionic.views.Scroll = ionic.views.View.inherit({
           });
           this._dragOp.start(e);
           e.preventDefault();
-          return;
         }
       }
 
       // Or check if this is a swipe to the side drag
       else if(!this._didDragUpOrDown && (e.gesture.direction == 'left' || e.gesture.direction == 'right') && Math.abs(e.gesture.deltaX) > 5) {
-        this._dragOp = new SlideDrag({ el: this.el });
-        this._dragOp.start(e);
-        e.preventDefault();
-        return;
+
+        // Make sure this is an item with buttons
+        var item = this._getItem(e.target);
+        if(item && item.querySelector('.item-options')) {
+          this._dragOp = new SlideDrag({ el: this.el });
+          this._dragOp.start(e);
+          e.preventDefault();
+        }
       }
 
-      // We aren't handling it, so pass it up the chain
-      //ionic.views.ListView.__super__._startDrag.call(this, e);
+      // If we had a last drag operation and this is a new one on a different item, clean that last one
+      if(lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
+        lastDragOp.clean && lastDragOp.clean();
+      }
     },
 
 
@@ -5493,13 +5612,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
         return;
       }
 
-      // Cancel touch timeout
-      clearTimeout(this._touchTimeout);
-      var items = _this.el.querySelectorAll('.item');
-      for(var i = 0, l = items.length; i < l; i++) {
-        items[i].classList.remove('active');
-      }
-
       this._dragOp.end(e, function() {
         _this._initDrag();
       });
@@ -5511,17 +5623,14 @@ ionic.views.Scroll = ionic.views.View.inherit({
     _handleDrag: function(e) {
       var _this = this, content, buttons;
 
-      if(Math.abs(e.gesture.deltaY) > 5) {
-        this._didDragUpOrDown = true;
+      if (!this.canSwipe) {
+        return;
       }
 
-      // If the user has a touch timeout to highlight an element, clear it if we
-      // get sufficient draggage
-      if(Math.abs(e.gesture.deltaX) > 10 || Math.abs(e.gesture.deltaY) > 10) {
-        clearTimeout(this._touchTimeout);
+      if(Math.abs(e.gesture.deltaY) > 5) {
+        this._didDragUpOrDown = true;
       }
 
-      clearTimeout(this._touchTimeout);
       // If we get a drag event, make sure we aren't in another drag, then check if we should
       // start one
       if(!this.isDragging && !this._dragOp) {
@@ -5536,25 +5645,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       e.gesture.srcEvent.preventDefault();
       this._dragOp.drag(e);
-    },
-
-    /**
-     * Handle the touch event to show the active state on an item if necessary.
-     */
-    _handleTouch: function(e) {
-      var _this = this;
-
-      var item = ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_CLASS);
-      if(!item) { return; }
-
-      this._touchTimeout = setTimeout(function() {
-        var items = _this.el.querySelectorAll('.item');
-        for(var i = 0, l = items.length; i < l; i++) {
-          items[i].classList.remove('active');
-        }
-        item.classList.add('active');
-      }, 250);
-    },
+    }
 
   });
 
@@ -5578,7 +5669,7 @@ ionic.views.Scroll = ionic.views.View.inherit({
 
       this.showDelay = opts.showDelay || 0;
 
-      this._loadingBox = this.el.querySelector('.loading');
+      this._loadingBox = this.el.querySelector('.loading') || this.el;
     },
     show: function() {
       var _this = this;
@@ -5607,6 +5698,11 @@ ionic.views.Scroll = ionic.views.View.inherit({
       window.clearTimeout(this._showDelayTimeout);
 
       this.el.classList.remove('active');
+    },
+    setContent: function(html) {
+      if (this._loadingBox) {
+        this._loadingBox.innerHTML = html || '';
+      }
     }
   });
 
@@ -5788,14 +5884,6 @@ ionic.views.Scroll = ionic.views.View.inherit({
  *
 */
 
-/**
- * @ngdoc controller
- * @name ionicSlideBox
- * @module ionic
- * @description
- * Controller for the {@link ionic.directive:ionSlideBox} directive.
- */
-
 (function(ionic) {
 'use strict';
 
@@ -6251,16 +6339,13 @@ ionic.views.Slider = ionic.views.View.inherit({
     }
 
     // Public API
+    this.update = function() {
+      setTimeout(setup);
+    };
     this.setup = function() {
       setup();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slide
-     * @param {number} to The index to slide to.
-     * @param {number=} speed The number of milliseconds for the change to take.
-     */
     this.slide = function(to, speed) {
       // cancel slideshow
       stop();
@@ -6268,23 +6353,13 @@ ionic.views.Slider = ionic.views.View.inherit({
       slide(to, speed);
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#prev
-     * @description Go to the previous slide. Wraps around if at the beginning.
-     */
-    this.prev = function() {
+    this.prev = this.previous = function() {
       // cancel slideshow
       stop();
 
       prev();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#next
-     * @description Go to the next slide. Wraps around if at the end.
-     */
     this.next = function() {
       // cancel slideshow
       stop();
@@ -6292,32 +6367,16 @@ ionic.views.Slider = ionic.views.View.inherit({
       next();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#stop
-     * @description Stop sliding. The slideBox will not move again until
-     * explicitly told to do so.
-     */
     this.stop = function() {
       // cancel slideshow
       stop();
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#currentIndex
-     * @returns number The index of the current slide.
-     */
     this.currentIndex = function() {
       // return current index position
       return index;
     };
 
-    /**
-     * @ngdoc method
-     * @name ionicSlideBox#slidesCount
-     * @returns number The number of slides there are currently.
-     */
     this.slidesCount = function() {
       // return total number of slides
       return length;
@@ -6996,13 +7055,24 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
       };
     },
 
+    isOpenLeft: function() {
+      return this.getOpenAmount() > 0;
+    },
+
+    isOpenRight: function() {
+      return this.getOpenAmount() < 0;
+    },
+
     /**
      * Toggle the left menu to open 100%
      */
-    toggleLeft: function() {
-      this.content.enableAnimation();
+    toggleLeft: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount > 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount <= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(100);
@@ -7012,10 +7082,13 @@ ionic.controllers.NavController = ionic.controllers.ViewController.inherit({
     /**
      * Toggle the right menu to open 100%
      */
-    toggleRight: function() {
-      this.content.enableAnimation();
+    toggleRight: function(shouldOpen) {
       var openAmount = this.getOpenAmount();
-      if(openAmount < 0) {
+      if (arguments.length === 0) {
+        shouldOpen = openAmount >= 0;
+      }
+      this.content.enableAnimation();
+      if(!shouldOpen) {
         this.openPercentage(0);
       } else {
         this.openPercentage(-100);
@@ -7381,3 +7454,5 @@ ionic.controllers.TabBarController = ionic.controllers.ViewController.inherit({
 });
 
 })(window.ionic);
+
+})();
\ No newline at end of file
diff --git a/phonegap/platforms/ios/www/styles/ionic.css b/phonegap/platforms/ios/www/styles/ionic.css
index c34f04f..24f78d8 100644
--- a/phonegap/platforms/ios/www/styles/ionic.css
+++ b/phonegap/platforms/ios/www/styles/ionic.css
@@ -2,7 +2,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -16,7 +16,7 @@
  * Copyright 2014 Drifty Co.
  * http://drifty.com/
  *
- * Ionic, v0.9.27
+ * Ionic, v1.0.0-beta.1
  * A powerful HTML5 mobile app framework.
  * http://ionicframework.com/
  *
@@ -26,7 +26,7 @@
  *
  */
 /*!
-  Ionicons, v#{$ionicons-version}
+  Ionicons, v1.4.1
   Created by Ben Sperry for the Ionic Framework, http://ionicons.com/
   https://twitter.com/benjsperry  https://twitter.com/ionicframework
   MIT License: https://github.com/driftyco/ionicons
@@ -1686,11 +1686,11 @@
  * --------------------------------------------------
  * Adapted from normalize.css and some reset.css. We don't care even one
  * bit about old IE, so we don't need any hacks for that in here.
- * 
+ *
  * There are probably other things we could remove here, as well.
  *
  * normalize.css v2.1.2 | MIT License | git.io/normalize
- 
+
  * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)
  * http://cssreset.com
  */
@@ -2116,6 +2116,9 @@ body.grade-b, body.grade-c {
   text-align: center;
   font-size: 30px; }
   .ionic-refresher-content .icon-pulling {
+    -webkit-animation-name: refresh-spin-back;
+    -moz-animation-name: refresh-spin-back;
+    animation-name: refresh-spin-back;
     -webkit-animation-duration: 200ms;
     -moz-animation-duration: 200ms;
     animation-duration: 200ms;
@@ -2140,6 +2143,20 @@ body.grade-b, body.grade-c {
   100% {
     -webkit-transform: rotate(-180deg); } }
 
+@keyframes refresh-spin-back {
+  0% {
+    transform: rotate(-180deg); }
+
+  100% {
+    transform: rotate(0); } }
+
+@-webkit-keyframes refresh-spin-back {
+  0% {
+    -webkit-transform: rotate(-180deg); }
+
+  100% {
+    -webkit-transform: rotate(0); } }
+
 .scroll-refresher.active .icon-pulling {
   display: block; }
 .scroll-refresher.active .icon-refreshing {
@@ -2193,6 +2210,12 @@ ion-infinite-scroll.active .scroll-infinite {
 .has-subheader {
   top: 88px; }
 
+.has-tabs-top {
+  top: 93px; }
+
+.has-header.has-subheader.has-tabs-top {
+  top: 137px; }
+
 .has-footer {
   bottom: 44px; }
 
@@ -2466,64 +2489,64 @@ a.subdued {
       padding-left: 8px;
       height: 28px; }
   .bar.bar-light {
-    background-color: white;
     border-color: #ddd;
+    background-color: white;
     background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
     color: #444; }
     .bar.bar-light .title {
       color: #444; }
   .bar.bar-stable {
-    background-color: #f8f8f8;
     border-color: #b2b2b2;
+    background-color: #f8f8f8;
     background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
     color: #444; }
     .bar.bar-stable .title {
       color: #444; }
   .bar.bar-positive {
-    background-color: #4a87ee;
     border-color: #145fd7;
+    background-color: #4a87ee;
     background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
     color: #fff; }
     .bar.bar-positive .title {
       color: #fff; }
   .bar.bar-calm {
-    background-color: #43cee6;
     border-color: #1aacc3;
+    background-color: #43cee6;
     background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
     color: #fff; }
     .bar.bar-calm .title {
       color: #fff; }
   .bar.bar-assertive {
-    background-color: #ef4e3a;
     border-color: #cc2311;
+    background-color: #ef4e3a;
     background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
     color: #fff; }
     .bar.bar-assertive .title {
       color: #fff; }
   .bar.bar-balanced {
-    background-color: #66cc33;
     border-color: #498f24;
+    background-color: #66cc33;
     background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
     color: #fff; }
     .bar.bar-balanced .title {
       color: #fff; }
   .bar.bar-energized {
-    background-color: #f0b840;
     border-color: #d39211;
+    background-color: #f0b840;
     background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
     color: #fff; }
     .bar.bar-energized .title {
       color: #fff; }
   .bar.bar-royal {
-    background-color: #8a6de9;
     border-color: #552bdf;
+    background-color: #8a6de9;
     background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
     color: #fff; }
     .bar.bar-royal .title {
       color: #fff; }
   .bar.bar-dark {
-    background-color: #444444;
     border-color: #111;
+    background-color: #444444;
     background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
     color: #fff; }
     .bar.bar-dark .title {
@@ -2580,200 +2603,200 @@ a.subdued {
     line-height: 32px; }
   .bar .button-bar + .button, .bar .button + .button-bar {
     margin-left: 5px; }
-  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .title + .buttons {
+  .bar .title + .button:last-child, .bar > .button + .button:last-child, .bar > .button.pull-right, .bar .buttons.pull-right, .bar .title + .buttons {
     position: absolute;
     top: 5px;
     right: 5px;
     bottom: 5px; }
 
 .bar-light .button {
-  color: #444;
+  border-color: #ddd;
   background-color: white;
-  border-color: #ddd; }
+  color: #444; }
   .bar-light .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-light .button.active {
+    border-color: #ccc;
     background-color: #fafafa;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #ccc; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-light .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-light .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-stable .button {
-  color: #444;
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
-  border-color: #b2b2b2; }
+  color: #444; }
   .bar-stable .button:hover {
     color: #444;
     text-decoration: none; }
   .bar-stable .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-stable .button.button-clear {
-    color: #444;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #444;
     font-size: 17px; }
   .bar-stable .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-positive .button {
-  color: #fff;
+  border-color: #145fd7;
   background-color: #4a87ee;
-  border-color: #145fd7; }
+  color: #fff; }
   .bar-positive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-positive .button.active {
+    border-color: #145fd7;
     background-color: #145fd7;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #145fd7; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-positive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-positive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-calm .button {
-  color: #fff;
+  border-color: #1aacc3;
   background-color: #43cee6;
-  border-color: #1aacc3; }
+  color: #fff; }
   .bar-calm .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-calm .button.active {
+    border-color: #1aacc3;
     background-color: #1aacc3;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #1aacc3; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-calm .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-calm .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-assertive .button {
-  color: #fff;
+  border-color: #cc2311;
   background-color: #ef4e3a;
-  border-color: #cc2311; }
+  color: #fff; }
   .bar-assertive .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-assertive .button.active {
+    border-color: #cc2311;
     background-color: #cc2311;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #cc2311; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-assertive .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-assertive .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-balanced .button {
-  color: #fff;
+  border-color: #498f24;
   background-color: #66cc33;
-  border-color: #498f24; }
+  color: #fff; }
   .bar-balanced .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-balanced .button.active {
+    border-color: #498f24;
     background-color: #498f24;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #498f24; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-balanced .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-balanced .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-energized .button {
-  color: #fff;
+  border-color: #d39211;
   background-color: #f0b840;
-  border-color: #d39211; }
+  color: #fff; }
   .bar-energized .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-energized .button.active {
+    border-color: #d39211;
     background-color: #d39211;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #d39211; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-energized .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-energized .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-royal .button {
-  color: #fff;
+  border-color: #552bdf;
   background-color: #8a6de9;
-  border-color: #552bdf; }
+  color: #fff; }
   .bar-royal .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-royal .button.active {
+    border-color: #552bdf;
     background-color: #552bdf;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #552bdf; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-royal .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-royal .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-dark .button {
-  color: #fff;
+  border-color: #111;
   background-color: #444444;
-  border-color: #111; }
+  color: #fff; }
   .bar-dark .button:hover {
     color: #fff;
     text-decoration: none; }
   .bar-dark .button.active {
+    border-color: #000;
     background-color: #262626;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #000; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .bar-dark .button.button-clear {
-    color: #fff;
-    background: none;
     border-color: transparent;
+    background: none;
     box-shadow: none;
+    color: #fff;
     font-size: 17px; }
   .bar-dark .button.button-icon {
-    background: none;
-    border-color: transparent; }
+    border-color: transparent;
+    background: none; }
 
 .bar-header {
   top: 0;
@@ -2823,9 +2846,9 @@ a.subdued {
   -webkit-transform: translate3d(0, 0, 0);
   -moz-transform: translate3d(0, 0, 0);
   transform: translate3d(0, 0, 0);
+  border-color: #b2b2b2;
   background-color: #f8f8f8;
   background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-  border-color: #b2b2b2;
   color: #444;
   position: absolute;
   bottom: 0;
@@ -2839,78 +2862,6 @@ a.subdued {
   .tabs .tab-item .badge {
     background-color: #444;
     color: #f8f8f8; }
-  .tabs.tabs-light {
-    background-color: #fff;
-    background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
-    border-color: #ddd;
-    color: #444; }
-    .tabs.tabs-light .tab-item .badge {
-      background-color: #444;
-      color: #fff; }
-  .tabs.tabs-stable {
-    background-color: #f8f8f8;
-    background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
-    border-color: #b2b2b2;
-    color: #444; }
-    .tabs.tabs-stable .tab-item .badge {
-      background-color: #444;
-      color: #f8f8f8; }
-  .tabs.tabs-positive {
-    background-color: #4a87ee;
-    background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
-    border-color: #145fd7;
-    color: #fff; }
-    .tabs.tabs-positive .tab-item .badge {
-      background-color: #fff;
-      color: #4a87ee; }
-  .tabs.tabs-calm {
-    background-color: #43cee6;
-    background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
-    border-color: #1aacc3;
-    color: #fff; }
-    .tabs.tabs-calm .tab-item .badge {
-      background-color: #fff;
-      color: #43cee6; }
-  .tabs.tabs-assertive {
-    background-color: #ef4e3a;
-    background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
-    border-color: #cc2311;
-    color: #fff; }
-    .tabs.tabs-assertive .tab-item .badge {
-      background-color: #fff;
-      color: #ef4e3a; }
-  .tabs.tabs-balanced {
-    background-color: #66cc33;
-    background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
-    border-color: #498f24;
-    color: #fff; }
-    .tabs.tabs-balanced .tab-item .badge {
-      background-color: #fff;
-      color: #66cc33; }
-  .tabs.tabs-energized {
-    background-color: #f0b840;
-    background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
-    border-color: #d39211;
-    color: #fff; }
-    .tabs.tabs-energized .tab-item .badge {
-      background-color: #fff;
-      color: #f0b840; }
-  .tabs.tabs-royal {
-    background-color: #8a6de9;
-    background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
-    border-color: #552bdf;
-    color: #fff; }
-    .tabs.tabs-royal .tab-item .badge {
-      background-color: #fff;
-      color: #8a6de9; }
-  .tabs.tabs-dark {
-    background-color: #444;
-    background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
-    border-color: #111;
-    color: #fff; }
-    .tabs.tabs-dark .tab-item .badge {
-      background-color: #fff;
-      color: #444; }
   @media (min--moz-device-pixel-ratio: 1.5), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
     .tabs {
       padding-top: 2px;
@@ -2920,7 +2871,90 @@ a.subdued {
       background-size: 100% 1px;
       background-repeat: no-repeat; } }
 
-.tabs-top {
+/* Allow parent element of tabs to define color, or just the tab itself */
+.tabs-light > .tabs, .tabs.tabs-light {
+  border-color: #ddd;
+  background-color: #fff;
+  background-image: linear-gradient(0deg, #ddd, #ddd 50%, transparent 50%);
+  color: #444; }
+  .tabs-light > .tabs .tab-item .badge, .tabs.tabs-light .tab-item .badge {
+    background-color: #444;
+    color: #fff; }
+
+.tabs-stable > .tabs, .tabs.tabs-stable {
+  border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  background-image: linear-gradient(0deg, #b2b2b2, #b2b2b2 50%, transparent 50%);
+  color: #444; }
+  .tabs-stable > .tabs .tab-item .badge, .tabs.tabs-stable .tab-item .badge {
+    background-color: #444;
+    color: #f8f8f8; }
+
+.tabs-positive > .tabs, .tabs.tabs-positive {
+  border-color: #145fd7;
+  background-color: #4a87ee;
+  background-image: linear-gradient(0deg, #145fd7, #145fd7 50%, transparent 50%);
+  color: #fff; }
+  .tabs-positive > .tabs .tab-item .badge, .tabs.tabs-positive .tab-item .badge {
+    background-color: #fff;
+    color: #4a87ee; }
+
+.tabs-calm > .tabs, .tabs.tabs-calm {
+  border-color: #1aacc3;
+  background-color: #43cee6;
+  background-image: linear-gradient(0deg, #1aacc3, #1aacc3 50%, transparent 50%);
+  color: #fff; }
+  .tabs-calm > .tabs .tab-item .badge, .tabs.tabs-calm .tab-item .badge {
+    background-color: #fff;
+    color: #43cee6; }
+
+.tabs-assertive > .tabs, .tabs.tabs-assertive {
+  border-color: #cc2311;
+  background-color: #ef4e3a;
+  background-image: linear-gradient(0deg, #cc2311, #cc2311 50%, transparent 50%);
+  color: #fff; }
+  .tabs-assertive > .tabs .tab-item .badge, .tabs.tabs-assertive .tab-item .badge {
+    background-color: #fff;
+    color: #ef4e3a; }
+
+.tabs-balanced > .tabs, .tabs.tabs-balanced {
+  border-color: #498f24;
+  background-color: #66cc33;
+  background-image: linear-gradient(0deg, #498f24, #498f24 50%, transparent 50%);
+  color: #fff; }
+  .tabs-balanced > .tabs .tab-item .badge, .tabs.tabs-balanced .tab-item .badge {
+    background-color: #fff;
+    color: #66cc33; }
+
+.tabs-energized > .tabs, .tabs.tabs-energized {
+  border-color: #d39211;
+  background-color: #f0b840;
+  background-image: linear-gradient(0deg, #d39211, #d39211 50%, transparent 50%);
+  color: #fff; }
+  .tabs-energized > .tabs .tab-item .badge, .tabs.tabs-energized .tab-item .badge {
+    background-color: #fff;
+    color: #f0b840; }
+
+.tabs-royal > .tabs, .tabs.tabs-royal {
+  border-color: #552bdf;
+  background-color: #8a6de9;
+  background-image: linear-gradient(0deg, #552bdf, #552bdf 50%, transparent 50%);
+  color: #fff; }
+  .tabs-royal > .tabs .tab-item .badge, .tabs.tabs-royal .tab-item .badge {
+    background-color: #fff;
+    color: #8a6de9; }
+
+.tabs-dark > .tabs, .tabs.tabs-dark {
+  border-color: #111;
+  background-color: #444;
+  background-image: linear-gradient(0deg, #111, #111 50%, transparent 50%);
+  color: #fff; }
+  .tabs-dark > .tabs .tab-item .badge, .tabs.tabs-dark .tab-item .badge {
+    background-color: #fff;
+    color: #444; }
+
+/* Allow parent element to have tabs-top */
+.tabs-top > .tabs, .tabs.tabs-top {
   top: 44px;
   padding-top: 0;
   padding-bottom: 2px;
@@ -2949,6 +2983,9 @@ a.subdued {
   .tab-item:hover {
     cursor: pointer; }
 
+.tabs-item-hide, .tabs-item-hide > .tabs {
+  display: none; }
+
 .tabs-icon-top .tab-item, .tabs-icon-bottom .tab-item {
   font-size: 12px;
   line-height: 14px; }
@@ -2992,25 +3029,25 @@ a.subdued {
 
 /* Navigational tab */
 /* Active state for tab */
-.tab-item.active {
+.tab-item.tab-item-active {
   opacity: 1; }
-  .tab-item.active.tab-item-light {
+  .tab-item.tab-item-active.tab-item-light {
     color: #fff; }
-  .tab-item.active.tab-item-stable {
+  .tab-item.tab-item-active.tab-item-stable {
     color: #f8f8f8; }
-  .tab-item.active.tab-item-positive {
+  .tab-item.tab-item-active.tab-item-positive {
     color: #4a87ee; }
-  .tab-item.active.tab-item-calm {
+  .tab-item.tab-item-active.tab-item-calm {
     color: #43cee6; }
-  .tab-item.active.tab-item-assertive {
+  .tab-item.tab-item-active.tab-item-assertive {
     color: #ef4e3a; }
-  .tab-item.active.tab-item-balanced {
+  .tab-item.tab-item-active.tab-item-balanced {
     color: #66cc33; }
-  .tab-item.active.tab-item-energized {
+  .tab-item.tab-item-active.tab-item-energized {
     color: #f0b840; }
-  .tab-item.active.tab-item-royal {
+  .tab-item.tab-item-active.tab-item-royal {
     color: #8a6de9; }
-  .tab-item.active.tab-item-dark {
+  .tab-item.tab-item-active.tab-item-dark {
     color: #444; }
 
 .item.tabs {
@@ -3103,7 +3140,6 @@ a.subdued {
     left: 20%;
     overflow: visible;
     min-height: 240px;
-    max-width: 768px;
     width: 60%; }
   .modal.ng-leave-active {
     bottom: 0; } }
@@ -3186,6 +3222,13 @@ a.subdued {
   .popup-buttons .button:last-child {
     margin-right: 0px; }
 
+.popup-open {
+  pointer-events: none; }
+  .popup-open.modal-open .modal {
+    pointer-events: none; }
+  .popup-open .popup-backdrop, .popup-open .popup {
+    pointer-events: auto; }
+
 .popup-backdrop {
   -webkit-animation-name: fadeIn;
   -moz-animation-name: fadeIn;
@@ -3208,6 +3251,9 @@ a.subdued {
   background-color: rgba(0, 0, 0, 0.4); }
 
 .loading-backdrop {
+  -webkit-transition: visibility 0s linear 0.3s;
+  -moz-transition: visibility 0s linear 0.3s;
+  transition: visibility 0s linear 0.3s;
   position: fixed;
   top: 0;
   left: 0;
@@ -3220,13 +3266,8 @@ a.subdued {
     -moz-transition-delay: 0s;
     transition-delay: 0s;
     visibility: visible; }
-
-.loading-backdrop {
-  -webkit-transition: visibility 0s linear 0.3s;
-  -moz-transition: visibility 0s linear 0.3s;
-  transition: visibility 0s linear 0.3s; }
-  .loading-backdrop.active {
-    background-color: rgba(0, 0, 0, 0.7); }
+    .loading-backdrop.active.show-backdrop {
+      background-color: rgba(0, 0, 0, 0.7); }
 
 .loading {
   position: fixed;
@@ -3247,12 +3288,9 @@ a.subdued {
  * --------------------------------------------------
  */
 .item {
-  color: #444;
-  background-color: #fff;
   border-color: #ddd;
-  -webkit-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  -moz-transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
-  transition: margin-left 0.2s ease-in-out, margin-right 0.2s ease-in-out, left 0.2s ease-in-out;
+  background-color: #fff;
+  color: #444;
   position: relative;
   z-index: 2;
   display: block;
@@ -3288,77 +3326,81 @@ a.subdued {
     position: absolute;
     top: 15px;
     right: 35px; }
+  .item.item-button-right .badge {
+    right: 65px; }
   .item.item-divider .badge {
     top: 7.5px; }
   .item .badge + .badge {
     margin-right: 5px; }
   .item.item-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
   .item.item-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
   .item.item-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
   .item.item-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
   .item.item-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
   .item.item-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
   .item.item-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
   .item.item-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
   .item.item-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
+  .item[ng-click]:hover {
+    cursor: pointer; }
 
 .item.active:not(.item-divider):not(.item-input):not(.item-input-inset), .item-complex.active .item-content {
-  background-color: #D9D9D9;
-  border-color: #ccc; }
+  border-color: #ccc;
+  background-color: #D9D9D9; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-light, .item-complex.active .item-content.item-light {
-    background-color: #fafafa;
-    border-color: #ccc; }
+    border-color: #ccc;
+    background-color: #fafafa; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-stable, .item-complex.active .item-content.item-stable {
-    background-color: #e5e5e5;
-    border-color: #a2a2a2; }
+    border-color: #a2a2a2;
+    background-color: #e5e5e5; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-positive, .item-complex.active .item-content.item-positive {
-    background-color: #145fd7;
-    border-color: #145fd7; }
+    border-color: #145fd7;
+    background-color: #145fd7; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-calm, .item-complex.active .item-content.item-calm {
-    background-color: #1aacc3;
-    border-color: #1aacc3; }
+    border-color: #1aacc3;
+    background-color: #1aacc3; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-assertive, .item-complex.active .item-content.item-assertive {
-    background-color: #cc2311;
-    border-color: #cc2311; }
+    border-color: #cc2311;
+    background-color: #cc2311; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-balanced, .item-complex.active .item-content.item-balanced {
-    background-color: #498f24;
-    border-color: #498f24; }
+    border-color: #498f24;
+    background-color: #498f24; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-energized, .item-complex.active .item-content.item-energized {
-    background-color: #d39211;
-    border-color: #d39211; }
+    border-color: #d39211;
+    background-color: #d39211; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-royal, .item-complex.active .item-content.item-royal {
-    background-color: #552bdf;
-    border-color: #552bdf; }
+    border-color: #552bdf;
+    background-color: #552bdf; }
   .item.active:not(.item-divider):not(.item-input):not(.item-input-inset).item-dark, .item-complex.active .item-content.item-dark {
-    background-color: #262626;
-    border-color: #000; }
+    border-color: #000;
+    background-color: #262626; }
 
 .item, .item h1, .item h2, .item h3, .item h4, .item h5, .item h6, .item p, .item-content, .item-content h1, .item-content h2, .item-content h3, .item-content h4, .item-content h5, .item-content h6, .item-content p {
   overflow: hidden;
@@ -3384,14 +3426,6 @@ a.item {
   padding: 0; }
 
 .item-complex .item-content, .item-radio .item-content {
-  /**
-   * The content area of a complex list item. This area can
-   * Slide left and right and be dragged to support different
-   * UI interactions.
-   */
-  -webkit-transition: all 0.1s ease-in-out;
-  -moz-transition: all 0.1s ease-in-out;
-  transition: all 0.1s ease-in-out;
   position: relative;
   z-index: 2;
   padding: 15px 40px 15px 15px;
@@ -3545,40 +3579,38 @@ a.item-content {
  * By default, if an .item is created out of an <a> or <button>
  * then a arrow will be added to the right side of the item.
  */
-a.item, button.item, .item a[href].item-content, .item[ng-click] a.item-content {
+a.item, button.item, .item[href] .item-content, .item[ng-click] .item-content {
   padding-right: 40px; }
+  a.item:after, button.item:after, .item[href] .item-content:after, .item[ng-click] .item-content:after {
+    display: -webkit-box;
+    display: -webkit-flex;
+    display: -moz-box;
+    display: -moz-flex;
+    display: -ms-flexbox;
+    display: flex;
+    -webkit-box-align: center;
+    -ms-flex-align: center;
+    -webkit-align-items: center;
+    -moz-align-items: center;
+    align-items: center;
+    -webkit-font-smoothing: antialiased;
+    font-smoothing: antialiased;
+    position: absolute;
+    top: 0;
+    right: 11px;
+    height: 100%;
+    color: #ccc;
+    content: "\f125";
+    text-transform: none;
+    font-weight: normal;
+    font-style: normal;
+    font-variant: normal;
+    font-size: 16px;
+    font-family: 'Ionicons';
+    line-height: 1;
+    speak: none; }
 
-a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-click] a.item-content:after {
-  /* By default, both <a> and <button> have right side arrow icons */
-  display: -webkit-box;
-  display: -webkit-flex;
-  display: -moz-box;
-  display: -moz-flex;
-  display: -ms-flexbox;
-  display: flex;
-  -webkit-box-align: center;
-  -ms-flex-align: center;
-  -webkit-align-items: center;
-  -moz-align-items: center;
-  align-items: center;
-  -webkit-font-smoothing: antialiased;
-  font-smoothing: antialiased;
-  position: absolute;
-  top: 0;
-  right: 11px;
-  height: 100%;
-  color: #ccc;
-  content: "\f125";
-  text-transform: none;
-  font-weight: normal;
-  font-style: normal;
-  font-variant: normal;
-  font-size: 16px;
-  font-family: 'Ionicons';
-  line-height: 1;
-  speak: none; }
-
-.grade-b a.item:after, .grade-b button.item:after, .grade-b .item a[href].item-content:after, .grade-b .item[ng-click] a.item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item a[href].item-content:after, .grade-c .item[ng-click] a.item-content:after {
+.grade-b a.item:after, .grade-b button.item:after, .grade-b .item[href] .item-content:after, .grade-b .item[ng-click] .item-content:after, .grade-c a.item:after, .grade-c button.item:after, .grade-c .item[href] .item-content:after, .grade-c .item[ng-click] .item-content:after {
   -webkit-font-smoothing: none;
   font-smoothing: none;
   content: '>';
@@ -3587,10 +3619,10 @@ a.item:after, button.item:after, .item a[href].item-content:after, .item[ng-clic
 a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after, button.item-button-right:after, .item a.item-content:after {
   display: none; }
 
-.item-avatar {
+.item-avatar, .item-avatar .item-content {
   padding-left: 70px;
   min-height: 70px; }
-  .item-avatar img:first-child, .item-avatar .item-img {
+  .item-avatar > img:first-child, .item-avatar .item-image, .item-avatar .item-content > img:first-child, .item-avatar .item-content .item-image {
     position: absolute;
     top: 15px;
     left: 15px;
@@ -3602,7 +3634,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .item-thumbnail-left, .item-thumbnail-left .item-content {
   padding-left: 105px;
   min-height: 100px; }
-  .item-thumbnail-left > img:first-child, .item-thumbnail-left > .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content > .item-image {
+  .item-thumbnail-left > img:first-child, .item-thumbnail-left .item-image, .item-thumbnail-left .item-content > img:first-child, .item-thumbnail-left .item-content .item-image {
     position: absolute;
     top: 10px;
     left: 10px;
@@ -3610,13 +3642,13 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-avatar.item-complex, .item-thumbnail-left.item-complex {
   padding-left: 0; }
 
 .item-thumbnail-right, .item-thumbnail-right .item-content {
   padding-right: 105px;
   min-height: 100px; }
-  .item-thumbnail-right > img:first-child, .item-thumbnail-right > .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content > .item-image {
+  .item-thumbnail-right > img:first-child, .item-thumbnail-right .item-image, .item-thumbnail-right .item-content > img:first-child, .item-thumbnail-right .item-content .item-image {
     position: absolute;
     top: 10px;
     right: 10px;
@@ -3624,7 +3656,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     max-height: 80px;
     width: 100%; }
 
-.item-thumbnail-left.item-complex {
+.item-thumbnail-right.item-complex {
   padding-right: 0; }
 
 .item-image {
@@ -3656,32 +3688,58 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   color: #aaa;
   font-size: 14px; }
 
-.item-reordering {
-  position: absolute;
-  z-index: 9;
-  width: 100%; }
+.item-left-editable .item-content, .item-right-editable .item-content {
+  -webkit-transition-duration: 250ms;
+  -moz-transition-duration: 250ms;
+  transition-duration: 250ms;
+  -webkit-transition-timing-function: ease-in-out;
+  -moz-transition-timing-function: ease-in-out;
+  transition-timing-function: ease-in-out;
+  -webkit-transition-property: none;
+  -moz-transition-property: none;
+  transition-property: none; }
+
+.item-left-editable .item-content {
+  -webkit-transition-property: -webkit-transform;
+  -moz-transition-property: -moz-transform;
+  transition-property: transform; }
+
+.item-right-editable .item-content {
+  -webkit-transition-property: margin-right;
+  -moz-transition-property: margin-right;
+  transition-property: margin-right; }
+
+.item-left-editable.item-right-editable .item-content {
+  -webkit-transition-property: -webkit-transform, margin-right;
+  -moz-transition-property: -moz-transform, margin-right;
+  transition-property: transform, margin-right; }
+
+.list-left-editing .item-left-editable .item-content, .item-left-editing.item-left-editable .item-content {
+  -webkit-transform: translate3d(50px, 0, 0);
+  -moz-transform: translate3d(50px, 0, 0);
+  transform: translate3d(50px, 0, 0); }
 
-.item-placeholder {
-  opacity: 0.7; }
+.list-right-editing .item-right-editable .item-content, .item-right-editing.item-right-editable .item-content {
+  margin-right: 50px; }
 
-/**
- * The left-side edit area of a complex list item. This area shows
- * whe the list item is in edit mode.
- */
-.item-edit {
-  -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-  transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
+.item-left-edit {
+  -webkit-transition: all ease-in-out 250ms;
+  -moz-transition: all ease-in-out 250ms;
+  transition: all ease-in-out 250ms;
+  -webkit-transform: translate3d(-42px, 0, 0);
+  -moz-transform: translate3d(-42px, 0, 0);
+  transform: translate3d(-42px, 0, 0);
   position: absolute;
   top: 0;
-  left: 8px;
+  left: 0;
   z-index: 0;
-  width: 48px;
+  width: 50px;
   height: 100%;
-  line-height: 100%; }
-  .item-edit .button {
+  line-height: 100%;
+  opacity: 0; }
+  .item-left-edit .button {
     height: 100%; }
-    .item-edit .button.icon {
+    .item-left-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3695,30 +3753,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       align-items: center;
       position: absolute;
       top: 0;
-      left: 0;
-      height: 100%;
-      color: #ef4e3a;
-      font-size: 24px; }
-  .item-edit.ng-enter {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: -48px;
-    opacity: 0; }
-  .item-edit.ng-enter-active {
-    left: 8px;
-    opacity: 1; }
-  .item-edit.ng-leave {
-    -webkit-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    -moz-transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    transition: left 0.2s ease-in-out, opacity 0.2s ease-in-out;
-    left: 0px;
-    opacity: 1; }
-  .item-edit.ng-leave-active {
-    left: -48px;
-    opacity: 0; }
+      height: 100%; }
+
+.list-left-editing .item-left-edit, .item-left-editing .item-left-edit {
+  -webkit-transform: translate3d(8px, 0, 0);
+  -moz-transform: translate3d(8px, 0, 0);
+  transform: translate3d(8px, 0, 0);
+  opacity: 1; }
+
+.item-delete .button.icon {
+  color: #ef4e3a;
+  font-size: 24px; }
+  .item-delete .button.icon:hover {
+    opacity: 0.7; }
 
-.item-drag {
+.item-right-edit {
   position: absolute;
   top: 0;
   right: 0;
@@ -3726,10 +3775,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   width: 50px;
   height: 100%;
   background: inherit; }
-  .item-drag .button {
-    min-width: 42px;
+  .item-right-edit .button {
+    min-width: 50px;
     height: 100%; }
-    .item-drag .button.icon:before {
+    .item-right-edit .button.icon {
       display: -webkit-box;
       display: -webkit-flex;
       display: -moz-box;
@@ -3746,6 +3795,21 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
       height: 100%;
       font-size: 32px; }
 
+.item-reorder .button.icon {
+  color: #444;
+  font-size: 32px; }
+
+.item-reordering {
+  position: absolute;
+  z-index: 9;
+  width: 100%;
+  box-shadow: 0px 0px 10px 0px #aaa; }
+  .item-reordering .item-reorder {
+    z-index: 1; }
+
+.item-placeholder {
+  opacity: 0.7; }
+
 /**
  * The hidden right-side buttons that can be exposed under a list item
  * with dragging.
@@ -3775,25 +3839,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
   padding-left: 0;
   margin-bottom: 20px; }
 
-/* If a list is the last item in a container, don't add margin-bottom */
 .list:last-child {
   margin-bottom: 0px; }
 
 /**
- * List editing styles. These trigger when the entire list goes into
- * "edit mode" or reordering list items
- */
-.list-editing .item-content {
-  -webkit-transform: translate3d(50px, 0, 0);
-  -moz-transform: translate3d(50px, 0, 0);
-  transform: translate3d(50px, 0, 0); }
-
-.list-reordering .item-content {
-  margin-right: 50px; }
-.list-reordering .item-drag {
-  z-index: 1; }
-
-/**
  * List Header
  * --------------------------------------------------
  */
@@ -3857,6 +3906,7 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .badge {
   background-color: transparent;
   color: #AAAAAA;
+  z-index: 1;
   display: inline-block;
   padding: 3px 8px;
   min-width: 10px;
@@ -3908,19 +3958,19 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
  */
 .slider {
   position: relative;
-  overflow: hidden;
-  visibility: hidden; }
+  visibility: hidden;
+  overflow: hidden; }
 
 .slider-slides {
   position: relative;
   height: 100%; }
 
 .slider-slide {
-  display: block;
   position: relative;
+  display: block;
+  float: left;
   width: 100%;
   height: 100%;
-  float: left;
   vertical-align: top; }
 
 .slider-slide-image > img {
@@ -3929,9 +3979,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
 .slider-pager {
   position: absolute;
   bottom: 20px;
+  z-index: 1;
   width: 100%;
-  text-align: center;
-  z-index: 1; }
+  height: 15px;
+  text-align: center; }
   .slider-pager .slider-pager-page {
     display: inline-block;
     margin: 0px 3px;
@@ -3940,10 +3991,10 @@ a.item-icon-right:after, button.item-icon-right:after, a.item-button-right:after
     text-decoration: none;
     opacity: 0.3; }
     .slider-pager .slider-pager-page.active {
-      opacity: 1;
       -webkit-transition: opacity 0.4s ease-in;
       -moz-transition: opacity 0.4s ease-in;
-      transition: opacity 0.4s ease-in; }
+      transition: opacity 0.4s ease-in;
+      opacity: 1; }
 
 /**
  * Split Pane
@@ -4008,8 +4059,8 @@ legend {
     font-size: 1.07143; }
 
 label, input, button, select, textarea {
-  font-size: 14px;
   font-weight: normal;
+  font-size: 14px;
   line-height: 1.42857; }
 
 input, button, select, textarea {
@@ -4029,7 +4080,7 @@ input, button, select, textarea {
   align-items: center;
   position: relative;
   overflow: hidden;
-  padding: 6px 8px 5px; }
+  padding: 6px 0 5px 8px; }
   .item-input input {
     -webkit-border-radius: 0;
     -moz-border-radius: 0;
@@ -4044,6 +4095,7 @@ input, button, select, textarea {
     -moz-appearance: none;
     appearance: none;
     margin: 0;
+    padding-right: 24px;
     background-color: transparent; }
   .item-input .button .icon {
     -webkit-box-flex: 0;
@@ -4619,13 +4671,22 @@ input[type="range"] {
   padding-left: 0; }
 
 /**
+ * Progress
+ * --------------------------------------------------
+ */
+progress {
+  display: block;
+  margin: 15px auto;
+  width: 100%; }
+
+/**
  * Buttons
  * --------------------------------------------------
  */
 .button {
-  color: #444;
-  background-color: #f8f8f8;
   border-color: #b2b2b2;
+  background-color: #f8f8f8;
+  color: #444;
   position: relative;
   display: inline-block;
   margin: 0;
@@ -4645,9 +4706,9 @@ input[type="range"] {
     color: #444;
     text-decoration: none; }
   .button.active {
+    border-color: #a2a2a2;
     background-color: #e5e5e5;
-    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-    border-color: #a2a2a2; }
+    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
   .button:after {
     position: absolute;
     top: -6px;
@@ -4675,248 +4736,248 @@ input[type="range"] {
     margin-top: 10px;
     margin-bottom: 10px; }
   .button.button-light {
-    color: #444;
+    border-color: #ddd;
     background-color: #fff;
-    border-color: #ddd; }
+    color: #444; }
     .button.button-light:hover {
       color: #444;
       text-decoration: none; }
     .button.button-light.active {
+      border-color: #ccc;
       background-color: #fafafa;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #ccc; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-light.button-clear {
-      color: #ddd;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-light.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ddd; }
+    .button.button-light.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-light.button-outline {
-      background: transparent;
       border-color: #ddd;
+      background: transparent;
       color: #ddd; }
       .button.button-light.button-outline.active {
         background-color: #ddd;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-stable {
-    color: #444;
+    border-color: #b2b2b2;
     background-color: #f8f8f8;
-    border-color: #b2b2b2; }
+    color: #444; }
     .button.button-stable:hover {
       color: #444;
       text-decoration: none; }
     .button.button-stable.active {
+      border-color: #a2a2a2;
       background-color: #e5e5e5;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #a2a2a2; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-stable.button-clear {
-      color: #b2b2b2;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-stable.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #b2b2b2; }
+    .button.button-stable.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-stable.button-outline {
-      background: transparent;
       border-color: #b2b2b2;
+      background: transparent;
       color: #b2b2b2; }
       .button.button-stable.button-outline.active {
         background-color: #b2b2b2;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-positive {
-    color: #fff;
+    border-color: #145fd7;
     background-color: #4a87ee;
-    border-color: #145fd7; }
+    color: #fff; }
     .button.button-positive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-positive.active {
+      border-color: #145fd7;
       background-color: #145fd7;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #145fd7; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-positive.button-clear {
-      color: #4a87ee;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-positive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #4a87ee; }
+    .button.button-positive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-positive.button-outline {
-      background: transparent;
       border-color: #4a87ee;
+      background: transparent;
       color: #4a87ee; }
       .button.button-positive.button-outline.active {
         background-color: #4a87ee;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-calm {
-    color: #fff;
+    border-color: #1aacc3;
     background-color: #43cee6;
-    border-color: #1aacc3; }
+    color: #fff; }
     .button.button-calm:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-calm.active {
+      border-color: #1aacc3;
       background-color: #1aacc3;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #1aacc3; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-calm.button-clear {
-      color: #43cee6;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-calm.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #43cee6; }
+    .button.button-calm.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-calm.button-outline {
-      background: transparent;
       border-color: #43cee6;
+      background: transparent;
       color: #43cee6; }
       .button.button-calm.button-outline.active {
         background-color: #43cee6;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-assertive {
-    color: #fff;
+    border-color: #cc2311;
     background-color: #ef4e3a;
-    border-color: #cc2311; }
+    color: #fff; }
     .button.button-assertive:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-assertive.active {
+      border-color: #cc2311;
       background-color: #cc2311;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #cc2311; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-assertive.button-clear {
-      color: #ef4e3a;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-assertive.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #ef4e3a; }
+    .button.button-assertive.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-assertive.button-outline {
-      background: transparent;
       border-color: #ef4e3a;
+      background: transparent;
       color: #ef4e3a; }
       .button.button-assertive.button-outline.active {
         background-color: #ef4e3a;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-balanced {
-    color: #fff;
+    border-color: #498f24;
     background-color: #66cc33;
-    border-color: #498f24; }
+    color: #fff; }
     .button.button-balanced:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-balanced.active {
+      border-color: #498f24;
       background-color: #498f24;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #498f24; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-balanced.button-clear {
-      color: #66cc33;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-balanced.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #66cc33; }
+    .button.button-balanced.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-balanced.button-outline {
-      background: transparent;
       border-color: #66cc33;
+      background: transparent;
       color: #66cc33; }
       .button.button-balanced.button-outline.active {
         background-color: #66cc33;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-energized {
-    color: #fff;
+    border-color: #d39211;
     background-color: #f0b840;
-    border-color: #d39211; }
+    color: #fff; }
     .button.button-energized:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-energized.active {
+      border-color: #d39211;
       background-color: #d39211;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #d39211; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-energized.button-clear {
-      color: #f0b840;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-energized.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #f0b840; }
+    .button.button-energized.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-energized.button-outline {
-      background: transparent;
       border-color: #f0b840;
+      background: transparent;
       color: #f0b840; }
       .button.button-energized.button-outline.active {
         background-color: #f0b840;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-royal {
-    color: #fff;
+    border-color: #552bdf;
     background-color: #8a6de9;
-    border-color: #552bdf; }
+    color: #fff; }
     .button.button-royal:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-royal.active {
+      border-color: #552bdf;
       background-color: #552bdf;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #552bdf; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-royal.button-clear {
-      color: #8a6de9;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-royal.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #8a6de9; }
+    .button.button-royal.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-royal.button-outline {
-      background: transparent;
       border-color: #8a6de9;
+      background: transparent;
       color: #8a6de9; }
       .button.button-royal.button-outline.active {
         background-color: #8a6de9;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
   .button.button-dark {
-    color: #fff;
+    border-color: #111;
     background-color: #444;
-    border-color: #111; }
+    color: #fff; }
     .button.button-dark:hover {
       color: #fff;
       text-decoration: none; }
     .button.button-dark.active {
+      border-color: #000;
       background-color: #262626;
-      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
-      border-color: #000; }
+      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15); }
     .button.button-dark.button-clear {
-      color: #444;
-      background: none;
       border-color: transparent;
-      box-shadow: none; }
-    .button.button-dark.button-icon {
       background: none;
-      border-color: transparent; }
+      box-shadow: none;
+      color: #444; }
+    .button.button-dark.button-icon {
+      border-color: transparent;
+      background: none; }
     .button.button-dark.button-outline {
-      background: transparent;
       border-color: #444;
+      background: transparent;
       color: #444; }
       .button.button-dark.button-outline.active {
         background-color: #444;
-        color: #fff;
-        box-shadow: none; }
+        box-shadow: none;
+        color: #fff; }
 
 .button-small {
   padding: 0 4px;
@@ -4965,13 +5026,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-clear.button-clear {
-    color: #b2b2b2;
-    background: none;
     border-color: transparent;
-    box-shadow: none; }
-  .button-clear.button-icon {
     background: none;
-    border-color: transparent; }
+    box-shadow: none;
+    color: #b2b2b2; }
+  .button-clear.button-icon {
+    border-color: transparent;
+    background: none; }
   .button-clear.active {
     opacity: 0.3; }
 
@@ -4982,13 +5043,13 @@ input[type="range"] {
   background: none;
   box-shadow: none; }
   .button-outline.button-outline {
-    background: transparent;
     border-color: #b2b2b2;
+    background: transparent;
     color: #b2b2b2; }
     .button-outline.button-outline.active {
       background-color: #b2b2b2;
-      color: #fff;
-      box-shadow: none; }
+      box-shadow: none;
+      color: #fff; }
 
 .padding > .button.button-block:first-child {
   margin-top: 0; }
@@ -6009,9 +6070,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-sm .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-sm .col, .responsive-sm .col-10, .responsive-sm .col-20, .responsive-sm .col-25, .responsive-sm .col-33, .responsive-sm .col-34, .responsive-sm .col-50, .responsive-sm .col-66, .responsive-sm .col-67, .responsive-sm .col-75, .responsive-sm .col-80, .responsive-sm .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 767px) {
   .responsive-md {
@@ -6022,9 +6091,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-md .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-md .col, .responsive-md .col-10, .responsive-md .col-20, .responsive-md .col-25, .responsive-md .col-33, .responsive-md .col-34, .responsive-md .col-50, .responsive-md .col-66, .responsive-md .col-67, .responsive-md .col-75, .responsive-md .col-80, .responsive-md .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 @media (max-width: 1023px) {
   .responsive-lg {
@@ -6035,9 +6112,17 @@ a.button {
     -webkit-flex-direction: column;
     -ms-flex-direction: column;
     flex-direction: column; }
-    .responsive-lg .col {
-      width: 100%;
-      margin-bottom: 15px; } }
+    .responsive-lg .col, .responsive-lg .col-10, .responsive-lg .col-20, .responsive-lg .col-25, .responsive-lg .col-33, .responsive-lg .col-34, .responsive-lg .col-50, .responsive-lg .col-66, .responsive-lg .col-67, .responsive-lg .col-75, .responsive-lg .col-80, .responsive-lg .col-90 {
+      -webkit-box-flex: 1;
+      -webkit-flex: 1;
+      -moz-box-flex: 1;
+      -moz-flex: 1;
+      -ms-flex: 1;
+      flex: 1;
+      margin-bottom: 15px;
+      margin-left: 0;
+      max-width: 100%;
+      width: 100%; } }
 
 /**
  * Utility Classes
@@ -6062,9 +6147,9 @@ a.button {
 .invisible {
   visibility: hidden; }
 
-.hide-footer .bar-footer, .hide-footer .tabs {
+.footer-hide .bar-footer, .footer-hide .tabs {
   display: none; }
-.hide-footer .has-footer, .hide-footer .has-tabs {
+.footer-hide .has-footer, .footer-hide .has-tabs {
   bottom: 0; }
 
 .inline {
diff --git a/phonegap/www/index.html b/phonegap/www/index.html
index 4ea9421..7db7409 100644
--- a/phonegap/www/index.html
+++ b/phonegap/www/index.html
@@ -45,6 +45,7 @@
        // ga('send', 'pageview');
     </script>
 
+    <script src="scripts/fastclick.js"></script>
     <script src="scripts/ionic.js"></script>
     <script src="scripts/jquery.js"></script>
     <script src="scripts/angular.js"></script>
